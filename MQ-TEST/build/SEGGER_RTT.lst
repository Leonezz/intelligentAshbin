ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"SEGGER_RTT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_GetAvailWriteSpace:
  26              	.LVL0:
  27              	.LFB4:
  28              		.file 1 "RTT/SEGGER_RTT.c"
   1:RTT/SEGGER_RTT.c **** /*********************************************************************
   2:RTT/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:RTT/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:RTT/SEGGER_RTT.c **** **********************************************************************
   5:RTT/SEGGER_RTT.c **** *                                                                    *
   6:RTT/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:RTT/SEGGER_RTT.c **** *                                                                    *
   8:RTT/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:RTT/SEGGER_RTT.c **** *                                                                    *
  10:RTT/SEGGER_RTT.c **** **********************************************************************
  11:RTT/SEGGER_RTT.c **** *                                                                    *
  12:RTT/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:RTT/SEGGER_RTT.c **** *                                                                    *
  14:RTT/SEGGER_RTT.c **** **********************************************************************
  15:RTT/SEGGER_RTT.c **** *                                                                    *
  16:RTT/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:RTT/SEGGER_RTT.c **** *                                                                    *
  18:RTT/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:RTT/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:RTT/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:RTT/SEGGER_RTT.c **** *                                                                    *
  22:RTT/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:RTT/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:RTT/SEGGER_RTT.c **** * condition is met:                                                  *
  25:RTT/SEGGER_RTT.c **** *                                                                    *
  26:RTT/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:RTT/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:RTT/SEGGER_RTT.c **** *                                                                    *
  29:RTT/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:RTT/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 2


  31:RTT/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:RTT/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:RTT/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:RTT/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:RTT/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:RTT/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:RTT/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:RTT/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:RTT/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:RTT/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:RTT/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:RTT/SEGGER_RTT.c **** *                                                                    *
  43:RTT/SEGGER_RTT.c **** **********************************************************************
  44:RTT/SEGGER_RTT.c **** *                                                                    *
  45:RTT/SEGGER_RTT.c **** *       RTT version: 6.62b                                           *
  46:RTT/SEGGER_RTT.c **** *                                                                    *
  47:RTT/SEGGER_RTT.c **** **********************************************************************
  48:RTT/SEGGER_RTT.c **** 
  49:RTT/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:RTT/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:RTT/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:RTT/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:RTT/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:RTT/SEGGER_RTT.c **** Revision: $Rev: 17697 $
  55:RTT/SEGGER_RTT.c **** 
  56:RTT/SEGGER_RTT.c **** Additional information:
  57:RTT/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:RTT/SEGGER_RTT.c ****           H->T    Host to target communication
  59:RTT/SEGGER_RTT.c ****           T->H    Target to host communication
  60:RTT/SEGGER_RTT.c **** 
  61:RTT/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:RTT/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:RTT/SEGGER_RTT.c **** 
  64:RTT/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:RTT/SEGGER_RTT.c **** 
  66:RTT/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:RTT/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:RTT/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:RTT/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:RTT/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  71:RTT/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:RTT/SEGGER_RTT.c **** 
  73:RTT/SEGGER_RTT.c **** 
  74:RTT/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:RTT/SEGGER_RTT.c **** */
  76:RTT/SEGGER_RTT.c **** 
  77:RTT/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:RTT/SEGGER_RTT.c **** 
  79:RTT/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:RTT/SEGGER_RTT.c **** 
  81:RTT/SEGGER_RTT.c **** /*********************************************************************
  82:RTT/SEGGER_RTT.c **** *
  83:RTT/SEGGER_RTT.c **** *       Configuration, default values
  84:RTT/SEGGER_RTT.c **** *
  85:RTT/SEGGER_RTT.c **** **********************************************************************
  86:RTT/SEGGER_RTT.c **** */
  87:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 3


  88:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
  89:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
  90:RTT/SEGGER_RTT.c **** #endif
  91:RTT/SEGGER_RTT.c **** 
  92:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
  93:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
  94:RTT/SEGGER_RTT.c **** #endif
  95:RTT/SEGGER_RTT.c **** 
  96:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
  97:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
  98:RTT/SEGGER_RTT.c **** #endif
  99:RTT/SEGGER_RTT.c **** 
 100:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 101:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 102:RTT/SEGGER_RTT.c **** #endif
 103:RTT/SEGGER_RTT.c **** 
 104:RTT/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 105:RTT/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 106:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 107:RTT/SEGGER_RTT.c ****   #endif
 108:RTT/SEGGER_RTT.c **** #endif
 109:RTT/SEGGER_RTT.c **** 
 110:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 111:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            0
 112:RTT/SEGGER_RTT.c **** #endif
 113:RTT/SEGGER_RTT.c **** 
 114:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 115:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     0
 116:RTT/SEGGER_RTT.c **** #endif
 117:RTT/SEGGER_RTT.c **** 
 118:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 119:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 120:RTT/SEGGER_RTT.c **** #endif
 121:RTT/SEGGER_RTT.c **** 
 122:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 123:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 124:RTT/SEGGER_RTT.c **** #endif
 125:RTT/SEGGER_RTT.c **** 
 126:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 127:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 128:RTT/SEGGER_RTT.c **** #endif
 129:RTT/SEGGER_RTT.c **** 
 130:RTT/SEGGER_RTT.c **** #ifndef   STRLEN
 131:RTT/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 132:RTT/SEGGER_RTT.c **** #endif
 133:RTT/SEGGER_RTT.c **** 
 134:RTT/SEGGER_RTT.c **** #ifndef   STRCPY
 135:RTT/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc, NumBytes)                   strcpy((pDest), (pSrc))
 136:RTT/SEGGER_RTT.c **** #endif
 137:RTT/SEGGER_RTT.c **** 
 138:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 139:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 140:RTT/SEGGER_RTT.c **** #endif
 141:RTT/SEGGER_RTT.c **** 
 142:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 143:RTT/SEGGER_RTT.c ****   #ifdef  MEMCPY
 144:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 4


 145:RTT/SEGGER_RTT.c ****   #else
 146:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 147:RTT/SEGGER_RTT.c ****   #endif
 148:RTT/SEGGER_RTT.c **** #endif
 149:RTT/SEGGER_RTT.c **** 
 150:RTT/SEGGER_RTT.c **** #ifndef   MIN
 151:RTT/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 152:RTT/SEGGER_RTT.c **** #endif
 153:RTT/SEGGER_RTT.c **** 
 154:RTT/SEGGER_RTT.c **** #ifndef   MAX
 155:RTT/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 156:RTT/SEGGER_RTT.c **** #endif
 157:RTT/SEGGER_RTT.c **** //
 158:RTT/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 159:RTT/SEGGER_RTT.c **** //
 160:RTT/SEGGER_RTT.c **** #ifndef NULL
 161:RTT/SEGGER_RTT.c ****   #define NULL 0
 162:RTT/SEGGER_RTT.c **** #endif
 163:RTT/SEGGER_RTT.c **** 
 164:RTT/SEGGER_RTT.c **** /*********************************************************************
 165:RTT/SEGGER_RTT.c **** *
 166:RTT/SEGGER_RTT.c **** *       Defines, fixed
 167:RTT/SEGGER_RTT.c **** *
 168:RTT/SEGGER_RTT.c **** **********************************************************************
 169:RTT/SEGGER_RTT.c **** */
 170:RTT/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 171:RTT/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 172:RTT/SEGGER_RTT.c **** #endif
 173:RTT/SEGGER_RTT.c **** 
 174:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 175:RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 176:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 177:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 178:RTT/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 179:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 180:RTT/SEGGER_RTT.c ****                                   Var
 181:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 182:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 183:RTT/SEGGER_RTT.c ****   #else
 184:RTT/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 185:RTT/SEGGER_RTT.c ****   #endif
 186:RTT/SEGGER_RTT.c **** #else
 187:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 188:RTT/SEGGER_RTT.c **** #endif
 189:RTT/SEGGER_RTT.c **** 
 190:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 191:RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 192:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 193:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 194:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 195:RTT/SEGGER_RTT.c ****                                         Var
 196:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 197:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 198:RTT/SEGGER_RTT.c ****   #else
 199:RTT/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 200:RTT/SEGGER_RTT.c ****   #endif
 201:RTT/SEGGER_RTT.c **** #else
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 5


 202:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 203:RTT/SEGGER_RTT.c **** #endif
 204:RTT/SEGGER_RTT.c **** 
 205:RTT/SEGGER_RTT.c **** 
 206:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 207:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 208:RTT/SEGGER_RTT.c **** #else
 209:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 210:RTT/SEGGER_RTT.c **** #endif
 211:RTT/SEGGER_RTT.c **** 
 212:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 213:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 214:RTT/SEGGER_RTT.c **** #else
 215:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 216:RTT/SEGGER_RTT.c **** #endif
 217:RTT/SEGGER_RTT.c **** 
 218:RTT/SEGGER_RTT.c **** 
 219:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 220:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 221:RTT/SEGGER_RTT.c **** #else
 222:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 223:RTT/SEGGER_RTT.c **** #endif
 224:RTT/SEGGER_RTT.c **** 
 225:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 226:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 227:RTT/SEGGER_RTT.c **** #else
 228:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 229:RTT/SEGGER_RTT.c **** #endif
 230:RTT/SEGGER_RTT.c **** 
 231:RTT/SEGGER_RTT.c **** /*********************************************************************
 232:RTT/SEGGER_RTT.c **** *
 233:RTT/SEGGER_RTT.c **** *       Static const data
 234:RTT/SEGGER_RTT.c **** *
 235:RTT/SEGGER_RTT.c **** **********************************************************************
 236:RTT/SEGGER_RTT.c **** */
 237:RTT/SEGGER_RTT.c **** 
 238:RTT/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 239:RTT/SEGGER_RTT.c **** 
 240:RTT/SEGGER_RTT.c **** /*********************************************************************
 241:RTT/SEGGER_RTT.c **** *
 242:RTT/SEGGER_RTT.c **** *       Static data
 243:RTT/SEGGER_RTT.c **** *
 244:RTT/SEGGER_RTT.c **** **********************************************************************
 245:RTT/SEGGER_RTT.c **** */
 246:RTT/SEGGER_RTT.c **** //
 247:RTT/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 248:RTT/SEGGER_RTT.c **** //
 249:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 250:RTT/SEGGER_RTT.c **** 
 251:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]));
 252:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]))
 253:RTT/SEGGER_RTT.c **** 
 254:RTT/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 255:RTT/SEGGER_RTT.c **** 
 256:RTT/SEGGER_RTT.c **** /*********************************************************************
 257:RTT/SEGGER_RTT.c **** *
 258:RTT/SEGGER_RTT.c **** *       Static functions
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 6


 259:RTT/SEGGER_RTT.c **** *
 260:RTT/SEGGER_RTT.c **** **********************************************************************
 261:RTT/SEGGER_RTT.c **** */
 262:RTT/SEGGER_RTT.c **** 
 263:RTT/SEGGER_RTT.c **** /*********************************************************************
 264:RTT/SEGGER_RTT.c **** *
 265:RTT/SEGGER_RTT.c **** *       _DoInit()
 266:RTT/SEGGER_RTT.c **** *
 267:RTT/SEGGER_RTT.c **** *  Function description
 268:RTT/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 269:RTT/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 270:RTT/SEGGER_RTT.c **** *
 271:RTT/SEGGER_RTT.c **** */
 272:RTT/SEGGER_RTT.c **** #define INIT()  do {                                            \
 273:RTT/SEGGER_RTT.c ****                   if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
 274:RTT/SEGGER_RTT.c ****                 } while (0)
 275:RTT/SEGGER_RTT.c **** static void _DoInit(void) {
 276:RTT/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 277:RTT/SEGGER_RTT.c ****   //
 278:RTT/SEGGER_RTT.c ****   // Initialize control block
 279:RTT/SEGGER_RTT.c ****   //
 280:RTT/SEGGER_RTT.c ****   p = &_SEGGER_RTT;
 281:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 282:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 283:RTT/SEGGER_RTT.c ****   //
 284:RTT/SEGGER_RTT.c ****   // Initialize up buffer 0
 285:RTT/SEGGER_RTT.c ****   //
 286:RTT/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 287:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 288:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 289:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 290:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 291:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 292:RTT/SEGGER_RTT.c ****   //
 293:RTT/SEGGER_RTT.c ****   // Initialize down buffer 0
 294:RTT/SEGGER_RTT.c ****   //
 295:RTT/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 296:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 297:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 298:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 299:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 300:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 301:RTT/SEGGER_RTT.c ****   //
 302:RTT/SEGGER_RTT.c ****   // Finish initialization of the control block.
 303:RTT/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 304:RTT/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 305:RTT/SEGGER_RTT.c ****   //
 306:RTT/SEGGER_RTT.c ****   STRCPY(&p->acID[7], "RTT", 9);
 307:RTT/SEGGER_RTT.c ****   STRCPY(&p->acID[0], "SEGGER", 7);
 308:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 309:RTT/SEGGER_RTT.c **** }
 310:RTT/SEGGER_RTT.c **** 
 311:RTT/SEGGER_RTT.c **** /*********************************************************************
 312:RTT/SEGGER_RTT.c **** *
 313:RTT/SEGGER_RTT.c **** *       _WriteBlocking()
 314:RTT/SEGGER_RTT.c **** *
 315:RTT/SEGGER_RTT.c **** *  Function description
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 7


 316:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 317:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 318:RTT/SEGGER_RTT.c **** *    read by the host.
 319:RTT/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 320:RTT/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 321:RTT/SEGGER_RTT.c **** *
 322:RTT/SEGGER_RTT.c **** *  Parameters
 323:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 324:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 325:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 326:RTT/SEGGER_RTT.c **** *
 327:RTT/SEGGER_RTT.c **** *  Return value
 328:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 329:RTT/SEGGER_RTT.c **** */
 330:RTT/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 331:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 332:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 333:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 334:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 335:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 336:RTT/SEGGER_RTT.c ****   char*    pDst;
 337:RTT/SEGGER_RTT.c **** #endif
 338:RTT/SEGGER_RTT.c ****   //
 339:RTT/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 340:RTT/SEGGER_RTT.c ****   //
 341:RTT/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 342:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 343:RTT/SEGGER_RTT.c ****   do {
 344:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 345:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 346:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 347:RTT/SEGGER_RTT.c ****     } else {
 348:RTT/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 349:RTT/SEGGER_RTT.c ****     }
 350:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 351:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 352:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 353:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 354:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 355:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 356:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 357:RTT/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 358:RTT/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 359:RTT/SEGGER_RTT.c ****     };
 360:RTT/SEGGER_RTT.c **** #else
 361:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 362:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 363:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 364:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 365:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 366:RTT/SEGGER_RTT.c **** #endif
 367:RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 368:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 369:RTT/SEGGER_RTT.c ****     }
 370:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 371:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 372:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 8


 373:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 374:RTT/SEGGER_RTT.c **** }
 375:RTT/SEGGER_RTT.c **** 
 376:RTT/SEGGER_RTT.c **** /*********************************************************************
 377:RTT/SEGGER_RTT.c **** *
 378:RTT/SEGGER_RTT.c **** *       _WriteNoCheck()
 379:RTT/SEGGER_RTT.c **** *
 380:RTT/SEGGER_RTT.c **** *  Function description
 381:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 382:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 383:RTT/SEGGER_RTT.c **** *    read by the host.
 384:RTT/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 385:RTT/SEGGER_RTT.c **** *
 386:RTT/SEGGER_RTT.c **** *  Parameters
 387:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 388:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 389:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 390:RTT/SEGGER_RTT.c **** *
 391:RTT/SEGGER_RTT.c **** *  Notes
 392:RTT/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 393:RTT/SEGGER_RTT.c **** */
 394:RTT/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 395:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 396:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 397:RTT/SEGGER_RTT.c ****   unsigned Rem;
 398:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 399:RTT/SEGGER_RTT.c ****   char*    pDst;
 400:RTT/SEGGER_RTT.c **** #endif
 401:RTT/SEGGER_RTT.c **** 
 402:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 403:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 404:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 405:RTT/SEGGER_RTT.c ****     //
 406:RTT/SEGGER_RTT.c ****     // All data fits before wrap around
 407:RTT/SEGGER_RTT.c ****     //
 408:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 409:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 410:RTT/SEGGER_RTT.c ****     WrOff += NumBytes;
 411:RTT/SEGGER_RTT.c ****     while (NumBytes--) {
 412:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 413:RTT/SEGGER_RTT.c ****     };
 414:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 415:RTT/SEGGER_RTT.c **** #else
 416:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 417:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 418:RTT/SEGGER_RTT.c **** #endif
 419:RTT/SEGGER_RTT.c ****   } else {
 420:RTT/SEGGER_RTT.c ****     //
 421:RTT/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 422:RTT/SEGGER_RTT.c ****     //
 423:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 424:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 425:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 426:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 427:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 428:RTT/SEGGER_RTT.c ****     };
 429:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer;
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 9


 430:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 431:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 432:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 433:RTT/SEGGER_RTT.c ****     };
 434:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 435:RTT/SEGGER_RTT.c **** #else
 436:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 437:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 438:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 439:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 440:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 441:RTT/SEGGER_RTT.c **** #endif
 442:RTT/SEGGER_RTT.c ****   }
 443:RTT/SEGGER_RTT.c **** }
 444:RTT/SEGGER_RTT.c **** 
 445:RTT/SEGGER_RTT.c **** /*********************************************************************
 446:RTT/SEGGER_RTT.c **** *
 447:RTT/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 448:RTT/SEGGER_RTT.c **** *
 449:RTT/SEGGER_RTT.c **** *  Function description
 450:RTT/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 451:RTT/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 452:RTT/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 453:RTT/SEGGER_RTT.c **** *
 454:RTT/SEGGER_RTT.c **** *  Parameters
 455:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 456:RTT/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 457:RTT/SEGGER_RTT.c **** */
 458:RTT/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 459:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 460:RTT/SEGGER_RTT.c **** 
 461:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 462:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 463:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 464:RTT/SEGGER_RTT.c **** }
 465:RTT/SEGGER_RTT.c **** 
 466:RTT/SEGGER_RTT.c **** /*********************************************************************
 467:RTT/SEGGER_RTT.c **** *
 468:RTT/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 469:RTT/SEGGER_RTT.c **** *
 470:RTT/SEGGER_RTT.c **** *  Function description
 471:RTT/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 472:RTT/SEGGER_RTT.c **** *    buffer without blocking.
 473:RTT/SEGGER_RTT.c **** *
 474:RTT/SEGGER_RTT.c **** *  Parameters
 475:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 476:RTT/SEGGER_RTT.c **** *
 477:RTT/SEGGER_RTT.c **** *  Return value
 478:RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 479:RTT/SEGGER_RTT.c **** */
 480:RTT/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  29              		.loc 1 480 66 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 481:RTT/SEGGER_RTT.c ****   unsigned RdOff;
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 10


  34              		.loc 1 481 3 view .LVU1
 482:RTT/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 482 3 view .LVU2
 483:RTT/SEGGER_RTT.c ****   unsigned r;
  36              		.loc 1 483 3 view .LVU3
 484:RTT/SEGGER_RTT.c ****   //
 485:RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 486:RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 487:RTT/SEGGER_RTT.c ****   //
 488:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  37              		.loc 1 488 3 view .LVU4
  38              		.loc 1 488 9 is_stmt 0 view .LVU5
  39 0000 0369     		ldr	r3, [r0, #16]
  40              	.LVL1:
 489:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  41              		.loc 1 489 3 is_stmt 1 view .LVU6
  42              		.loc 1 489 9 is_stmt 0 view .LVU7
  43 0002 C268     		ldr	r2, [r0, #12]
  44              	.LVL2:
 490:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  45              		.loc 1 490 3 is_stmt 1 view .LVU8
  46              		.loc 1 490 6 is_stmt 0 view .LVU9
  47 0004 9342     		cmp	r3, r2
  48 0006 04D8     		bhi	.L2
 491:RTT/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  49              		.loc 1 491 5 is_stmt 1 view .LVU10
  50              		.loc 1 491 14 is_stmt 0 view .LVU11
  51 0008 8068     		ldr	r0, [r0, #8]
  52              	.LVL3:
  53              		.loc 1 491 34 view .LVU12
  54 000a 801A     		subs	r0, r0, r2
  55              		.loc 1 491 42 view .LVU13
  56 000c 0344     		add	r3, r3, r0
  57              	.LVL4:
  58              		.loc 1 491 7 view .LVU14
  59 000e 581E     		subs	r0, r3, #1
  60              	.LVL5:
  61              		.loc 1 491 7 view .LVU15
  62 0010 7047     		bx	lr
  63              	.LVL6:
  64              	.L2:
 492:RTT/SEGGER_RTT.c ****   } else {
 493:RTT/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  65              		.loc 1 493 5 is_stmt 1 view .LVU16
  66              		.loc 1 493 15 is_stmt 0 view .LVU17
  67 0012 9B1A     		subs	r3, r3, r2
  68              	.LVL7:
  69              		.loc 1 493 7 view .LVU18
  70 0014 581E     		subs	r0, r3, #1
  71              	.LVL8:
 494:RTT/SEGGER_RTT.c ****   }
 495:RTT/SEGGER_RTT.c ****   return r;
  72              		.loc 1 495 3 is_stmt 1 view .LVU19
 496:RTT/SEGGER_RTT.c **** }
  73              		.loc 1 496 1 is_stmt 0 view .LVU20
  74 0016 7047     		bx	lr
  75              		.cfi_endproc
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 11


  76              	.LFE4:
  78              		.section	.text._WriteNoCheck,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	_WriteNoCheck:
  86              	.LVL9:
  87              	.LFB2:
 394:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  88              		.loc 1 394 94 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
 394:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  92              		.loc 1 394 94 is_stmt 0 view .LVU22
  93 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  94              	.LCFI0:
  95              		.cfi_def_cfa_offset 32
  96              		.cfi_offset 3, -32
  97              		.cfi_offset 4, -28
  98              		.cfi_offset 5, -24
  99              		.cfi_offset 6, -20
 100              		.cfi_offset 7, -16
 101              		.cfi_offset 8, -12
 102              		.cfi_offset 9, -8
 103              		.cfi_offset 14, -4
 104 0004 0446     		mov	r4, r0
 105 0006 8846     		mov	r8, r1
 106 0008 1646     		mov	r6, r2
 395:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 107              		.loc 1 395 3 is_stmt 1 view .LVU23
 396:RTT/SEGGER_RTT.c ****   unsigned Rem;
 108              		.loc 1 396 3 view .LVU24
 397:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 109              		.loc 1 397 3 view .LVU25
 402:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 110              		.loc 1 402 3 view .LVU26
 402:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 111              		.loc 1 402 9 is_stmt 0 view .LVU27
 112 000a C568     		ldr	r5, [r0, #12]
 113              	.LVL10:
 403:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 114              		.loc 1 403 3 is_stmt 1 view .LVU28
 403:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 115              		.loc 1 403 14 is_stmt 0 view .LVU29
 116 000c 8768     		ldr	r7, [r0, #8]
 403:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 117              		.loc 1 403 7 view .LVU30
 118 000e A7EB0509 		sub	r9, r7, r5
 119              	.LVL11:
 404:RTT/SEGGER_RTT.c ****     //
 120              		.loc 1 404 3 is_stmt 1 view .LVU31
 404:RTT/SEGGER_RTT.c ****     //
 121              		.loc 1 404 6 is_stmt 0 view .LVU32
 122 0012 9145     		cmp	r9, r2
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 12


 123 0014 07D9     		bls	.L5
 416:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 124              		.loc 1 416 5 is_stmt 1 view .LVU33
 125 0016 4068     		ldr	r0, [r0, #4]
 126              	.LVL12:
 416:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 127              		.loc 1 416 5 is_stmt 0 view .LVU34
 128 0018 2844     		add	r0, r0, r5
 129 001a FFF7FEFF 		bl	memcpy
 130              	.LVL13:
 417:RTT/SEGGER_RTT.c **** #endif
 131              		.loc 1 417 5 is_stmt 1 view .LVU35
 417:RTT/SEGGER_RTT.c **** #endif
 132              		.loc 1 417 26 is_stmt 0 view .LVU36
 133 001e 3544     		add	r5, r5, r6
 134              	.LVL14:
 417:RTT/SEGGER_RTT.c **** #endif
 135              		.loc 1 417 18 view .LVU37
 136 0020 E560     		str	r5, [r4, #12]
 137              	.L4:
 443:RTT/SEGGER_RTT.c **** 
 138              		.loc 1 443 1 view .LVU38
 139 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 140              	.LVL15:
 141              	.L5:
 436:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 142              		.loc 1 436 5 is_stmt 1 view .LVU39
 437:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 143              		.loc 1 437 5 view .LVU40
 144 0026 4068     		ldr	r0, [r0, #4]
 145              	.LVL16:
 437:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 146              		.loc 1 437 5 is_stmt 0 view .LVU41
 147 0028 4A46     		mov	r2, r9
 148              	.LVL17:
 437:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 149              		.loc 1 437 5 view .LVU42
 150 002a 2844     		add	r0, r0, r5
 151 002c FFF7FEFF 		bl	memcpy
 152              	.LVL18:
 438:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 153              		.loc 1 438 5 is_stmt 1 view .LVU43
 438:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 154              		.loc 1 438 20 is_stmt 0 view .LVU44
 155 0030 ED1B     		subs	r5, r5, r7
 156              	.LVL19:
 438:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 157              		.loc 1 438 20 view .LVU45
 158 0032 3544     		add	r5, r5, r6
 159              	.LVL20:
 439:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 160              		.loc 1 439 5 is_stmt 1 view .LVU46
 161 0034 2A46     		mov	r2, r5
 162 0036 08EB0901 		add	r1, r8, r9
 163 003a 6068     		ldr	r0, [r4, #4]
 164 003c FFF7FEFF 		bl	memcpy
 165              	.LVL21:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 13


 440:RTT/SEGGER_RTT.c **** #endif
 166              		.loc 1 440 5 view .LVU47
 440:RTT/SEGGER_RTT.c **** #endif
 167              		.loc 1 440 18 is_stmt 0 view .LVU48
 168 0040 E560     		str	r5, [r4, #12]
 443:RTT/SEGGER_RTT.c **** 
 169              		.loc 1 443 1 view .LVU49
 170 0042 EEE7     		b	.L4
 171              		.cfi_endproc
 172              	.LFE2:
 174              		.section	.text._WriteBlocking,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	_WriteBlocking:
 182              	.LVL22:
 183              	.LFB1:
 330:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 184              		.loc 1 330 101 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 330:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 188              		.loc 1 330 101 is_stmt 0 view .LVU51
 189 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 190              	.LCFI1:
 191              		.cfi_def_cfa_offset 32
 192              		.cfi_offset 3, -32
 193              		.cfi_offset 4, -28
 194              		.cfi_offset 5, -24
 195              		.cfi_offset 6, -20
 196              		.cfi_offset 7, -16
 197              		.cfi_offset 8, -12
 198              		.cfi_offset 9, -8
 199              		.cfi_offset 14, -4
 200 0004 0646     		mov	r6, r0
 201 0006 8846     		mov	r8, r1
 202 0008 1746     		mov	r7, r2
 331:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 203              		.loc 1 331 3 is_stmt 1 view .LVU52
 332:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 204              		.loc 1 332 3 view .LVU53
 333:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 205              		.loc 1 333 3 view .LVU54
 334:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 206              		.loc 1 334 3 view .LVU55
 341:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 207              		.loc 1 341 3 view .LVU56
 208              	.LVL23:
 342:RTT/SEGGER_RTT.c ****   do {
 209              		.loc 1 342 3 view .LVU57
 342:RTT/SEGGER_RTT.c ****   do {
 210              		.loc 1 342 9 is_stmt 0 view .LVU58
 211 000a C568     		ldr	r5, [r0, #12]
 212              	.LVL24:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 14


 341:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 213              		.loc 1 341 19 view .LVU59
 214 000c 4FF00009 		mov	r9, #0
 215 0010 18E0     		b	.L12
 216              	.LVL25:
 217              	.L17:
 346:RTT/SEGGER_RTT.c ****     } else {
 218              		.loc 1 346 7 is_stmt 1 view .LVU60
 346:RTT/SEGGER_RTT.c ****     } else {
 219              		.loc 1 346 31 is_stmt 0 view .LVU61
 220 0012 641B     		subs	r4, r4, r5
 221              	.LVL26:
 346:RTT/SEGGER_RTT.c ****     } else {
 222              		.loc 1 346 23 view .LVU62
 223 0014 621E     		subs	r2, r4, #1
 224              	.LVL27:
 225              	.L10:
 350:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 226              		.loc 1 350 5 is_stmt 1 view .LVU63
 350:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 227              		.loc 1 350 23 is_stmt 0 view .LVU64
 228 0016 B368     		ldr	r3, [r6, #8]
 229 0018 5C1B     		subs	r4, r3, r5
 350:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 230              		.loc 1 350 21 view .LVU65
 231 001a 9442     		cmp	r4, r2
 232 001c 28BF     		it	cs
 233 001e 1446     		movcs	r4, r2
 234              	.LVL28:
 351:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 235              		.loc 1 351 5 is_stmt 1 view .LVU66
 351:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 236              		.loc 1 351 21 is_stmt 0 view .LVU67
 237 0020 BC42     		cmp	r4, r7
 238 0022 28BF     		it	cs
 239 0024 3C46     		movcs	r4, r7
 240              	.LVL29:
 361:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 241              		.loc 1 361 5 is_stmt 1 view .LVU68
 242 0026 7068     		ldr	r0, [r6, #4]
 243 0028 2246     		mov	r2, r4
 244 002a 4146     		mov	r1, r8
 245 002c 2844     		add	r0, r0, r5
 246 002e FFF7FEFF 		bl	memcpy
 247              	.LVL30:
 362:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 248              		.loc 1 362 5 view .LVU69
 362:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 249              		.loc 1 362 21 is_stmt 0 view .LVU70
 250 0032 A144     		add	r9, r9, r4
 251              	.LVL31:
 363:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 252              		.loc 1 363 5 is_stmt 1 view .LVU71
 363:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 253              		.loc 1 363 21 is_stmt 0 view .LVU72
 254 0034 A044     		add	r8, r8, r4
 255              	.LVL32:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 15


 364:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 256              		.loc 1 364 5 is_stmt 1 view .LVU73
 364:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 257              		.loc 1 364 21 is_stmt 0 view .LVU74
 258 0036 3F1B     		subs	r7, r7, r4
 259              	.LVL33:
 365:RTT/SEGGER_RTT.c **** #endif
 260              		.loc 1 365 5 is_stmt 1 view .LVU75
 365:RTT/SEGGER_RTT.c **** #endif
 261              		.loc 1 365 21 is_stmt 0 view .LVU76
 262 0038 2544     		add	r5, r5, r4
 263              	.LVL34:
 367:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 264              		.loc 1 367 5 is_stmt 1 view .LVU77
 367:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 265              		.loc 1 367 23 is_stmt 0 view .LVU78
 266 003a B368     		ldr	r3, [r6, #8]
 367:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 267              		.loc 1 367 8 view .LVU79
 268 003c AB42     		cmp	r3, r5
 269 003e 09D0     		beq	.L15
 270              	.LVL35:
 271              	.L11:
 370:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 272              		.loc 1 370 5 is_stmt 1 view .LVU80
 370:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 273              		.loc 1 370 18 is_stmt 0 view .LVU81
 274 0040 F560     		str	r5, [r6, #12]
 371:RTT/SEGGER_RTT.c ****   //
 275              		.loc 1 371 11 is_stmt 1 view .LVU82
 371:RTT/SEGGER_RTT.c ****   //
 276              		.loc 1 371 3 is_stmt 0 view .LVU83
 277 0042 4FB1     		cbz	r7, .L16
 278              	.LVL36:
 279              	.L12:
 343:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 280              		.loc 1 343 3 is_stmt 1 view .LVU84
 344:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 281              		.loc 1 344 5 view .LVU85
 344:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 282              		.loc 1 344 11 is_stmt 0 view .LVU86
 283 0044 3469     		ldr	r4, [r6, #16]
 284              	.LVL37:
 345:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 285              		.loc 1 345 5 is_stmt 1 view .LVU87
 345:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 286              		.loc 1 345 8 is_stmt 0 view .LVU88
 287 0046 A542     		cmp	r5, r4
 288 0048 E3D3     		bcc	.L17
 348:RTT/SEGGER_RTT.c ****     }
 289              		.loc 1 348 7 is_stmt 1 view .LVU89
 348:RTT/SEGGER_RTT.c ****     }
 290              		.loc 1 348 30 is_stmt 0 view .LVU90
 291 004a B268     		ldr	r2, [r6, #8]
 348:RTT/SEGGER_RTT.c ****     }
 292              		.loc 1 348 62 view .LVU91
 293 004c 641B     		subs	r4, r4, r5
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 16


 294              	.LVL38:
 348:RTT/SEGGER_RTT.c ****     }
 295              		.loc 1 348 45 view .LVU92
 296 004e 1444     		add	r4, r4, r2
 348:RTT/SEGGER_RTT.c ****     }
 297              		.loc 1 348 23 view .LVU93
 298 0050 621E     		subs	r2, r4, #1
 299              	.LVL39:
 348:RTT/SEGGER_RTT.c ****     }
 300              		.loc 1 348 23 view .LVU94
 301 0052 E0E7     		b	.L10
 302              	.LVL40:
 303              	.L15:
 368:RTT/SEGGER_RTT.c ****     }
 304              		.loc 1 368 13 view .LVU95
 305 0054 0025     		movs	r5, #0
 306              	.LVL41:
 368:RTT/SEGGER_RTT.c ****     }
 307              		.loc 1 368 13 view .LVU96
 308 0056 F3E7     		b	.L11
 309              	.LVL42:
 310              	.L16:
 373:RTT/SEGGER_RTT.c **** }
 311              		.loc 1 373 3 is_stmt 1 view .LVU97
 374:RTT/SEGGER_RTT.c **** 
 312              		.loc 1 374 1 is_stmt 0 view .LVU98
 313 0058 4846     		mov	r0, r9
 314 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 374:RTT/SEGGER_RTT.c **** 
 315              		.loc 1 374 1 view .LVU99
 316              		.cfi_endproc
 317              	.LFE1:
 319              		.section	.text._PostTerminalSwitch,"ax",%progbits
 320              		.align	1
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu fpv4-sp-d16
 326              	_PostTerminalSwitch:
 327              	.LVL43:
 328              	.LFB3:
 458:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 329              		.loc 1 458 88 is_stmt 1 view -0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 458:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 333              		.loc 1 458 88 is_stmt 0 view .LVU101
 334 0000 00B5     		push	{lr}
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 4
 337              		.cfi_offset 14, -4
 338 0002 83B0     		sub	sp, sp, #12
 339              	.LCFI3:
 340              		.cfi_def_cfa_offset 16
 459:RTT/SEGGER_RTT.c **** 
 341              		.loc 1 459 3 is_stmt 1 view .LVU102
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 17


 461:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 342              		.loc 1 461 3 view .LVU103
 461:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 343              		.loc 1 461 9 is_stmt 0 view .LVU104
 344 0004 FF23     		movs	r3, #255
 345 0006 8DF80430 		strb	r3, [sp, #4]
 462:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 346              		.loc 1 462 3 is_stmt 1 view .LVU105
 462:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 347              		.loc 1 462 23 is_stmt 0 view .LVU106
 348 000a 054B     		ldr	r3, .L20
 349 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 462:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 350              		.loc 1 462 9 view .LVU107
 351 000e 8DF80530 		strb	r3, [sp, #5]
 463:RTT/SEGGER_RTT.c **** }
 352              		.loc 1 463 3 is_stmt 1 view .LVU108
 353 0012 0222     		movs	r2, #2
 354 0014 01A9     		add	r1, sp, #4
 355              	.LVL44:
 463:RTT/SEGGER_RTT.c **** }
 356              		.loc 1 463 3 is_stmt 0 view .LVU109
 357 0016 FFF7FEFF 		bl	_WriteBlocking
 358              	.LVL45:
 464:RTT/SEGGER_RTT.c **** 
 359              		.loc 1 464 1 view .LVU110
 360 001a 03B0     		add	sp, sp, #12
 361              	.LCFI4:
 362              		.cfi_def_cfa_offset 4
 363              		@ sp needed
 364 001c 5DF804FB 		ldr	pc, [sp], #4
 365              	.L21:
 366              		.align	2
 367              	.L20:
 368 0020 00000000 		.word	.LANCHOR0
 369              		.cfi_endproc
 370              	.LFE3:
 372              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 373              		.align	2
 374              	.LC0:
 375 0000 5465726D 		.ascii	"Terminal\000"
 375      696E616C 
 375      00
 376 0009 000000   		.align	2
 377              	.LC1:
 378 000c 52545400 		.ascii	"RTT\000"
 379              		.align	2
 380              	.LC2:
 381 0010 53454747 		.ascii	"SEGGER\000"
 381      455200
 382              		.section	.text._DoInit,"ax",%progbits
 383              		.align	1
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu fpv4-sp-d16
 389              	_DoInit:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 18


 390              	.LFB0:
 275:RTT/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 391              		.loc 1 275 27 is_stmt 1 view -0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 276:RTT/SEGGER_RTT.c ****   //
 396              		.loc 1 276 3 view .LVU112
 280:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 397              		.loc 1 280 3 view .LVU113
 398              	.LVL46:
 281:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 399              		.loc 1 281 3 view .LVU114
 281:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 400              		.loc 1 281 25 is_stmt 0 view .LVU115
 401 0000 114B     		ldr	r3, .L23
 402 0002 0322     		movs	r2, #3
 403 0004 1A61     		str	r2, [r3, #16]
 282:RTT/SEGGER_RTT.c ****   //
 404              		.loc 1 282 3 is_stmt 1 view .LVU116
 282:RTT/SEGGER_RTT.c ****   //
 405              		.loc 1 282 25 is_stmt 0 view .LVU117
 406 0006 5A61     		str	r2, [r3, #20]
 286:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 407              		.loc 1 286 3 is_stmt 1 view .LVU118
 286:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 408              		.loc 1 286 27 is_stmt 0 view .LVU119
 409 0008 1049     		ldr	r1, .L23+4
 410 000a 9961     		str	r1, [r3, #24]
 287:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 411              		.loc 1 287 3 is_stmt 1 view .LVU120
 287:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 412              		.loc 1 287 27 is_stmt 0 view .LVU121
 413 000c 104A     		ldr	r2, .L23+8
 414 000e DA61     		str	r2, [r3, #28]
 288:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 415              		.loc 1 288 3 is_stmt 1 view .LVU122
 288:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 416              		.loc 1 288 27 is_stmt 0 view .LVU123
 417 0010 4FF48062 		mov	r2, #1024
 418 0014 1A62     		str	r2, [r3, #32]
 289:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 419              		.loc 1 289 3 is_stmt 1 view .LVU124
 289:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 420              		.loc 1 289 27 is_stmt 0 view .LVU125
 421 0016 0022     		movs	r2, #0
 422 0018 9A62     		str	r2, [r3, #40]
 290:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 423              		.loc 1 290 3 is_stmt 1 view .LVU126
 290:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 424              		.loc 1 290 27 is_stmt 0 view .LVU127
 425 001a 5A62     		str	r2, [r3, #36]
 291:RTT/SEGGER_RTT.c ****   //
 426              		.loc 1 291 3 is_stmt 1 view .LVU128
 291:RTT/SEGGER_RTT.c ****   //
 427              		.loc 1 291 27 is_stmt 0 view .LVU129
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 19


 428 001c DA62     		str	r2, [r3, #44]
 295:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 429              		.loc 1 295 3 is_stmt 1 view .LVU130
 295:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 430              		.loc 1 295 29 is_stmt 0 view .LVU131
 431 001e 1966     		str	r1, [r3, #96]
 296:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 432              		.loc 1 296 3 is_stmt 1 view .LVU132
 296:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 433              		.loc 1 296 29 is_stmt 0 view .LVU133
 434 0020 0C49     		ldr	r1, .L23+12
 435 0022 5966     		str	r1, [r3, #100]
 297:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 436              		.loc 1 297 3 is_stmt 1 view .LVU134
 297:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 437              		.loc 1 297 29 is_stmt 0 view .LVU135
 438 0024 1021     		movs	r1, #16
 439 0026 9966     		str	r1, [r3, #104]
 298:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 440              		.loc 1 298 3 is_stmt 1 view .LVU136
 298:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 441              		.loc 1 298 29 is_stmt 0 view .LVU137
 442 0028 1A67     		str	r2, [r3, #112]
 299:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 443              		.loc 1 299 3 is_stmt 1 view .LVU138
 299:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 444              		.loc 1 299 29 is_stmt 0 view .LVU139
 445 002a DA66     		str	r2, [r3, #108]
 300:RTT/SEGGER_RTT.c ****   //
 446              		.loc 1 300 3 is_stmt 1 view .LVU140
 300:RTT/SEGGER_RTT.c ****   //
 447              		.loc 1 300 29 is_stmt 0 view .LVU141
 448 002c 5A67     		str	r2, [r3, #116]
 306:RTT/SEGGER_RTT.c ****   STRCPY(&p->acID[0], "SEGGER", 7);
 449              		.loc 1 306 3 is_stmt 1 view .LVU142
 450 002e 0A4A     		ldr	r2, .L23+16
 451 0030 1068     		ldr	r0, [r2]
 452 0032 C3F80700 		str	r0, [r3, #7]	@ unaligned
 307:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 453              		.loc 1 307 3 view .LVU143
 454 0036 094A     		ldr	r2, .L23+20
 455 0038 92E80300 		ldm	r2, {r0, r1}
 456 003c 1860     		str	r0, [r3]
 457 003e 9980     		strh	r1, [r3, #4]	@ movhi
 308:RTT/SEGGER_RTT.c **** }
 458              		.loc 1 308 3 view .LVU144
 308:RTT/SEGGER_RTT.c **** }
 459              		.loc 1 308 14 is_stmt 0 view .LVU145
 460 0040 2022     		movs	r2, #32
 461 0042 9A71     		strb	r2, [r3, #6]
 309:RTT/SEGGER_RTT.c **** 
 462              		.loc 1 309 1 view .LVU146
 463 0044 7047     		bx	lr
 464              	.L24:
 465 0046 00BF     		.align	2
 466              	.L23:
 467 0048 00000000 		.word	_SEGGER_RTT
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 20


 468 004c 00000000 		.word	.LC0
 469 0050 00000000 		.word	.LANCHOR1
 470 0054 00000000 		.word	.LANCHOR2
 471 0058 0C000000 		.word	.LC1
 472 005c 10000000 		.word	.LC2
 473              		.cfi_endproc
 474              	.LFE0:
 476              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 477              		.align	1
 478              		.global	SEGGER_RTT_ReadUpBufferNoLock
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu fpv4-sp-d16
 484              	SEGGER_RTT_ReadUpBufferNoLock:
 485              	.LVL47:
 486              	.LFB5:
 497:RTT/SEGGER_RTT.c **** 
 498:RTT/SEGGER_RTT.c **** /*********************************************************************
 499:RTT/SEGGER_RTT.c **** *
 500:RTT/SEGGER_RTT.c **** *       Public code
 501:RTT/SEGGER_RTT.c **** *
 502:RTT/SEGGER_RTT.c **** **********************************************************************
 503:RTT/SEGGER_RTT.c **** */
 504:RTT/SEGGER_RTT.c **** /*********************************************************************
 505:RTT/SEGGER_RTT.c **** *
 506:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 507:RTT/SEGGER_RTT.c **** *
 508:RTT/SEGGER_RTT.c **** *  Function description
 509:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 510:RTT/SEGGER_RTT.c **** *    which have been previously stored by the application.
 511:RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 512:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 513:RTT/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 514:RTT/SEGGER_RTT.c **** *
 515:RTT/SEGGER_RTT.c **** *  Parameters
 516:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 517:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 518:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 519:RTT/SEGGER_RTT.c **** *
 520:RTT/SEGGER_RTT.c **** *  Return value
 521:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 522:RTT/SEGGER_RTT.c **** *
 523:RTT/SEGGER_RTT.c **** *  Additional information
 524:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 525:RTT/SEGGER_RTT.c **** */
 526:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 487              		.loc 1 526 96 is_stmt 1 view -0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		.loc 1 526 96 is_stmt 0 view .LVU148
 492 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 493              	.LCFI5:
 494              		.cfi_def_cfa_offset 32
 495              		.cfi_offset 4, -32
 496              		.cfi_offset 5, -28
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 21


 497              		.cfi_offset 6, -24
 498              		.cfi_offset 7, -20
 499              		.cfi_offset 8, -16
 500              		.cfi_offset 9, -12
 501              		.cfi_offset 10, -8
 502              		.cfi_offset 14, -4
 503 0004 0446     		mov	r4, r0
 504 0006 8846     		mov	r8, r1
 505 0008 9146     		mov	r9, r2
 527:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 506              		.loc 1 527 3 is_stmt 1 view .LVU149
 528:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 507              		.loc 1 528 3 view .LVU150
 529:RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 508              		.loc 1 529 3 view .LVU151
 530:RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 509              		.loc 1 530 3 view .LVU152
 531:RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 510              		.loc 1 531 3 view .LVU153
 532:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 511              		.loc 1 532 3 view .LVU154
 533:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 534:RTT/SEGGER_RTT.c ****   const char*             pSrc;
 535:RTT/SEGGER_RTT.c **** #endif
 536:RTT/SEGGER_RTT.c ****   //
 537:RTT/SEGGER_RTT.c ****   INIT();
 512              		.loc 1 537 3 view .LVU155
 513              		.loc 1 537 3 view .LVU156
 514 000a 274B     		ldr	r3, .L36
 515 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 516 000e C3B1     		cbz	r3, .L33
 517              	.LVL48:
 518              	.L26:
 519              		.loc 1 537 3 discriminator 3 view .LVU157
 538:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 520              		.loc 1 538 3 discriminator 3 view .LVU158
 539:RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 521              		.loc 1 539 3 discriminator 3 view .LVU159
 540:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 522              		.loc 1 540 3 discriminator 3 view .LVU160
 523              		.loc 1 540 9 is_stmt 0 discriminator 3 view .LVU161
 524 0010 04EB4403 		add	r3, r4, r4, lsl #1
 525 0014 244A     		ldr	r2, .L36
 526 0016 02EBC303 		add	r3, r2, r3, lsl #3
 527 001a 9F6A     		ldr	r7, [r3, #40]
 528              	.LVL49:
 541:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 529              		.loc 1 541 3 is_stmt 1 discriminator 3 view .LVU162
 530              		.loc 1 541 9 is_stmt 0 discriminator 3 view .LVU163
 531 001c 5D6A     		ldr	r5, [r3, #36]
 532              	.LVL50:
 542:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 533              		.loc 1 542 3 is_stmt 1 discriminator 3 view .LVU164
 543:RTT/SEGGER_RTT.c ****   //
 544:RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 545:RTT/SEGGER_RTT.c ****   //
 546:RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 22


 534              		.loc 1 546 3 discriminator 3 view .LVU165
 535              		.loc 1 546 6 is_stmt 0 discriminator 3 view .LVU166
 536 001e AF42     		cmp	r7, r5
 537 0020 12D8     		bhi	.L34
 542:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 538              		.loc 1 542 16 view .LVU167
 539 0022 0026     		movs	r6, #0
 540              	.LVL51:
 541              	.L27:
 547:RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 548:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 549:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 550:RTT/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 551:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 552:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 553:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 554:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 555:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 556:RTT/SEGGER_RTT.c ****     };
 557:RTT/SEGGER_RTT.c **** #else
 558:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 559:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 560:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 561:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 562:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 563:RTT/SEGGER_RTT.c **** #endif
 564:RTT/SEGGER_RTT.c ****     //
 565:RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 566:RTT/SEGGER_RTT.c ****     //
 567:RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 568:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 569:RTT/SEGGER_RTT.c ****     }
 570:RTT/SEGGER_RTT.c ****   }
 571:RTT/SEGGER_RTT.c ****   //
 572:RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 573:RTT/SEGGER_RTT.c ****   //
 574:RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 542              		.loc 1 574 3 is_stmt 1 view .LVU168
 543              		.loc 1 574 15 is_stmt 0 view .LVU169
 544 0024 ED1B     		subs	r5, r5, r7
 545              	.LVL52:
 575:RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 546              		.loc 1 575 3 is_stmt 1 view .LVU170
 547              		.loc 1 575 15 is_stmt 0 view .LVU171
 548 0026 4D45     		cmp	r5, r9
 549 0028 28BF     		it	cs
 550 002a 4D46     		movcs	r5, r9
 551              	.LVL53:
 576:RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 552              		.loc 1 576 3 is_stmt 1 view .LVU172
 553              		.loc 1 576 6 is_stmt 0 view .LVU173
 554 002c 65BB     		cbnz	r5, .L35
 555              	.LVL54:
 556              	.L28:
 577:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 578:RTT/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 579:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 23


 580:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 581:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 582:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 583:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 584:RTT/SEGGER_RTT.c ****     };
 585:RTT/SEGGER_RTT.c **** #else
 586:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 587:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 588:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 589:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 590:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 591:RTT/SEGGER_RTT.c **** #endif
 592:RTT/SEGGER_RTT.c ****   }
 593:RTT/SEGGER_RTT.c ****   //
 594:RTT/SEGGER_RTT.c ****   // Update read offset of buffer
 595:RTT/SEGGER_RTT.c ****   //
 596:RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 557              		.loc 1 596 3 is_stmt 1 view .LVU174
 558              		.loc 1 596 6 is_stmt 0 view .LVU175
 559 002e 2EB1     		cbz	r6, .L25
 597:RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 560              		.loc 1 597 5 is_stmt 1 view .LVU176
 561              		.loc 1 597 18 is_stmt 0 view .LVU177
 562 0030 04EB4404 		add	r4, r4, r4, lsl #1
 563              	.LVL55:
 564              		.loc 1 597 18 view .LVU178
 565 0034 1C48     		ldr	r0, .L36
 566 0036 00EBC404 		add	r4, r0, r4, lsl #3
 567 003a A762     		str	r7, [r4, #40]
 598:RTT/SEGGER_RTT.c ****   }
 599:RTT/SEGGER_RTT.c ****   //
 600:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 568              		.loc 1 600 3 is_stmt 1 view .LVU179
 569              	.L25:
 601:RTT/SEGGER_RTT.c **** }
 570              		.loc 1 601 1 is_stmt 0 view .LVU180
 571 003c 3046     		mov	r0, r6
 572 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 573              	.LVL56:
 574              	.L33:
 537:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 575              		.loc 1 537 3 is_stmt 1 discriminator 1 view .LVU181
 576 0042 FFF7FEFF 		bl	_DoInit
 577              	.LVL57:
 537:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 578              		.loc 1 537 3 is_stmt 0 discriminator 1 view .LVU182
 579 0046 E3E7     		b	.L26
 580              	.LVL58:
 581              	.L34:
 547:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 582              		.loc 1 547 5 is_stmt 1 view .LVU183
 547:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 583              		.loc 1 547 24 is_stmt 0 view .LVU184
 584 0048 1346     		mov	r3, r2
 585 004a 04EB440A 		add	r10, r4, r4, lsl #1
 586 004e 02EBCA0A 		add	r10, r2, r10, lsl #3
 587 0052 DAF82060 		ldr	r6, [r10, #32]
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 24


 547:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 588              		.loc 1 547 17 view .LVU185
 589 0056 F61B     		subs	r6, r6, r7
 590              	.LVL59:
 548:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 591              		.loc 1 548 5 is_stmt 1 view .LVU186
 548:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 592              		.loc 1 548 17 is_stmt 0 view .LVU187
 593 0058 4E45     		cmp	r6, r9
 594 005a 28BF     		it	cs
 595 005c 4E46     		movcs	r6, r9
 596              	.LVL60:
 558:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 597              		.loc 1 558 5 is_stmt 1 view .LVU188
 598 005e 621C     		adds	r2, r4, #1
 599 0060 02EB4202 		add	r2, r2, r2, lsl #1
 600 0064 03EBC203 		add	r3, r3, r2, lsl #3
 601 0068 5968     		ldr	r1, [r3, #4]
 602 006a 3246     		mov	r2, r6
 603 006c 3944     		add	r1, r1, r7
 604 006e 4046     		mov	r0, r8
 605 0070 FFF7FEFF 		bl	memcpy
 606              	.LVL61:
 559:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 607              		.loc 1 559 5 view .LVU189
 560:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 608              		.loc 1 560 5 view .LVU190
 560:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 609              		.loc 1 560 18 is_stmt 0 view .LVU191
 610 0074 B044     		add	r8, r8, r6
 611              	.LVL62:
 561:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 612              		.loc 1 561 5 is_stmt 1 view .LVU192
 561:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 613              		.loc 1 561 18 is_stmt 0 view .LVU193
 614 0076 A9EB0609 		sub	r9, r9, r6
 615              	.LVL63:
 562:RTT/SEGGER_RTT.c **** #endif
 616              		.loc 1 562 5 is_stmt 1 view .LVU194
 562:RTT/SEGGER_RTT.c **** #endif
 617              		.loc 1 562 18 is_stmt 0 view .LVU195
 618 007a 3744     		add	r7, r7, r6
 619              	.LVL64:
 567:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 620              		.loc 1 567 5 is_stmt 1 view .LVU196
 567:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 621              		.loc 1 567 23 is_stmt 0 view .LVU197
 622 007c DAF82030 		ldr	r3, [r10, #32]
 567:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 623              		.loc 1 567 8 view .LVU198
 624 0080 BB42     		cmp	r3, r7
 625 0082 CFD1     		bne	.L27
 568:RTT/SEGGER_RTT.c ****     }
 626              		.loc 1 568 13 view .LVU199
 627 0084 0027     		movs	r7, #0
 628              	.LVL65:
 568:RTT/SEGGER_RTT.c ****     }
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 25


 629              		.loc 1 568 13 view .LVU200
 630 0086 CDE7     		b	.L27
 631              	.LVL66:
 632              	.L35:
 586:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 633              		.loc 1 586 5 is_stmt 1 view .LVU201
 634 0088 631C     		adds	r3, r4, #1
 635 008a 03EB4303 		add	r3, r3, r3, lsl #1
 636 008e 064A     		ldr	r2, .L36
 637 0090 02EBC303 		add	r3, r2, r3, lsl #3
 638 0094 5968     		ldr	r1, [r3, #4]
 639 0096 2A46     		mov	r2, r5
 640 0098 3944     		add	r1, r1, r7
 641 009a 4046     		mov	r0, r8
 642 009c FFF7FEFF 		bl	memcpy
 643              	.LVL67:
 587:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 644              		.loc 1 587 5 view .LVU202
 587:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 645              		.loc 1 587 18 is_stmt 0 view .LVU203
 646 00a0 2E44     		add	r6, r6, r5
 647              	.LVL68:
 588:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 648              		.loc 1 588 5 is_stmt 1 view .LVU204
 589:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 649              		.loc 1 589 5 view .LVU205
 590:RTT/SEGGER_RTT.c **** #endif
 650              		.loc 1 590 5 view .LVU206
 590:RTT/SEGGER_RTT.c **** #endif
 651              		.loc 1 590 18 is_stmt 0 view .LVU207
 652 00a2 2F44     		add	r7, r7, r5
 653              	.LVL69:
 590:RTT/SEGGER_RTT.c **** #endif
 654              		.loc 1 590 18 view .LVU208
 655 00a4 C3E7     		b	.L28
 656              	.L37:
 657 00a6 00BF     		.align	2
 658              	.L36:
 659 00a8 00000000 		.word	_SEGGER_RTT
 660              		.cfi_endproc
 661              	.LFE5:
 663              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 664              		.align	1
 665              		.global	SEGGER_RTT_ReadNoLock
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 669              		.fpu fpv4-sp-d16
 671              	SEGGER_RTT_ReadNoLock:
 672              	.LVL70:
 673              	.LFB6:
 602:RTT/SEGGER_RTT.c **** 
 603:RTT/SEGGER_RTT.c **** /*********************************************************************
 604:RTT/SEGGER_RTT.c **** *
 605:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 606:RTT/SEGGER_RTT.c **** *
 607:RTT/SEGGER_RTT.c **** *  Function description
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 26


 608:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 609:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 610:RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 611:RTT/SEGGER_RTT.c **** *
 612:RTT/SEGGER_RTT.c **** *  Parameters
 613:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 614:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 615:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 616:RTT/SEGGER_RTT.c **** *
 617:RTT/SEGGER_RTT.c **** *  Return value
 618:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 619:RTT/SEGGER_RTT.c **** */
 620:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 674              		.loc 1 620 88 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              		.loc 1 620 88 is_stmt 0 view .LVU210
 679 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 680              	.LCFI6:
 681              		.cfi_def_cfa_offset 32
 682              		.cfi_offset 4, -32
 683              		.cfi_offset 5, -28
 684              		.cfi_offset 6, -24
 685              		.cfi_offset 7, -20
 686              		.cfi_offset 8, -16
 687              		.cfi_offset 9, -12
 688              		.cfi_offset 10, -8
 689              		.cfi_offset 14, -4
 690 0004 0446     		mov	r4, r0
 691 0006 8846     		mov	r8, r1
 692 0008 9146     		mov	r9, r2
 621:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 693              		.loc 1 621 3 is_stmt 1 view .LVU211
 622:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 694              		.loc 1 622 3 view .LVU212
 623:RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 695              		.loc 1 623 3 view .LVU213
 624:RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 696              		.loc 1 624 3 view .LVU214
 625:RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 697              		.loc 1 625 3 view .LVU215
 626:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 698              		.loc 1 626 3 view .LVU216
 627:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 628:RTT/SEGGER_RTT.c ****   const char*             pSrc;
 629:RTT/SEGGER_RTT.c **** #endif
 630:RTT/SEGGER_RTT.c ****   //
 631:RTT/SEGGER_RTT.c ****   INIT();
 699              		.loc 1 631 3 view .LVU217
 700              		.loc 1 631 3 view .LVU218
 701 000a 244B     		ldr	r3, .L49
 702 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 703 000e C3B1     		cbz	r3, .L46
 704              	.LVL71:
 705              	.L39:
 706              		.loc 1 631 3 discriminator 3 view .LVU219
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 27


 632:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 707              		.loc 1 632 3 discriminator 3 view .LVU220
 633:RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 708              		.loc 1 633 3 discriminator 3 view .LVU221
 634:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 709              		.loc 1 634 3 discriminator 3 view .LVU222
 710              		.loc 1 634 9 is_stmt 0 discriminator 3 view .LVU223
 711 0010 04EB4403 		add	r3, r4, r4, lsl #1
 712 0014 214A     		ldr	r2, .L49
 713 0016 02EBC303 		add	r3, r2, r3, lsl #3
 714 001a 1F6F     		ldr	r7, [r3, #112]
 715              	.LVL72:
 635:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 716              		.loc 1 635 3 is_stmt 1 discriminator 3 view .LVU224
 717              		.loc 1 635 9 is_stmt 0 discriminator 3 view .LVU225
 718 001c DD6E     		ldr	r5, [r3, #108]
 719              	.LVL73:
 636:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 720              		.loc 1 636 3 is_stmt 1 discriminator 3 view .LVU226
 637:RTT/SEGGER_RTT.c ****   //
 638:RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 639:RTT/SEGGER_RTT.c ****   //
 640:RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 721              		.loc 1 640 3 discriminator 3 view .LVU227
 722              		.loc 1 640 6 is_stmt 0 discriminator 3 view .LVU228
 723 001e AF42     		cmp	r7, r5
 724 0020 12D8     		bhi	.L47
 636:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 725              		.loc 1 636 16 view .LVU229
 726 0022 0026     		movs	r6, #0
 727              	.LVL74:
 728              	.L40:
 641:RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 642:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 643:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 644:RTT/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 645:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 646:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 647:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 648:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 649:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 650:RTT/SEGGER_RTT.c ****     };
 651:RTT/SEGGER_RTT.c **** #else
 652:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 653:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 654:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 655:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 656:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 657:RTT/SEGGER_RTT.c **** #endif
 658:RTT/SEGGER_RTT.c ****     //
 659:RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 660:RTT/SEGGER_RTT.c ****     //
 661:RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 662:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 663:RTT/SEGGER_RTT.c ****     }
 664:RTT/SEGGER_RTT.c ****   }
 665:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 28


 666:RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 667:RTT/SEGGER_RTT.c ****   //
 668:RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 729              		.loc 1 668 3 is_stmt 1 view .LVU230
 730              		.loc 1 668 15 is_stmt 0 view .LVU231
 731 0024 ED1B     		subs	r5, r5, r7
 732              	.LVL75:
 669:RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 733              		.loc 1 669 3 is_stmt 1 view .LVU232
 734              		.loc 1 669 15 is_stmt 0 view .LVU233
 735 0026 4D45     		cmp	r5, r9
 736 0028 28BF     		it	cs
 737 002a 4D46     		movcs	r5, r9
 738              	.LVL76:
 670:RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 739              		.loc 1 670 3 is_stmt 1 view .LVU234
 740              		.loc 1 670 6 is_stmt 0 view .LVU235
 741 002c 3DBB     		cbnz	r5, .L48
 742              	.LVL77:
 743              	.L41:
 671:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 672:RTT/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 673:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 674:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 675:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 676:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 677:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 678:RTT/SEGGER_RTT.c ****     };
 679:RTT/SEGGER_RTT.c **** #else
 680:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 681:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 682:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 683:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 684:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 685:RTT/SEGGER_RTT.c **** #endif
 686:RTT/SEGGER_RTT.c ****   }
 687:RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 744              		.loc 1 687 3 is_stmt 1 view .LVU236
 745              		.loc 1 687 6 is_stmt 0 view .LVU237
 746 002e 2EB1     		cbz	r6, .L38
 688:RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 747              		.loc 1 688 5 is_stmt 1 view .LVU238
 748              		.loc 1 688 18 is_stmt 0 view .LVU239
 749 0030 04EB4404 		add	r4, r4, r4, lsl #1
 750              	.LVL78:
 751              		.loc 1 688 18 view .LVU240
 752 0034 1948     		ldr	r0, .L49
 753 0036 00EBC404 		add	r4, r0, r4, lsl #3
 754 003a 2767     		str	r7, [r4, #112]
 689:RTT/SEGGER_RTT.c ****   }
 690:RTT/SEGGER_RTT.c ****   //
 691:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 755              		.loc 1 691 3 is_stmt 1 view .LVU241
 756              	.L38:
 692:RTT/SEGGER_RTT.c **** }
 757              		.loc 1 692 1 is_stmt 0 view .LVU242
 758 003c 3046     		mov	r0, r6
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 29


 759 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 760              	.LVL79:
 761              	.L46:
 631:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 762              		.loc 1 631 3 is_stmt 1 discriminator 1 view .LVU243
 763 0042 FFF7FEFF 		bl	_DoInit
 764              	.LVL80:
 631:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 765              		.loc 1 631 3 is_stmt 0 discriminator 1 view .LVU244
 766 0046 E3E7     		b	.L39
 767              	.LVL81:
 768              	.L47:
 641:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 769              		.loc 1 641 5 is_stmt 1 view .LVU245
 641:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 770              		.loc 1 641 24 is_stmt 0 view .LVU246
 771 0048 04EB440A 		add	r10, r4, r4, lsl #1
 772 004c 02EBCA0A 		add	r10, r2, r10, lsl #3
 773 0050 DAF86860 		ldr	r6, [r10, #104]
 641:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 774              		.loc 1 641 17 view .LVU247
 775 0054 F61B     		subs	r6, r6, r7
 776              	.LVL82:
 642:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 777              		.loc 1 642 5 is_stmt 1 view .LVU248
 642:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 778              		.loc 1 642 17 is_stmt 0 view .LVU249
 779 0056 4E45     		cmp	r6, r9
 780 0058 28BF     		it	cs
 781 005a 4E46     		movcs	r6, r9
 782              	.LVL83:
 652:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 783              		.loc 1 652 5 is_stmt 1 view .LVU250
 784 005c DAF86410 		ldr	r1, [r10, #100]
 785 0060 3246     		mov	r2, r6
 786 0062 3944     		add	r1, r1, r7
 787 0064 4046     		mov	r0, r8
 788 0066 FFF7FEFF 		bl	memcpy
 789              	.LVL84:
 653:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 790              		.loc 1 653 5 view .LVU251
 654:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 791              		.loc 1 654 5 view .LVU252
 654:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 792              		.loc 1 654 18 is_stmt 0 view .LVU253
 793 006a B044     		add	r8, r8, r6
 794              	.LVL85:
 655:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 795              		.loc 1 655 5 is_stmt 1 view .LVU254
 655:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 796              		.loc 1 655 18 is_stmt 0 view .LVU255
 797 006c A9EB0609 		sub	r9, r9, r6
 798              	.LVL86:
 656:RTT/SEGGER_RTT.c **** #endif
 799              		.loc 1 656 5 is_stmt 1 view .LVU256
 656:RTT/SEGGER_RTT.c **** #endif
 800              		.loc 1 656 18 is_stmt 0 view .LVU257
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 30


 801 0070 3744     		add	r7, r7, r6
 802              	.LVL87:
 661:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 803              		.loc 1 661 5 is_stmt 1 view .LVU258
 661:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 804              		.loc 1 661 23 is_stmt 0 view .LVU259
 805 0072 DAF86830 		ldr	r3, [r10, #104]
 661:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 806              		.loc 1 661 8 view .LVU260
 807 0076 BB42     		cmp	r3, r7
 808 0078 D4D1     		bne	.L40
 662:RTT/SEGGER_RTT.c ****     }
 809              		.loc 1 662 13 view .LVU261
 810 007a 0027     		movs	r7, #0
 811              	.LVL88:
 662:RTT/SEGGER_RTT.c ****     }
 812              		.loc 1 662 13 view .LVU262
 813 007c D2E7     		b	.L40
 814              	.LVL89:
 815              	.L48:
 680:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 816              		.loc 1 680 5 is_stmt 1 view .LVU263
 817 007e 04EB4403 		add	r3, r4, r4, lsl #1
 818 0082 064A     		ldr	r2, .L49
 819 0084 02EBC303 		add	r3, r2, r3, lsl #3
 820 0088 596E     		ldr	r1, [r3, #100]
 821 008a 2A46     		mov	r2, r5
 822 008c 3944     		add	r1, r1, r7
 823 008e 4046     		mov	r0, r8
 824 0090 FFF7FEFF 		bl	memcpy
 825              	.LVL90:
 681:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 826              		.loc 1 681 5 view .LVU264
 681:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 827              		.loc 1 681 18 is_stmt 0 view .LVU265
 828 0094 2E44     		add	r6, r6, r5
 829              	.LVL91:
 682:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 830              		.loc 1 682 5 is_stmt 1 view .LVU266
 683:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 831              		.loc 1 683 5 view .LVU267
 684:RTT/SEGGER_RTT.c **** #endif
 832              		.loc 1 684 5 view .LVU268
 684:RTT/SEGGER_RTT.c **** #endif
 833              		.loc 1 684 18 is_stmt 0 view .LVU269
 834 0096 2F44     		add	r7, r7, r5
 835              	.LVL92:
 684:RTT/SEGGER_RTT.c **** #endif
 836              		.loc 1 684 18 view .LVU270
 837 0098 C9E7     		b	.L41
 838              	.L50:
 839 009a 00BF     		.align	2
 840              	.L49:
 841 009c 00000000 		.word	_SEGGER_RTT
 842              		.cfi_endproc
 843              	.LFE6:
 845              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 31


 846              		.align	1
 847              		.global	SEGGER_RTT_ReadUpBuffer
 848              		.syntax unified
 849              		.thumb
 850              		.thumb_func
 851              		.fpu fpv4-sp-d16
 853              	SEGGER_RTT_ReadUpBuffer:
 854              	.LVL93:
 855              	.LFB7:
 693:RTT/SEGGER_RTT.c **** 
 694:RTT/SEGGER_RTT.c **** /*********************************************************************
 695:RTT/SEGGER_RTT.c **** *
 696:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 697:RTT/SEGGER_RTT.c **** *
 698:RTT/SEGGER_RTT.c **** *  Function description
 699:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 700:RTT/SEGGER_RTT.c **** *    which have been previously stored by the application.
 701:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 702:RTT/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 703:RTT/SEGGER_RTT.c **** *
 704:RTT/SEGGER_RTT.c **** *  Parameters
 705:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 706:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 707:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 708:RTT/SEGGER_RTT.c **** *
 709:RTT/SEGGER_RTT.c **** *  Return value
 710:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 711:RTT/SEGGER_RTT.c **** *
 712:RTT/SEGGER_RTT.c **** *  Additional information
 713:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 714:RTT/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 715:RTT/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 716:RTT/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 717:RTT/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 718:RTT/SEGGER_RTT.c **** */
 719:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 856              		.loc 1 719 92 is_stmt 1 view -0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              		.loc 1 719 92 is_stmt 0 view .LVU272
 861 0000 10B5     		push	{r4, lr}
 862              	.LCFI7:
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 4, -8
 865              		.cfi_offset 14, -4
 866 0002 0B46     		mov	r3, r1
 720:RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 867              		.loc 1 720 3 is_stmt 1 view .LVU273
 868              	.LBB2:
 721:RTT/SEGGER_RTT.c ****   //
 722:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 869              		.loc 1 722 3 view .LVU274
 870              		.loc 1 722 3 view .LVU275
 871              		.syntax unified
 872              	@ 722 "RTT/SEGGER_RTT.c" 1
 873 0004 EFF31184 		mrs   r4, basepri  
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 32


 874 0008 4FF02001 		mov   r1, #32       
 875 000c 81F31188 		msr   basepri, r1  
 876              		
 877              	@ 0 "" 2
 878              	.LVL94:
 879              		.loc 1 722 20 view .LVU276
 723:RTT/SEGGER_RTT.c ****   //
 724:RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 725:RTT/SEGGER_RTT.c ****   //
 726:RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 880              		.loc 1 726 3 view .LVU277
 881              		.loc 1 726 18 is_stmt 0 view .LVU278
 882              		.thumb
 883              		.syntax unified
 884 0010 1946     		mov	r1, r3
 885 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 886              	.LVL95:
 727:RTT/SEGGER_RTT.c ****   //
 728:RTT/SEGGER_RTT.c ****   // Finish up.
 729:RTT/SEGGER_RTT.c ****   //
 730:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 887              		.loc 1 730 3 is_stmt 1 view .LVU279
 888              		.syntax unified
 889              	@ 730 "RTT/SEGGER_RTT.c" 1
 890 0016 84F31188 		msr   basepri, r4  
 891              		
 892              	@ 0 "" 2
 893              		.thumb
 894              		.syntax unified
 895              	.LBE2:
 896              		.loc 1 730 22 view .LVU280
 731:RTT/SEGGER_RTT.c ****   //
 732:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 897              		.loc 1 732 3 view .LVU281
 733:RTT/SEGGER_RTT.c **** }
 898              		.loc 1 733 1 is_stmt 0 view .LVU282
 899 001a 10BD     		pop	{r4, pc}
 900              		.loc 1 733 1 view .LVU283
 901              		.cfi_endproc
 902              	.LFE7:
 904              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 905              		.align	1
 906              		.global	SEGGER_RTT_Read
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 910              		.fpu fpv4-sp-d16
 912              	SEGGER_RTT_Read:
 913              	.LVL96:
 914              	.LFB8:
 734:RTT/SEGGER_RTT.c **** 
 735:RTT/SEGGER_RTT.c **** /*********************************************************************
 736:RTT/SEGGER_RTT.c **** *
 737:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 738:RTT/SEGGER_RTT.c **** *
 739:RTT/SEGGER_RTT.c **** *  Function description
 740:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 33


 741:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 742:RTT/SEGGER_RTT.c **** *
 743:RTT/SEGGER_RTT.c **** *  Parameters
 744:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 745:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 746:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 747:RTT/SEGGER_RTT.c **** *
 748:RTT/SEGGER_RTT.c **** *  Return value
 749:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 750:RTT/SEGGER_RTT.c **** */
 751:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 915              		.loc 1 751 84 is_stmt 1 view -0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919              		.loc 1 751 84 is_stmt 0 view .LVU285
 920 0000 10B5     		push	{r4, lr}
 921              	.LCFI8:
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 4, -8
 924              		.cfi_offset 14, -4
 925 0002 0B46     		mov	r3, r1
 752:RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 926              		.loc 1 752 3 is_stmt 1 view .LVU286
 927              	.LBB3:
 753:RTT/SEGGER_RTT.c ****   //
 754:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 928              		.loc 1 754 3 view .LVU287
 929              		.loc 1 754 3 view .LVU288
 930              		.syntax unified
 931              	@ 754 "RTT/SEGGER_RTT.c" 1
 932 0004 EFF31184 		mrs   r4, basepri  
 933 0008 4FF02001 		mov   r1, #32       
 934 000c 81F31188 		msr   basepri, r1  
 935              		
 936              	@ 0 "" 2
 937              	.LVL97:
 938              		.loc 1 754 20 view .LVU289
 755:RTT/SEGGER_RTT.c ****   //
 756:RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 757:RTT/SEGGER_RTT.c ****   //
 758:RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 939              		.loc 1 758 3 view .LVU290
 940              		.loc 1 758 18 is_stmt 0 view .LVU291
 941              		.thumb
 942              		.syntax unified
 943 0010 1946     		mov	r1, r3
 944 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 945              	.LVL98:
 759:RTT/SEGGER_RTT.c ****   //
 760:RTT/SEGGER_RTT.c ****   // Finish up.
 761:RTT/SEGGER_RTT.c ****   //
 762:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 946              		.loc 1 762 3 is_stmt 1 view .LVU292
 947              		.syntax unified
 948              	@ 762 "RTT/SEGGER_RTT.c" 1
 949 0016 84F31188 		msr   basepri, r4  
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 34


 950              		
 951              	@ 0 "" 2
 952              		.thumb
 953              		.syntax unified
 954              	.LBE3:
 955              		.loc 1 762 22 view .LVU293
 763:RTT/SEGGER_RTT.c ****   //
 764:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 956              		.loc 1 764 3 view .LVU294
 765:RTT/SEGGER_RTT.c **** }
 957              		.loc 1 765 1 is_stmt 0 view .LVU295
 958 001a 10BD     		pop	{r4, pc}
 959              		.loc 1 765 1 view .LVU296
 960              		.cfi_endproc
 961              	.LFE8:
 963              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 964              		.align	1
 965              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 969              		.fpu fpv4-sp-d16
 971              	SEGGER_RTT_WriteWithOverwriteNoLock:
 972              	.LVL99:
 973              	.LFB9:
 766:RTT/SEGGER_RTT.c **** 
 767:RTT/SEGGER_RTT.c **** /*********************************************************************
 768:RTT/SEGGER_RTT.c **** *
 769:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 770:RTT/SEGGER_RTT.c **** *
 771:RTT/SEGGER_RTT.c **** *  Function description
 772:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 773:RTT/SEGGER_RTT.c **** *    control block.
 774:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 775:RTT/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 776:RTT/SEGGER_RTT.c **** *
 777:RTT/SEGGER_RTT.c **** *  Parameters
 778:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 779:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 780:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 781:RTT/SEGGER_RTT.c **** *
 782:RTT/SEGGER_RTT.c **** *  Notes
 783:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 784:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 785:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 786:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 787:RTT/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 788:RTT/SEGGER_RTT.c **** *        connection reads RTT data.
 789:RTT/SEGGER_RTT.c **** */
 790:RTT/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 974              		.loc 1 790 104 is_stmt 1 view -0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 0
 977              		@ frame_needed = 0, uses_anonymous_args = 0
 978              		.loc 1 790 104 is_stmt 0 view .LVU298
 979 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 980              	.LCFI9:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 35


 981              		.cfi_def_cfa_offset 32
 982              		.cfi_offset 3, -32
 983              		.cfi_offset 4, -28
 984              		.cfi_offset 5, -24
 985              		.cfi_offset 6, -20
 986              		.cfi_offset 7, -16
 987              		.cfi_offset 8, -12
 988              		.cfi_offset 9, -8
 989              		.cfi_offset 14, -4
 990 0004 0646     		mov	r6, r0
 991 0006 8846     		mov	r8, r1
 992 0008 1746     		mov	r7, r2
 791:RTT/SEGGER_RTT.c ****   const char*           pData;
 993              		.loc 1 791 3 is_stmt 1 view .LVU299
 792:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 994              		.loc 1 792 3 view .LVU300
 793:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 995              		.loc 1 793 3 view .LVU301
 794:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 795:RTT/SEGGER_RTT.c ****   char*                 pDst;
 796:RTT/SEGGER_RTT.c **** #endif
 797:RTT/SEGGER_RTT.c **** 
 798:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 996              		.loc 1 798 3 view .LVU302
 997              	.LVL100:
 799:RTT/SEGGER_RTT.c ****   //
 800:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 801:RTT/SEGGER_RTT.c ****   //
 802:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 998              		.loc 1 802 3 view .LVU303
 803:RTT/SEGGER_RTT.c ****   //
 804:RTT/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 805:RTT/SEGGER_RTT.c ****   //
 806:RTT/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 999              		.loc 1 806 3 view .LVU304
 1000              		.loc 1 806 12 is_stmt 0 view .LVU305
 1001 000a 00EB4002 		add	r2, r0, r0, lsl #1
 1002              	.LVL101:
 1003              		.loc 1 806 12 view .LVU306
 1004 000e 3F4B     		ldr	r3, .L68
 1005 0010 03EBC203 		add	r3, r3, r2, lsl #3
 1006 0014 596A     		ldr	r1, [r3, #36]
 1007              	.LVL102:
 1008              		.loc 1 806 28 view .LVU307
 1009 0016 9B6A     		ldr	r3, [r3, #40]
 1010              		.loc 1 806 6 view .LVU308
 1011 0018 9942     		cmp	r1, r3
 1012 001a 0FD0     		beq	.L66
 807:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 808:RTT/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1013              		.loc 1 808 10 is_stmt 1 view .LVU309
 1014              		.loc 1 808 35 is_stmt 0 view .LVU310
 1015 001c 00EB4003 		add	r3, r0, r0, lsl #1
 1016 0020 3A4A     		ldr	r2, .L68
 1017 0022 02EBC303 		add	r3, r2, r3, lsl #3
 1018 0026 9B6A     		ldr	r3, [r3, #40]
 1019              		.loc 1 808 13 view .LVU311
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 36


 1020 0028 9942     		cmp	r1, r3
 1021 002a 19D2     		bcs	.L58
 809:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1022              		.loc 1 809 5 is_stmt 1 view .LVU312
 1023              		.loc 1 809 18 is_stmt 0 view .LVU313
 1024 002c 00EB4003 		add	r3, r0, r0, lsl #1
 1025 0030 02EBC303 		add	r3, r2, r3, lsl #3
 1026 0034 9B6A     		ldr	r3, [r3, #40]
 1027              		.loc 1 809 26 view .LVU314
 1028 0036 5B1A     		subs	r3, r3, r1
 1029              		.loc 1 809 11 view .LVU315
 1030 0038 013B     		subs	r3, r3, #1
 1031              	.LVL103:
 1032              		.loc 1 809 11 view .LVU316
 1033 003a 05E0     		b	.L57
 1034              	.LVL104:
 1035              	.L66:
 807:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1036              		.loc 1 807 5 is_stmt 1 view .LVU317
 807:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1037              		.loc 1 807 18 is_stmt 0 view .LVU318
 1038 003c 1346     		mov	r3, r2
 1039 003e 334A     		ldr	r2, .L68
 1040 0040 02EBC303 		add	r3, r2, r3, lsl #3
 1041 0044 1B6A     		ldr	r3, [r3, #32]
 807:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1042              		.loc 1 807 11 view .LVU319
 1043 0046 013B     		subs	r3, r3, #1
 1044              	.LVL105:
 1045              	.L57:
 810:RTT/SEGGER_RTT.c ****   } else {
 811:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 812:RTT/SEGGER_RTT.c ****   }
 813:RTT/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1046              		.loc 1 813 3 is_stmt 1 view .LVU320
 1047              		.loc 1 813 6 is_stmt 0 view .LVU321
 1048 0048 BB42     		cmp	r3, r7
 1049 004a 25D2     		bcs	.L59
 814:RTT/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1050              		.loc 1 814 5 is_stmt 1 view .LVU322
 1051              		.loc 1 814 18 is_stmt 0 view .LVU323
 1052 004c 06EB4602 		add	r2, r6, r6, lsl #1
 1053 0050 2E48     		ldr	r0, .L68
 1054              	.LVL106:
 1055              		.loc 1 814 18 view .LVU324
 1056 0052 00EBC202 		add	r2, r0, r2, lsl #3
 1057 0056 906A     		ldr	r0, [r2, #40]
 1058              		.loc 1 814 31 view .LVU325
 1059 0058 FB1A     		subs	r3, r7, r3
 1060              	.LVL107:
 1061              		.loc 1 814 18 view .LVU326
 1062 005a 0344     		add	r3, r3, r0
 1063 005c 9362     		str	r3, [r2, #40]
 815:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1064              		.loc 1 815 5 is_stmt 1 view .LVU327
 1065              		.loc 1 815 11 is_stmt 0 view .LVU328
 1066 005e 12E0     		b	.L60
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 37


 1067              	.LVL108:
 1068              	.L58:
 811:RTT/SEGGER_RTT.c ****   }
 1069              		.loc 1 811 5 is_stmt 1 view .LVU329
 811:RTT/SEGGER_RTT.c ****   }
 1070              		.loc 1 811 18 is_stmt 0 view .LVU330
 1071 0060 00EB4002 		add	r2, r0, r0, lsl #1
 1072 0064 294B     		ldr	r3, .L68
 1073 0066 03EBC202 		add	r2, r3, r2, lsl #3
 1074 006a 936A     		ldr	r3, [r2, #40]
 811:RTT/SEGGER_RTT.c ****   }
 1075              		.loc 1 811 26 view .LVU331
 1076 006c 5B1A     		subs	r3, r3, r1
 811:RTT/SEGGER_RTT.c ****   }
 1077              		.loc 1 811 53 view .LVU332
 1078 006e 126A     		ldr	r2, [r2, #32]
 811:RTT/SEGGER_RTT.c ****   }
 1079              		.loc 1 811 46 view .LVU333
 1080 0070 1344     		add	r3, r3, r2
 811:RTT/SEGGER_RTT.c ****   }
 1081              		.loc 1 811 11 view .LVU334
 1082 0072 013B     		subs	r3, r3, #1
 1083              	.LVL109:
 811:RTT/SEGGER_RTT.c ****   }
 1084              		.loc 1 811 11 view .LVU335
 1085 0074 E8E7     		b	.L57
 1086              	.LVL110:
 1087              	.L61:
 816:RTT/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1088              		.loc 1 816 7 is_stmt 1 view .LVU336
 1089              		.loc 1 816 20 is_stmt 0 view .LVU337
 1090 0076 06EB4603 		add	r3, r6, r6, lsl #1
 1091 007a 244A     		ldr	r2, .L68
 1092 007c 02EBC303 		add	r3, r2, r3, lsl #3
 1093 0080 9A6A     		ldr	r2, [r3, #40]
 1094 0082 121A     		subs	r2, r2, r0
 1095 0084 9A62     		str	r2, [r3, #40]
 1096              	.L60:
 815:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1097              		.loc 1 815 11 is_stmt 1 view .LVU338
 815:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1098              		.loc 1 815 17 is_stmt 0 view .LVU339
 1099 0086 06EB4603 		add	r3, r6, r6, lsl #1
 1100 008a 204A     		ldr	r2, .L68
 1101 008c 02EBC303 		add	r3, r2, r3, lsl #3
 1102 0090 9A6A     		ldr	r2, [r3, #40]
 815:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1103              		.loc 1 815 33 view .LVU340
 1104 0092 186A     		ldr	r0, [r3, #32]
 815:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1105              		.loc 1 815 11 view .LVU341
 1106 0094 8242     		cmp	r2, r0
 1107 0096 EED2     		bcs	.L61
 1108              	.L59:
 817:RTT/SEGGER_RTT.c ****     }
 818:RTT/SEGGER_RTT.c ****   }
 819:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 38


 820:RTT/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 821:RTT/SEGGER_RTT.c ****   //
 822:RTT/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1109              		.loc 1 822 3 is_stmt 1 view .LVU342
 1110              		.loc 1 822 16 is_stmt 0 view .LVU343
 1111 0098 06EB4603 		add	r3, r6, r6, lsl #1
 1112 009c 1B4A     		ldr	r2, .L68
 1113 009e 02EBC303 		add	r3, r2, r3, lsl #3
 1114 00a2 1C6A     		ldr	r4, [r3, #32]
 1115              		.loc 1 822 9 view .LVU344
 1116 00a4 641A     		subs	r4, r4, r1
 1117              	.LVL111:
 1118              	.L64:
 823:RTT/SEGGER_RTT.c ****   do {
 1119              		.loc 1 823 3 is_stmt 1 view .LVU345
 824:RTT/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1120              		.loc 1 824 5 view .LVU346
 1121              		.loc 1 824 8 is_stmt 0 view .LVU347
 1122 00a6 A742     		cmp	r7, r4
 1123 00a8 19D3     		bcc	.L67
 825:RTT/SEGGER_RTT.c ****       //
 826:RTT/SEGGER_RTT.c ****       // Last round
 827:RTT/SEGGER_RTT.c ****       //
 828:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 829:RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 830:RTT/SEGGER_RTT.c ****       Avail = NumBytes;
 831:RTT/SEGGER_RTT.c ****       while (NumBytes--) {
 832:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 833:RTT/SEGGER_RTT.c ****       };
 834:RTT/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 835:RTT/SEGGER_RTT.c **** #else
 836:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, NumBytes);
 837:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 838:RTT/SEGGER_RTT.c **** #endif
 839:RTT/SEGGER_RTT.c ****       break;
 840:RTT/SEGGER_RTT.c ****     } else {
 841:RTT/SEGGER_RTT.c ****       //
 842:RTT/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 843:RTT/SEGGER_RTT.c ****       //
 844:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 845:RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 846:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 847:RTT/SEGGER_RTT.c ****       while (Avail--) {
 848:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 849:RTT/SEGGER_RTT.c ****       };
 850:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 851:RTT/SEGGER_RTT.c **** #else
 852:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, Avail);
 1124              		.loc 1 852 7 is_stmt 1 view .LVU348
 1125 00aa 184D     		ldr	r5, .L68
 1126 00ac 731C     		adds	r3, r6, #1
 1127 00ae 03EB4303 		add	r3, r3, r3, lsl #1
 1128 00b2 05EBC303 		add	r3, r5, r3, lsl #3
 1129 00b6 5868     		ldr	r0, [r3, #4]
 1130 00b8 06EB4603 		add	r3, r6, r6, lsl #1
 1131 00bc 05EBC305 		add	r5, r5, r3, lsl #3
 1132 00c0 6B6A     		ldr	r3, [r5, #36]
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 39


 1133 00c2 2246     		mov	r2, r4
 1134 00c4 4146     		mov	r1, r8
 1135 00c6 1844     		add	r0, r0, r3
 1136 00c8 FFF7FEFF 		bl	memcpy
 1137              	.LVL112:
 853:RTT/SEGGER_RTT.c ****       pData += Avail;
 1138              		.loc 1 853 7 view .LVU349
 1139              		.loc 1 853 13 is_stmt 0 view .LVU350
 1140 00cc A044     		add	r8, r8, r4
 1141              	.LVL113:
 854:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1142              		.loc 1 854 7 is_stmt 1 view .LVU351
 1143              		.loc 1 854 20 is_stmt 0 view .LVU352
 1144 00ce 0023     		movs	r3, #0
 1145 00d0 6B62     		str	r3, [r5, #36]
 855:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 1146              		.loc 1 855 7 is_stmt 1 view .LVU353
 1147              		.loc 1 855 16 is_stmt 0 view .LVU354
 1148 00d2 3F1B     		subs	r7, r7, r4
 1149              	.LVL114:
 856:RTT/SEGGER_RTT.c **** #endif
 857:RTT/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1150              		.loc 1 857 7 is_stmt 1 view .LVU355
 1151              		.loc 1 857 21 is_stmt 0 view .LVU356
 1152 00d4 2C6A     		ldr	r4, [r5, #32]
 1153              	.LVL115:
 1154              		.loc 1 857 13 view .LVU357
 1155 00d6 013C     		subs	r4, r4, #1
 1156              	.LVL116:
 858:RTT/SEGGER_RTT.c ****     }
 859:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 1157              		.loc 1 859 11 is_stmt 1 view .LVU358
 1158              		.loc 1 859 3 is_stmt 0 view .LVU359
 1159 00d8 002F     		cmp	r7, #0
 1160 00da E4D1     		bne	.L64
 1161 00dc 13E0     		b	.L55
 1162              	.L67:
 836:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1163              		.loc 1 836 7 is_stmt 1 view .LVU360
 1164 00de 0B4C     		ldr	r4, .L68
 1165              	.LVL117:
 836:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1166              		.loc 1 836 7 is_stmt 0 view .LVU361
 1167 00e0 731C     		adds	r3, r6, #1
 1168 00e2 03EB4303 		add	r3, r3, r3, lsl #1
 1169 00e6 04EBC303 		add	r3, r4, r3, lsl #3
 1170 00ea 5868     		ldr	r0, [r3, #4]
 1171 00ec 06EB4605 		add	r5, r6, r6, lsl #1
 1172 00f0 04EBC505 		add	r5, r4, r5, lsl #3
 1173 00f4 6B6A     		ldr	r3, [r5, #36]
 1174 00f6 3A46     		mov	r2, r7
 1175 00f8 4146     		mov	r1, r8
 1176 00fa 1844     		add	r0, r0, r3
 1177 00fc FFF7FEFF 		bl	memcpy
 1178              	.LVL118:
 837:RTT/SEGGER_RTT.c **** #endif
 1179              		.loc 1 837 7 is_stmt 1 view .LVU362
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 40


 837:RTT/SEGGER_RTT.c **** #endif
 1180              		.loc 1 837 20 is_stmt 0 view .LVU363
 1181 0100 6B6A     		ldr	r3, [r5, #36]
 1182 0102 1F44     		add	r7, r7, r3
 1183              	.LVL119:
 837:RTT/SEGGER_RTT.c **** #endif
 1184              		.loc 1 837 20 view .LVU364
 1185 0104 6F62     		str	r7, [r5, #36]
 839:RTT/SEGGER_RTT.c ****     } else {
 1186              		.loc 1 839 7 is_stmt 1 view .LVU365
 1187              	.L55:
 860:RTT/SEGGER_RTT.c **** }
 1188              		.loc 1 860 1 is_stmt 0 view .LVU366
 1189 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1190              	.LVL120:
 1191              	.L69:
 1192              		.loc 1 860 1 view .LVU367
 1193 010a 00BF     		.align	2
 1194              	.L68:
 1195 010c 00000000 		.word	_SEGGER_RTT
 1196              		.cfi_endproc
 1197              	.LFE9:
 1199              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1200              		.align	1
 1201              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1202              		.syntax unified
 1203              		.thumb
 1204              		.thumb_func
 1205              		.fpu fpv4-sp-d16
 1207              	SEGGER_RTT_WriteDownBufferNoLock:
 1208              	.LVL121:
 1209              	.LFB10:
 861:RTT/SEGGER_RTT.c **** 
 862:RTT/SEGGER_RTT.c **** /*********************************************************************
 863:RTT/SEGGER_RTT.c **** *
 864:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 865:RTT/SEGGER_RTT.c **** *
 866:RTT/SEGGER_RTT.c **** *  Function description
 867:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 868:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 869:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 870:RTT/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 871:RTT/SEGGER_RTT.c **** *
 872:RTT/SEGGER_RTT.c **** *  Parameters
 873:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 874:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 875:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 876:RTT/SEGGER_RTT.c **** *                 MUST be > 0!!!
 877:RTT/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 878:RTT/SEGGER_RTT.c **** *
 879:RTT/SEGGER_RTT.c **** *  Return value
 880:RTT/SEGGER_RTT.c **** *    1: Data has been copied
 881:RTT/SEGGER_RTT.c **** *    0: No space, data has not been copied
 882:RTT/SEGGER_RTT.c **** *
 883:RTT/SEGGER_RTT.c **** *  Notes
 884:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 885:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 41


 886:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 887:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 888:RTT/SEGGER_RTT.c **** */
 889:RTT/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 890:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 891:RTT/SEGGER_RTT.c ****   const char*           pData;
 892:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 893:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 894:RTT/SEGGER_RTT.c ****   unsigned              RdOff;
 895:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 896:RTT/SEGGER_RTT.c ****   unsigned              Rem;
 897:RTT/SEGGER_RTT.c ****   //
 898:RTT/SEGGER_RTT.c ****   // Cases:
 899:RTT/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 900:RTT/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 901:RTT/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 902:RTT/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 903:RTT/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 904:RTT/SEGGER_RTT.c ****   //
 905:RTT/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 906:RTT/SEGGER_RTT.c ****   //
 907:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 908:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 909:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 910:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 911:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 912:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 913:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 914:RTT/SEGGER_RTT.c **** CopyStraight:
 915:RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 916:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 917:RTT/SEGGER_RTT.c ****       return 1;
 918:RTT/SEGGER_RTT.c ****     }
 919:RTT/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 920:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 921:RTT/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 922:RTT/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
 923:RTT/SEGGER_RTT.c ****       NumBytes -= Rem;
 924:RTT/SEGGER_RTT.c ****       //
 925:RTT/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 926:RTT/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 927:RTT/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 928:RTT/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 929:RTT/SEGGER_RTT.c ****       //
 930:RTT/SEGGER_RTT.c ****       if (NumBytes) {
 931:RTT/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes);
 932:RTT/SEGGER_RTT.c ****       }
 933:RTT/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 934:RTT/SEGGER_RTT.c ****       return 1;
 935:RTT/SEGGER_RTT.c ****     }
 936:RTT/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 937:RTT/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 938:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 939:RTT/SEGGER_RTT.c ****       goto CopyStraight;
 940:RTT/SEGGER_RTT.c ****     }
 941:RTT/SEGGER_RTT.c ****   }
 942:RTT/SEGGER_RTT.c ****   return 0;     // No space in buffer
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 42


 943:RTT/SEGGER_RTT.c **** }
 944:RTT/SEGGER_RTT.c **** #endif
 945:RTT/SEGGER_RTT.c **** 
 946:RTT/SEGGER_RTT.c **** /*********************************************************************
 947:RTT/SEGGER_RTT.c **** *
 948:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 949:RTT/SEGGER_RTT.c **** *
 950:RTT/SEGGER_RTT.c **** *  Function description
 951:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 952:RTT/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
 953:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
 954:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 955:RTT/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
 956:RTT/SEGGER_RTT.c **** *
 957:RTT/SEGGER_RTT.c **** *  Parameters
 958:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
 959:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 960:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 961:RTT/SEGGER_RTT.c **** *
 962:RTT/SEGGER_RTT.c **** *  Return value
 963:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
 964:RTT/SEGGER_RTT.c **** *
 965:RTT/SEGGER_RTT.c **** *  Notes
 966:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 967:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 968:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 969:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 970:RTT/SEGGER_RTT.c **** *
 971:RTT/SEGGER_RTT.c **** *  Additional information
 972:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 973:RTT/SEGGER_RTT.c **** */
 974:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1210              		.loc 1 974 105 is_stmt 1 view -0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214              		.loc 1 974 105 is_stmt 0 view .LVU369
 1215 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1216              	.LCFI10:
 1217              		.cfi_def_cfa_offset 24
 1218              		.cfi_offset 3, -24
 1219              		.cfi_offset 4, -20
 1220              		.cfi_offset 5, -16
 1221              		.cfi_offset 6, -12
 1222              		.cfi_offset 7, -8
 1223              		.cfi_offset 14, -4
 1224 0002 0F46     		mov	r7, r1
 1225 0004 1646     		mov	r6, r2
 975:RTT/SEGGER_RTT.c ****   unsigned                Status;
 1226              		.loc 1 975 3 is_stmt 1 view .LVU370
 976:RTT/SEGGER_RTT.c ****   unsigned                Avail;
 1227              		.loc 1 976 3 view .LVU371
 977:RTT/SEGGER_RTT.c ****   const char*             pData;
 1228              		.loc 1 977 3 view .LVU372
 978:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1229              		.loc 1 978 3 view .LVU373
 979:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 43


 980:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1230              		.loc 1 980 3 view .LVU374
 1231              	.LVL122:
 981:RTT/SEGGER_RTT.c ****   //
 982:RTT/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
 983:RTT/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
 984:RTT/SEGGER_RTT.c ****   //
 985:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)&_SEGGER_RTT.aDown[BufferIndex];
 1232              		.loc 1 985 3 view .LVU375
 1233              		.loc 1 985 9 is_stmt 0 view .LVU376
 1234 0006 00EB4000 		add	r0, r0, r0, lsl #1
 1235              	.LVL123:
 1236              		.loc 1 985 9 view .LVU377
 1237 000a C400     		lsls	r4, r0, #3
 1238 000c 6034     		adds	r4, r4, #96
 1239 000e 144B     		ldr	r3, .L77
 1240 0010 1C44     		add	r4, r4, r3
 1241              	.LVL124:
 986:RTT/SEGGER_RTT.c ****   //
 987:RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
 988:RTT/SEGGER_RTT.c ****   //
 989:RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1242              		.loc 1 989 3 is_stmt 1 view .LVU378
 1243              		.loc 1 989 16 is_stmt 0 view .LVU379
 1244 0012 6569     		ldr	r5, [r4, #20]
 1245              		.loc 1 989 3 view .LVU380
 1246 0014 012D     		cmp	r5, #1
 1247 0016 11D0     		beq	.L71
 1248 0018 022D     		cmp	r5, #2
 1249 001a 1CD0     		beq	.L72
 1250 001c 15B1     		cbz	r5, .L76
 1251 001e 0025     		movs	r5, #0
 1252              	.LVL125:
 990:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 991:RTT/SEGGER_RTT.c ****     //
 992:RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
 993:RTT/SEGGER_RTT.c ****     // of this output, don't bother.
 994:RTT/SEGGER_RTT.c ****     //
 995:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 996:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 997:RTT/SEGGER_RTT.c ****       Status = 0u;
 998:RTT/SEGGER_RTT.c ****     } else {
 999:RTT/SEGGER_RTT.c ****       Status = NumBytes;
1000:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1001:RTT/SEGGER_RTT.c ****     }
1002:RTT/SEGGER_RTT.c ****     break;
1003:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1004:RTT/SEGGER_RTT.c ****     //
1005:RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1006:RTT/SEGGER_RTT.c ****     //
1007:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1008:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1009:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1010:RTT/SEGGER_RTT.c ****     break;
1011:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1012:RTT/SEGGER_RTT.c ****     //
1013:RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 44


1014:RTT/SEGGER_RTT.c ****     //
1015:RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1016:RTT/SEGGER_RTT.c ****     break;
1017:RTT/SEGGER_RTT.c ****   default:
1018:RTT/SEGGER_RTT.c ****     Status = 0u;
1019:RTT/SEGGER_RTT.c ****     break;
1020:RTT/SEGGER_RTT.c ****   }
1021:RTT/SEGGER_RTT.c ****   //
1022:RTT/SEGGER_RTT.c ****   // Finish up.
1023:RTT/SEGGER_RTT.c ****   //
1024:RTT/SEGGER_RTT.c ****   return Status;
 1253              		.loc 1 1024 3 is_stmt 1 view .LVU381
 1254              	.L70:
1025:RTT/SEGGER_RTT.c **** }
 1255              		.loc 1 1025 1 is_stmt 0 view .LVU382
 1256 0020 2846     		mov	r0, r5
 1257 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1258              	.LVL126:
 1259              	.L76:
 995:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1260              		.loc 1 995 5 is_stmt 1 view .LVU383
 995:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1261              		.loc 1 995 13 is_stmt 0 view .LVU384
 1262 0024 2046     		mov	r0, r4
 1263 0026 FFF7FEFF 		bl	_GetAvailWriteSpace
 1264              	.LVL127:
 996:RTT/SEGGER_RTT.c ****       Status = 0u;
 1265              		.loc 1 996 5 is_stmt 1 view .LVU385
 996:RTT/SEGGER_RTT.c ****       Status = 0u;
 1266              		.loc 1 996 8 is_stmt 0 view .LVU386
 1267 002a 8642     		cmp	r6, r0
 1268 002c F8D8     		bhi	.L70
 999:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1269              		.loc 1 999 7 is_stmt 1 view .LVU387
 1270              	.LVL128:
1000:RTT/SEGGER_RTT.c ****     }
 1271              		.loc 1 1000 7 view .LVU388
 1272 002e 3246     		mov	r2, r6
 1273 0030 3946     		mov	r1, r7
 1274 0032 2046     		mov	r0, r4
 1275              	.LVL129:
1000:RTT/SEGGER_RTT.c ****     }
 1276              		.loc 1 1000 7 is_stmt 0 view .LVU389
 1277 0034 FFF7FEFF 		bl	_WriteNoCheck
 1278              	.LVL130:
 999:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1279              		.loc 1 999 14 view .LVU390
 1280 0038 3546     		mov	r5, r6
 1281 003a F1E7     		b	.L70
 1282              	.LVL131:
 1283              	.L71:
1007:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1284              		.loc 1 1007 5 is_stmt 1 view .LVU391
1007:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1285              		.loc 1 1007 13 is_stmt 0 view .LVU392
 1286 003c 2046     		mov	r0, r4
 1287 003e FFF7FEFF 		bl	_GetAvailWriteSpace
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 45


 1288              	.LVL132:
1008:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1289              		.loc 1 1008 5 is_stmt 1 view .LVU393
1008:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1290              		.loc 1 1008 12 is_stmt 0 view .LVU394
 1291 0042 3546     		mov	r5, r6
 1292 0044 8642     		cmp	r6, r0
 1293 0046 28BF     		it	cs
 1294 0048 0546     		movcs	r5, r0
 1295              	.LVL133:
1009:RTT/SEGGER_RTT.c ****     break;
 1296              		.loc 1 1009 5 is_stmt 1 view .LVU395
 1297 004a 2A46     		mov	r2, r5
 1298 004c 3946     		mov	r1, r7
 1299 004e 2046     		mov	r0, r4
 1300              	.LVL134:
1009:RTT/SEGGER_RTT.c ****     break;
 1301              		.loc 1 1009 5 is_stmt 0 view .LVU396
 1302 0050 FFF7FEFF 		bl	_WriteNoCheck
 1303              	.LVL135:
1010:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1304              		.loc 1 1010 5 is_stmt 1 view .LVU397
 1305 0054 E4E7     		b	.L70
 1306              	.LVL136:
 1307              	.L72:
1015:RTT/SEGGER_RTT.c ****     break;
 1308              		.loc 1 1015 5 view .LVU398
1015:RTT/SEGGER_RTT.c ****     break;
 1309              		.loc 1 1015 14 is_stmt 0 view .LVU399
 1310 0056 2046     		mov	r0, r4
 1311 0058 FFF7FEFF 		bl	_WriteBlocking
 1312              	.LVL137:
1015:RTT/SEGGER_RTT.c ****     break;
 1313              		.loc 1 1015 14 view .LVU400
 1314 005c 0546     		mov	r5, r0
 1315              	.LVL138:
1016:RTT/SEGGER_RTT.c ****   default:
 1316              		.loc 1 1016 5 is_stmt 1 view .LVU401
 1317 005e DFE7     		b	.L70
 1318              	.L78:
 1319              		.align	2
 1320              	.L77:
 1321 0060 00000000 		.word	_SEGGER_RTT
 1322              		.cfi_endproc
 1323              	.LFE10:
 1325              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1326              		.align	1
 1327              		.global	SEGGER_RTT_WriteNoLock
 1328              		.syntax unified
 1329              		.thumb
 1330              		.thumb_func
 1331              		.fpu fpv4-sp-d16
 1333              	SEGGER_RTT_WriteNoLock:
 1334              	.LVL139:
 1335              	.LFB11:
1026:RTT/SEGGER_RTT.c **** 
1027:RTT/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 46


1028:RTT/SEGGER_RTT.c **** *
1029:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1030:RTT/SEGGER_RTT.c **** *
1031:RTT/SEGGER_RTT.c **** *  Function description
1032:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1033:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
1034:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1035:RTT/SEGGER_RTT.c **** *
1036:RTT/SEGGER_RTT.c **** *  Parameters
1037:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1038:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1039:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1040:RTT/SEGGER_RTT.c **** *
1041:RTT/SEGGER_RTT.c **** *  Return value
1042:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1043:RTT/SEGGER_RTT.c **** *
1044:RTT/SEGGER_RTT.c **** *  Notes
1045:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1046:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1047:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1048:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1049:RTT/SEGGER_RTT.c **** */
1050:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1336              		.loc 1 1050 95 view -0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340              		.loc 1 1050 95 is_stmt 0 view .LVU403
 1341 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1342              	.LCFI11:
 1343              		.cfi_def_cfa_offset 24
 1344              		.cfi_offset 3, -24
 1345              		.cfi_offset 4, -20
 1346              		.cfi_offset 5, -16
 1347              		.cfi_offset 6, -12
 1348              		.cfi_offset 7, -8
 1349              		.cfi_offset 14, -4
 1350 0002 0F46     		mov	r7, r1
 1351 0004 1646     		mov	r6, r2
1051:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1352              		.loc 1 1051 3 is_stmt 1 view .LVU404
1052:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1353              		.loc 1 1052 3 view .LVU405
1053:RTT/SEGGER_RTT.c ****   const char*           pData;
 1354              		.loc 1 1053 3 view .LVU406
1054:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1355              		.loc 1 1054 3 view .LVU407
1055:RTT/SEGGER_RTT.c **** 
1056:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1356              		.loc 1 1056 3 view .LVU408
 1357              	.LVL140:
1057:RTT/SEGGER_RTT.c ****   //
1058:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1059:RTT/SEGGER_RTT.c ****   //
1060:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1358              		.loc 1 1060 3 view .LVU409
 1359              		.loc 1 1060 9 is_stmt 0 view .LVU410
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 47


 1360 0006 451C     		adds	r5, r0, #1
 1361 0008 05EB4505 		add	r5, r5, r5, lsl #1
 1362 000c 164B     		ldr	r3, .L86
 1363 000e 03EBC505 		add	r5, r3, r5, lsl #3
 1364              	.LVL141:
1061:RTT/SEGGER_RTT.c ****   //
1062:RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
1063:RTT/SEGGER_RTT.c ****   //
1064:RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1365              		.loc 1 1064 3 is_stmt 1 view .LVU411
 1366              		.loc 1 1064 16 is_stmt 0 view .LVU412
 1367 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1368              	.LVL142:
 1369              		.loc 1 1064 16 view .LVU413
 1370 0016 03EBC000 		add	r0, r3, r0, lsl #3
 1371 001a C46A     		ldr	r4, [r0, #44]
 1372              		.loc 1 1064 3 view .LVU414
 1373 001c 012C     		cmp	r4, #1
 1374 001e 11D0     		beq	.L80
 1375 0020 022C     		cmp	r4, #2
 1376 0022 1CD0     		beq	.L81
 1377 0024 14B1     		cbz	r4, .L85
 1378 0026 0024     		movs	r4, #0
 1379              	.LVL143:
1065:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1066:RTT/SEGGER_RTT.c ****     //
1067:RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1068:RTT/SEGGER_RTT.c ****     // of this output, don't bother.
1069:RTT/SEGGER_RTT.c ****     //
1070:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1071:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1072:RTT/SEGGER_RTT.c ****       Status = 0u;
1073:RTT/SEGGER_RTT.c ****     } else {
1074:RTT/SEGGER_RTT.c ****       Status = NumBytes;
1075:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1076:RTT/SEGGER_RTT.c ****     }
1077:RTT/SEGGER_RTT.c ****     break;
1078:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1079:RTT/SEGGER_RTT.c ****     //
1080:RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1081:RTT/SEGGER_RTT.c ****     //
1082:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1083:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1084:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1085:RTT/SEGGER_RTT.c ****     break;
1086:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1087:RTT/SEGGER_RTT.c ****     //
1088:RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1089:RTT/SEGGER_RTT.c ****     //
1090:RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1091:RTT/SEGGER_RTT.c ****     break;
1092:RTT/SEGGER_RTT.c ****   default:
1093:RTT/SEGGER_RTT.c ****     Status = 0u;
1094:RTT/SEGGER_RTT.c ****     break;
1095:RTT/SEGGER_RTT.c ****   }
1096:RTT/SEGGER_RTT.c ****   //
1097:RTT/SEGGER_RTT.c ****   // Finish up.
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 48


1098:RTT/SEGGER_RTT.c ****   //
1099:RTT/SEGGER_RTT.c ****   return Status;
 1380              		.loc 1 1099 3 is_stmt 1 view .LVU415
 1381              	.L79:
1100:RTT/SEGGER_RTT.c **** }
 1382              		.loc 1 1100 1 is_stmt 0 view .LVU416
 1383 0028 2046     		mov	r0, r4
 1384 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1385              	.LVL144:
 1386              	.L85:
1070:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1387              		.loc 1 1070 5 is_stmt 1 view .LVU417
1070:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1388              		.loc 1 1070 13 is_stmt 0 view .LVU418
 1389 002c 2846     		mov	r0, r5
 1390 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1391              	.LVL145:
1071:RTT/SEGGER_RTT.c ****       Status = 0u;
 1392              		.loc 1 1071 5 is_stmt 1 view .LVU419
1071:RTT/SEGGER_RTT.c ****       Status = 0u;
 1393              		.loc 1 1071 8 is_stmt 0 view .LVU420
 1394 0032 8642     		cmp	r6, r0
 1395 0034 F8D8     		bhi	.L79
1074:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1396              		.loc 1 1074 7 is_stmt 1 view .LVU421
 1397              	.LVL146:
1075:RTT/SEGGER_RTT.c ****     }
 1398              		.loc 1 1075 7 view .LVU422
 1399 0036 3246     		mov	r2, r6
 1400 0038 3946     		mov	r1, r7
 1401 003a 2846     		mov	r0, r5
 1402              	.LVL147:
1075:RTT/SEGGER_RTT.c ****     }
 1403              		.loc 1 1075 7 is_stmt 0 view .LVU423
 1404 003c FFF7FEFF 		bl	_WriteNoCheck
 1405              	.LVL148:
1074:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1406              		.loc 1 1074 14 view .LVU424
 1407 0040 3446     		mov	r4, r6
 1408 0042 F1E7     		b	.L79
 1409              	.LVL149:
 1410              	.L80:
1082:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1411              		.loc 1 1082 5 is_stmt 1 view .LVU425
1082:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1412              		.loc 1 1082 13 is_stmt 0 view .LVU426
 1413 0044 2846     		mov	r0, r5
 1414 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1415              	.LVL150:
1083:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1416              		.loc 1 1083 5 is_stmt 1 view .LVU427
1083:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1417              		.loc 1 1083 12 is_stmt 0 view .LVU428
 1418 004a 3446     		mov	r4, r6
 1419 004c 8642     		cmp	r6, r0
 1420 004e 28BF     		it	cs
 1421 0050 0446     		movcs	r4, r0
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 49


 1422              	.LVL151:
1084:RTT/SEGGER_RTT.c ****     break;
 1423              		.loc 1 1084 5 is_stmt 1 view .LVU429
 1424 0052 2246     		mov	r2, r4
 1425 0054 3946     		mov	r1, r7
 1426 0056 2846     		mov	r0, r5
 1427              	.LVL152:
1084:RTT/SEGGER_RTT.c ****     break;
 1428              		.loc 1 1084 5 is_stmt 0 view .LVU430
 1429 0058 FFF7FEFF 		bl	_WriteNoCheck
 1430              	.LVL153:
1085:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1431              		.loc 1 1085 5 is_stmt 1 view .LVU431
 1432 005c E4E7     		b	.L79
 1433              	.LVL154:
 1434              	.L81:
1090:RTT/SEGGER_RTT.c ****     break;
 1435              		.loc 1 1090 5 view .LVU432
1090:RTT/SEGGER_RTT.c ****     break;
 1436              		.loc 1 1090 14 is_stmt 0 view .LVU433
 1437 005e 2846     		mov	r0, r5
 1438 0060 FFF7FEFF 		bl	_WriteBlocking
 1439              	.LVL155:
1090:RTT/SEGGER_RTT.c ****     break;
 1440              		.loc 1 1090 14 view .LVU434
 1441 0064 0446     		mov	r4, r0
 1442              	.LVL156:
1091:RTT/SEGGER_RTT.c ****   default:
 1443              		.loc 1 1091 5 is_stmt 1 view .LVU435
 1444 0066 DFE7     		b	.L79
 1445              	.L87:
 1446              		.align	2
 1447              	.L86:
 1448 0068 00000000 		.word	_SEGGER_RTT
 1449              		.cfi_endproc
 1450              	.LFE11:
 1452              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1453              		.align	1
 1454              		.global	SEGGER_RTT_WriteDownBuffer
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1458              		.fpu fpv4-sp-d16
 1460              	SEGGER_RTT_WriteDownBuffer:
 1461              	.LVL157:
 1462              	.LFB12:
1101:RTT/SEGGER_RTT.c **** 
1102:RTT/SEGGER_RTT.c **** /*********************************************************************
1103:RTT/SEGGER_RTT.c **** *
1104:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1105:RTT/SEGGER_RTT.c **** *
1106:RTT/SEGGER_RTT.c **** *  Function description
1107:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1108:RTT/SEGGER_RTT.c **** *
1109:RTT/SEGGER_RTT.c **** *  Parameters
1110:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1111:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 50


1112:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1113:RTT/SEGGER_RTT.c **** *
1114:RTT/SEGGER_RTT.c **** *  Return value
1115:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1116:RTT/SEGGER_RTT.c **** *
1117:RTT/SEGGER_RTT.c **** *  Notes
1118:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1119:RTT/SEGGER_RTT.c **** *
1120:RTT/SEGGER_RTT.c **** *  Additional information
1121:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1122:RTT/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1123:RTT/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1124:RTT/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1125:RTT/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1126:RTT/SEGGER_RTT.c **** */
1127:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1463              		.loc 1 1127 99 view -0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              		.loc 1 1127 99 is_stmt 0 view .LVU437
 1468 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1469              	.LCFI12:
 1470              		.cfi_def_cfa_offset 24
 1471              		.cfi_offset 3, -24
 1472              		.cfi_offset 4, -20
 1473              		.cfi_offset 5, -16
 1474              		.cfi_offset 6, -12
 1475              		.cfi_offset 7, -8
 1476              		.cfi_offset 14, -4
 1477 0002 0446     		mov	r4, r0
 1478 0004 0D46     		mov	r5, r1
 1479 0006 1646     		mov	r6, r2
1128:RTT/SEGGER_RTT.c ****   unsigned Status;
 1480              		.loc 1 1128 3 is_stmt 1 view .LVU438
1129:RTT/SEGGER_RTT.c ****   //
1130:RTT/SEGGER_RTT.c ****   INIT();
 1481              		.loc 1 1130 3 view .LVU439
 1482              		.loc 1 1130 3 view .LVU440
 1483 0008 094B     		ldr	r3, .L92
 1484 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1485 000c 6BB1     		cbz	r3, .L91
 1486              	.LVL158:
 1487              	.L89:
 1488              		.loc 1 1130 3 discriminator 3 view .LVU441
 1489              	.LBB4:
1131:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1490              		.loc 1 1131 3 discriminator 3 view .LVU442
 1491              		.loc 1 1131 3 discriminator 3 view .LVU443
 1492              		.syntax unified
 1493              	@ 1131 "RTT/SEGGER_RTT.c" 1
 1494 000e EFF31187 		mrs   r7, basepri  
 1495 0012 4FF02001 		mov   r1, #32       
 1496 0016 81F31188 		msr   basepri, r1  
 1497              		
 1498              	@ 0 "" 2
 1499              	.LVL159:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 51


 1500              		.loc 1 1131 20 discriminator 3 view .LVU444
1132:RTT/SEGGER_RTT.c ****   //
1133:RTT/SEGGER_RTT.c ****   // Call the non-locking write function
1134:RTT/SEGGER_RTT.c ****   //
1135:RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);
 1501              		.loc 1 1135 3 discriminator 3 view .LVU445
 1502              		.loc 1 1135 12 is_stmt 0 discriminator 3 view .LVU446
 1503              		.thumb
 1504              		.syntax unified
 1505 001a 3246     		mov	r2, r6
 1506 001c 2946     		mov	r1, r5
 1507 001e 2046     		mov	r0, r4
 1508 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1509              	.LVL160:
1136:RTT/SEGGER_RTT.c ****   //
1137:RTT/SEGGER_RTT.c ****   // Finish up.
1138:RTT/SEGGER_RTT.c ****   //
1139:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1510              		.loc 1 1139 3 is_stmt 1 discriminator 3 view .LVU447
 1511              		.syntax unified
 1512              	@ 1139 "RTT/SEGGER_RTT.c" 1
 1513 0024 87F31188 		msr   basepri, r7  
 1514              		
 1515              	@ 0 "" 2
 1516              		.thumb
 1517              		.syntax unified
 1518              	.LBE4:
 1519              		.loc 1 1139 22 discriminator 3 view .LVU448
1140:RTT/SEGGER_RTT.c ****   //
1141:RTT/SEGGER_RTT.c ****   return Status;
 1520              		.loc 1 1141 3 discriminator 3 view .LVU449
1142:RTT/SEGGER_RTT.c **** }
 1521              		.loc 1 1142 1 is_stmt 0 discriminator 3 view .LVU450
 1522 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1523              	.LVL161:
 1524              	.L91:
1130:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1525              		.loc 1 1130 3 is_stmt 1 discriminator 1 view .LVU451
 1526 002a FFF7FEFF 		bl	_DoInit
 1527              	.LVL162:
1130:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1528              		.loc 1 1130 3 is_stmt 0 discriminator 1 view .LVU452
 1529 002e EEE7     		b	.L89
 1530              	.L93:
 1531              		.align	2
 1532              	.L92:
 1533 0030 00000000 		.word	_SEGGER_RTT
 1534              		.cfi_endproc
 1535              	.LFE12:
 1537              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1538              		.align	1
 1539              		.global	SEGGER_RTT_Write
 1540              		.syntax unified
 1541              		.thumb
 1542              		.thumb_func
 1543              		.fpu fpv4-sp-d16
 1545              	SEGGER_RTT_Write:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 52


 1546              	.LVL163:
 1547              	.LFB13:
1143:RTT/SEGGER_RTT.c **** 
1144:RTT/SEGGER_RTT.c **** /*********************************************************************
1145:RTT/SEGGER_RTT.c **** *
1146:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1147:RTT/SEGGER_RTT.c **** *
1148:RTT/SEGGER_RTT.c **** *  Function description
1149:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1150:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
1151:RTT/SEGGER_RTT.c **** *
1152:RTT/SEGGER_RTT.c **** *  Parameters
1153:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1154:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1155:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1156:RTT/SEGGER_RTT.c **** *
1157:RTT/SEGGER_RTT.c **** *  Return value
1158:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1159:RTT/SEGGER_RTT.c **** *
1160:RTT/SEGGER_RTT.c **** *  Notes
1161:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1162:RTT/SEGGER_RTT.c **** */
1163:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1548              		.loc 1 1163 89 is_stmt 1 view -0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552              		.loc 1 1163 89 is_stmt 0 view .LVU454
 1553 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1554              	.LCFI13:
 1555              		.cfi_def_cfa_offset 24
 1556              		.cfi_offset 3, -24
 1557              		.cfi_offset 4, -20
 1558              		.cfi_offset 5, -16
 1559              		.cfi_offset 6, -12
 1560              		.cfi_offset 7, -8
 1561              		.cfi_offset 14, -4
 1562 0002 0446     		mov	r4, r0
 1563 0004 0D46     		mov	r5, r1
 1564 0006 1646     		mov	r6, r2
1164:RTT/SEGGER_RTT.c ****   unsigned Status;
 1565              		.loc 1 1164 3 is_stmt 1 view .LVU455
1165:RTT/SEGGER_RTT.c ****   //
1166:RTT/SEGGER_RTT.c ****   INIT();
 1566              		.loc 1 1166 3 view .LVU456
 1567              		.loc 1 1166 3 view .LVU457
 1568 0008 094B     		ldr	r3, .L98
 1569 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1570 000c 6BB1     		cbz	r3, .L97
 1571              	.LVL164:
 1572              	.L95:
 1573              		.loc 1 1166 3 discriminator 3 view .LVU458
 1574              	.LBB5:
1167:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1575              		.loc 1 1167 3 discriminator 3 view .LVU459
 1576              		.loc 1 1167 3 discriminator 3 view .LVU460
 1577              		.syntax unified
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 53


 1578              	@ 1167 "RTT/SEGGER_RTT.c" 1
 1579 000e EFF31187 		mrs   r7, basepri  
 1580 0012 4FF02001 		mov   r1, #32       
 1581 0016 81F31188 		msr   basepri, r1  
 1582              		
 1583              	@ 0 "" 2
 1584              	.LVL165:
 1585              		.loc 1 1167 20 discriminator 3 view .LVU461
1168:RTT/SEGGER_RTT.c ****   //
1169:RTT/SEGGER_RTT.c ****   // Call the non-locking write function
1170:RTT/SEGGER_RTT.c ****   //
1171:RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 1586              		.loc 1 1171 3 discriminator 3 view .LVU462
 1587              		.loc 1 1171 12 is_stmt 0 discriminator 3 view .LVU463
 1588              		.thumb
 1589              		.syntax unified
 1590 001a 3246     		mov	r2, r6
 1591 001c 2946     		mov	r1, r5
 1592 001e 2046     		mov	r0, r4
 1593 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1594              	.LVL166:
1172:RTT/SEGGER_RTT.c ****   //
1173:RTT/SEGGER_RTT.c ****   // Finish up.
1174:RTT/SEGGER_RTT.c ****   //
1175:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1595              		.loc 1 1175 3 is_stmt 1 discriminator 3 view .LVU464
 1596              		.syntax unified
 1597              	@ 1175 "RTT/SEGGER_RTT.c" 1
 1598 0024 87F31188 		msr   basepri, r7  
 1599              		
 1600              	@ 0 "" 2
 1601              		.thumb
 1602              		.syntax unified
 1603              	.LBE5:
 1604              		.loc 1 1175 22 discriminator 3 view .LVU465
1176:RTT/SEGGER_RTT.c ****   //
1177:RTT/SEGGER_RTT.c ****   return Status;
 1605              		.loc 1 1177 3 discriminator 3 view .LVU466
1178:RTT/SEGGER_RTT.c **** }
 1606              		.loc 1 1178 1 is_stmt 0 discriminator 3 view .LVU467
 1607 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1608              	.LVL167:
 1609              	.L97:
1166:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1610              		.loc 1 1166 3 is_stmt 1 discriminator 1 view .LVU468
 1611 002a FFF7FEFF 		bl	_DoInit
 1612              	.LVL168:
1166:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1613              		.loc 1 1166 3 is_stmt 0 discriminator 1 view .LVU469
 1614 002e EEE7     		b	.L95
 1615              	.L99:
 1616              		.align	2
 1617              	.L98:
 1618 0030 00000000 		.word	_SEGGER_RTT
 1619              		.cfi_endproc
 1620              	.LFE13:
 1622              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 54


 1623              		.align	1
 1624              		.global	SEGGER_RTT_WriteString
 1625              		.syntax unified
 1626              		.thumb
 1627              		.thumb_func
 1628              		.fpu fpv4-sp-d16
 1630              	SEGGER_RTT_WriteString:
 1631              	.LVL169:
 1632              	.LFB14:
1179:RTT/SEGGER_RTT.c **** 
1180:RTT/SEGGER_RTT.c **** /*********************************************************************
1181:RTT/SEGGER_RTT.c **** *
1182:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1183:RTT/SEGGER_RTT.c **** *
1184:RTT/SEGGER_RTT.c **** *  Function description
1185:RTT/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1186:RTT/SEGGER_RTT.c **** *    This data is read by the host.
1187:RTT/SEGGER_RTT.c **** *
1188:RTT/SEGGER_RTT.c **** *  Parameters
1189:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1190:RTT/SEGGER_RTT.c **** *    s            Pointer to string.
1191:RTT/SEGGER_RTT.c **** *
1192:RTT/SEGGER_RTT.c **** *  Return value
1193:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1194:RTT/SEGGER_RTT.c **** *
1195:RTT/SEGGER_RTT.c **** *  Notes
1196:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1197:RTT/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1198:RTT/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1199:RTT/SEGGER_RTT.c **** */
1200:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1633              		.loc 1 1200 70 is_stmt 1 view -0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 0
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637              		.loc 1 1200 70 is_stmt 0 view .LVU471
 1638 0000 38B5     		push	{r3, r4, r5, lr}
 1639              	.LCFI14:
 1640              		.cfi_def_cfa_offset 16
 1641              		.cfi_offset 3, -16
 1642              		.cfi_offset 4, -12
 1643              		.cfi_offset 5, -8
 1644              		.cfi_offset 14, -4
 1645 0002 0546     		mov	r5, r0
 1646 0004 0C46     		mov	r4, r1
1201:RTT/SEGGER_RTT.c ****   unsigned Len;
 1647              		.loc 1 1201 3 is_stmt 1 view .LVU472
1202:RTT/SEGGER_RTT.c **** 
1203:RTT/SEGGER_RTT.c ****   Len = STRLEN(s);
 1648              		.loc 1 1203 3 view .LVU473
 1649              		.loc 1 1203 9 is_stmt 0 view .LVU474
 1650 0006 0846     		mov	r0, r1
 1651              	.LVL170:
 1652              		.loc 1 1203 9 view .LVU475
 1653 0008 FFF7FEFF 		bl	strlen
 1654              	.LVL171:
 1655              		.loc 1 1203 9 view .LVU476
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 55


 1656 000c 0246     		mov	r2, r0
 1657              	.LVL172:
1204:RTT/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1658              		.loc 1 1204 3 is_stmt 1 view .LVU477
 1659              		.loc 1 1204 10 is_stmt 0 view .LVU478
 1660 000e 2146     		mov	r1, r4
 1661 0010 2846     		mov	r0, r5
 1662              	.LVL173:
 1663              		.loc 1 1204 10 view .LVU479
 1664 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1665              	.LVL174:
1205:RTT/SEGGER_RTT.c **** }
 1666              		.loc 1 1205 1 view .LVU480
 1667 0016 38BD     		pop	{r3, r4, r5, pc}
 1668              		.loc 1 1205 1 view .LVU481
 1669              		.cfi_endproc
 1670              	.LFE14:
 1672              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1673              		.align	1
 1674              		.global	SEGGER_RTT_PutCharSkipNoLock
 1675              		.syntax unified
 1676              		.thumb
 1677              		.thumb_func
 1678              		.fpu fpv4-sp-d16
 1680              	SEGGER_RTT_PutCharSkipNoLock:
 1681              	.LVL175:
 1682              	.LFB15:
1206:RTT/SEGGER_RTT.c **** 
1207:RTT/SEGGER_RTT.c **** /*********************************************************************
1208:RTT/SEGGER_RTT.c **** *
1209:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1210:RTT/SEGGER_RTT.c **** *
1211:RTT/SEGGER_RTT.c **** *  Function description
1212:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1213:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1214:RTT/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1215:RTT/SEGGER_RTT.c **** *
1216:RTT/SEGGER_RTT.c **** *  Parameters
1217:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1218:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1219:RTT/SEGGER_RTT.c **** *
1220:RTT/SEGGER_RTT.c **** *  Return value
1221:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1222:RTT/SEGGER_RTT.c **** *
1223:RTT/SEGGER_RTT.c **** *  Notes
1224:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1225:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1226:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1227:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1228:RTT/SEGGER_RTT.c **** */
1229:RTT/SEGGER_RTT.c **** 
1230:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1683              		.loc 1 1230 69 is_stmt 1 view -0
 1684              		.cfi_startproc
 1685              		@ args = 0, pretend = 0, frame = 0
 1686              		@ frame_needed = 0, uses_anonymous_args = 0
 1687              		@ link register save eliminated.
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 56


 1688              		.loc 1 1230 69 is_stmt 0 view .LVU483
 1689 0000 30B4     		push	{r4, r5}
 1690              	.LCFI15:
 1691              		.cfi_def_cfa_offset 8
 1692              		.cfi_offset 4, -8
 1693              		.cfi_offset 5, -4
1231:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1694              		.loc 1 1231 3 is_stmt 1 view .LVU484
1232:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1695              		.loc 1 1232 3 view .LVU485
1233:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1696              		.loc 1 1233 3 view .LVU486
1234:RTT/SEGGER_RTT.c ****   //
1235:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1236:RTT/SEGGER_RTT.c ****   //
1237:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1697              		.loc 1 1237 3 view .LVU487
 1698              	.LVL176:
1238:RTT/SEGGER_RTT.c ****   //
1239:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1240:RTT/SEGGER_RTT.c ****   //
1241:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1699              		.loc 1 1241 3 view .LVU488
 1700              		.loc 1 1241 16 is_stmt 0 view .LVU489
 1701 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1702 0006 114B     		ldr	r3, .L109
 1703 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1704 000c 5D6A     		ldr	r5, [r3, #36]
 1705              		.loc 1 1241 9 view .LVU490
 1706 000e 6A1C     		adds	r2, r5, #1
 1707              	.LVL177:
1242:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1708              		.loc 1 1242 3 is_stmt 1 view .LVU491
 1709              		.loc 1 1242 21 is_stmt 0 view .LVU492
 1710 0010 1B6A     		ldr	r3, [r3, #32]
 1711              		.loc 1 1242 6 view .LVU493
 1712 0012 9342     		cmp	r3, r2
 1713 0014 16D0     		beq	.L108
 1714              	.LVL178:
 1715              	.L103:
1243:RTT/SEGGER_RTT.c ****     WrOff = 0;
1244:RTT/SEGGER_RTT.c ****   }
1245:RTT/SEGGER_RTT.c ****   //
1246:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1247:RTT/SEGGER_RTT.c ****   //
1248:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1716              		.loc 1 1248 3 is_stmt 1 view .LVU494
 1717              		.loc 1 1248 21 is_stmt 0 view .LVU495
 1718 0016 00EB4003 		add	r3, r0, r0, lsl #1
 1719 001a 0C4C     		ldr	r4, .L109
 1720 001c 04EBC303 		add	r3, r4, r3, lsl #3
 1721 0020 9B6A     		ldr	r3, [r3, #40]
 1722              		.loc 1 1248 6 view .LVU496
 1723 0022 9342     		cmp	r3, r2
 1724 0024 10D0     		beq	.L106
1249:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1725              		.loc 1 1249 5 is_stmt 1 view .LVU497
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 57


 1726              		.loc 1 1249 10 is_stmt 0 view .LVU498
 1727 0026 431C     		adds	r3, r0, #1
 1728 0028 03EB4303 		add	r3, r3, r3, lsl #1
 1729 002c 04EBC303 		add	r3, r4, r3, lsl #3
 1730 0030 5B68     		ldr	r3, [r3, #4]
 1731              		.loc 1 1249 34 view .LVU499
 1732 0032 5955     		strb	r1, [r3, r5]
1250:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1733              		.loc 1 1250 5 is_stmt 1 view .LVU500
 1734              		.loc 1 1250 18 is_stmt 0 view .LVU501
 1735 0034 00EB4000 		add	r0, r0, r0, lsl #1
 1736              	.LVL179:
 1737              		.loc 1 1250 18 view .LVU502
 1738 0038 04EBC000 		add	r0, r4, r0, lsl #3
 1739 003c 4262     		str	r2, [r0, #36]
1251:RTT/SEGGER_RTT.c ****     Status = 1;
 1740              		.loc 1 1251 5 is_stmt 1 view .LVU503
 1741              	.LVL180:
 1742              		.loc 1 1251 12 is_stmt 0 view .LVU504
 1743 003e 0120     		movs	r0, #1
 1744              	.LVL181:
 1745              	.L102:
1252:RTT/SEGGER_RTT.c ****   } else {
1253:RTT/SEGGER_RTT.c ****     Status = 0;
1254:RTT/SEGGER_RTT.c ****   }
1255:RTT/SEGGER_RTT.c ****   //
1256:RTT/SEGGER_RTT.c ****   return Status;
1257:RTT/SEGGER_RTT.c **** }
 1746              		.loc 1 1257 1 view .LVU505
 1747 0040 30BC     		pop	{r4, r5}
 1748              	.LCFI16:
 1749              		.cfi_remember_state
 1750              		.cfi_restore 5
 1751              		.cfi_restore 4
 1752              		.cfi_def_cfa_offset 0
 1753 0042 7047     		bx	lr
 1754              	.LVL182:
 1755              	.L108:
 1756              	.LCFI17:
 1757              		.cfi_restore_state
1243:RTT/SEGGER_RTT.c ****   }
 1758              		.loc 1 1243 11 view .LVU506
 1759 0044 0022     		movs	r2, #0
 1760              	.LVL183:
1243:RTT/SEGGER_RTT.c ****   }
 1761              		.loc 1 1243 11 view .LVU507
 1762 0046 E6E7     		b	.L103
 1763              	.LVL184:
 1764              	.L106:
1253:RTT/SEGGER_RTT.c ****   }
 1765              		.loc 1 1253 12 view .LVU508
 1766 0048 0020     		movs	r0, #0
 1767              	.LVL185:
1256:RTT/SEGGER_RTT.c **** }
 1768              		.loc 1 1256 3 is_stmt 1 view .LVU509
1256:RTT/SEGGER_RTT.c **** }
 1769              		.loc 1 1256 10 is_stmt 0 view .LVU510
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 58


 1770 004a F9E7     		b	.L102
 1771              	.L110:
 1772              		.align	2
 1773              	.L109:
 1774 004c 00000000 		.word	_SEGGER_RTT
 1775              		.cfi_endproc
 1776              	.LFE15:
 1778              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1779              		.align	1
 1780              		.global	SEGGER_RTT_PutCharSkip
 1781              		.syntax unified
 1782              		.thumb
 1783              		.thumb_func
 1784              		.fpu fpv4-sp-d16
 1786              	SEGGER_RTT_PutCharSkip:
 1787              	.LVL186:
 1788              	.LFB16:
1258:RTT/SEGGER_RTT.c **** 
1259:RTT/SEGGER_RTT.c **** /*********************************************************************
1260:RTT/SEGGER_RTT.c **** *
1261:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1262:RTT/SEGGER_RTT.c **** *
1263:RTT/SEGGER_RTT.c **** *  Function description
1264:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1265:RTT/SEGGER_RTT.c **** *
1266:RTT/SEGGER_RTT.c **** *  Parameters
1267:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1268:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1269:RTT/SEGGER_RTT.c **** *
1270:RTT/SEGGER_RTT.c **** *  Return value
1271:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1272:RTT/SEGGER_RTT.c **** *
1273:RTT/SEGGER_RTT.c **** *  Notes
1274:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1275:RTT/SEGGER_RTT.c **** */
1276:RTT/SEGGER_RTT.c **** 
1277:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1789              		.loc 1 1277 63 is_stmt 1 view -0
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 0
 1792              		@ frame_needed = 0, uses_anonymous_args = 0
 1793              		.loc 1 1277 63 is_stmt 0 view .LVU512
 1794 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1795              	.LCFI18:
 1796              		.cfi_def_cfa_offset 24
 1797              		.cfi_offset 3, -24
 1798              		.cfi_offset 4, -20
 1799              		.cfi_offset 5, -16
 1800              		.cfi_offset 6, -12
 1801              		.cfi_offset 7, -8
 1802              		.cfi_offset 14, -4
 1803 0002 0446     		mov	r4, r0
 1804 0004 0D46     		mov	r5, r1
1278:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1805              		.loc 1 1278 3 is_stmt 1 view .LVU513
1279:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1806              		.loc 1 1279 3 view .LVU514
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 59


1280:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1807              		.loc 1 1280 3 view .LVU515
1281:RTT/SEGGER_RTT.c ****   //
1282:RTT/SEGGER_RTT.c ****   // Prepare
1283:RTT/SEGGER_RTT.c ****   //
1284:RTT/SEGGER_RTT.c ****   INIT();
 1808              		.loc 1 1284 3 view .LVU516
 1809              		.loc 1 1284 3 view .LVU517
 1810 0006 194B     		ldr	r3, .L120
 1811 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1812 000a 3BB3     		cbz	r3, .L118
 1813              	.LVL187:
 1814              	.L112:
 1815              		.loc 1 1284 3 discriminator 3 view .LVU518
 1816              	.LBB6:
1285:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1817              		.loc 1 1285 3 discriminator 3 view .LVU519
 1818              		.loc 1 1285 3 discriminator 3 view .LVU520
 1819              		.syntax unified
 1820              	@ 1285 "RTT/SEGGER_RTT.c" 1
 1821 000c EFF31186 		mrs   r6, basepri  
 1822 0010 4FF02001 		mov   r1, #32       
 1823 0014 81F31188 		msr   basepri, r1  
 1824              		
 1825              	@ 0 "" 2
 1826              	.LVL188:
 1827              		.loc 1 1285 20 discriminator 3 view .LVU521
1286:RTT/SEGGER_RTT.c ****   //
1287:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1288:RTT/SEGGER_RTT.c ****   //
1289:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1828              		.loc 1 1289 3 discriminator 3 view .LVU522
1290:RTT/SEGGER_RTT.c ****   //
1291:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1292:RTT/SEGGER_RTT.c ****   //
1293:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1829              		.loc 1 1293 3 discriminator 3 view .LVU523
 1830              		.loc 1 1293 16 is_stmt 0 discriminator 3 view .LVU524
 1831              		.thumb
 1832              		.syntax unified
 1833 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1834 001c 134A     		ldr	r2, .L120
 1835 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1836 0022 5F6A     		ldr	r7, [r3, #36]
 1837              		.loc 1 1293 9 discriminator 3 view .LVU525
 1838 0024 7A1C     		adds	r2, r7, #1
 1839              	.LVL189:
1294:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1840              		.loc 1 1294 3 is_stmt 1 discriminator 3 view .LVU526
 1841              		.loc 1 1294 21 is_stmt 0 discriminator 3 view .LVU527
 1842 0026 1B6A     		ldr	r3, [r3, #32]
 1843              		.loc 1 1294 6 discriminator 3 view .LVU528
 1844 0028 9342     		cmp	r3, r2
 1845 002a 1AD0     		beq	.L119
 1846              	.LVL190:
 1847              	.L113:
1295:RTT/SEGGER_RTT.c ****     WrOff = 0;
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 60


1296:RTT/SEGGER_RTT.c ****   }
1297:RTT/SEGGER_RTT.c ****   //
1298:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1299:RTT/SEGGER_RTT.c ****   //
1300:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1848              		.loc 1 1300 3 is_stmt 1 view .LVU529
 1849              		.loc 1 1300 21 is_stmt 0 view .LVU530
 1850 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1851 0030 0E49     		ldr	r1, .L120
 1852 0032 01EBC303 		add	r3, r1, r3, lsl #3
 1853 0036 9B6A     		ldr	r3, [r3, #40]
 1854              		.loc 1 1300 6 view .LVU531
 1855 0038 9342     		cmp	r3, r2
 1856 003a 14D0     		beq	.L116
1301:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1857              		.loc 1 1301 5 is_stmt 1 view .LVU532
 1858              		.loc 1 1301 10 is_stmt 0 view .LVU533
 1859 003c 631C     		adds	r3, r4, #1
 1860 003e 03EB4303 		add	r3, r3, r3, lsl #1
 1861 0042 01EBC303 		add	r3, r1, r3, lsl #3
 1862 0046 5B68     		ldr	r3, [r3, #4]
 1863              		.loc 1 1301 34 view .LVU534
 1864 0048 DD55     		strb	r5, [r3, r7]
1302:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1865              		.loc 1 1302 5 is_stmt 1 view .LVU535
 1866              		.loc 1 1302 18 is_stmt 0 view .LVU536
 1867 004a 04EB4404 		add	r4, r4, r4, lsl #1
 1868              	.LVL191:
 1869              		.loc 1 1302 18 view .LVU537
 1870 004e 01EBC404 		add	r4, r1, r4, lsl #3
 1871 0052 6262     		str	r2, [r4, #36]
1303:RTT/SEGGER_RTT.c ****     Status = 1;
 1872              		.loc 1 1303 5 is_stmt 1 view .LVU538
 1873              	.LVL192:
 1874              		.loc 1 1303 12 is_stmt 0 view .LVU539
 1875 0054 0120     		movs	r0, #1
 1876              	.LVL193:
 1877              	.L114:
1304:RTT/SEGGER_RTT.c ****   } else {
1305:RTT/SEGGER_RTT.c ****     Status = 0;
1306:RTT/SEGGER_RTT.c ****   }
1307:RTT/SEGGER_RTT.c ****   //
1308:RTT/SEGGER_RTT.c ****   // Finish up.
1309:RTT/SEGGER_RTT.c ****   //
1310:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1878              		.loc 1 1310 3 is_stmt 1 view .LVU540
 1879              		.syntax unified
 1880              	@ 1310 "RTT/SEGGER_RTT.c" 1
 1881 0056 86F31188 		msr   basepri, r6  
 1882              		
 1883              	@ 0 "" 2
 1884              		.thumb
 1885              		.syntax unified
 1886              	.LBE6:
 1887              		.loc 1 1310 22 view .LVU541
1311:RTT/SEGGER_RTT.c ****   //
1312:RTT/SEGGER_RTT.c ****   return Status;
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 61


 1888              		.loc 1 1312 3 view .LVU542
1313:RTT/SEGGER_RTT.c **** }
 1889              		.loc 1 1313 1 is_stmt 0 view .LVU543
 1890 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1891              	.LVL194:
 1892              	.L118:
1284:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1893              		.loc 1 1284 3 is_stmt 1 discriminator 1 view .LVU544
 1894 005c FFF7FEFF 		bl	_DoInit
 1895              	.LVL195:
1284:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1896              		.loc 1 1284 3 is_stmt 0 discriminator 1 view .LVU545
 1897 0060 D4E7     		b	.L112
 1898              	.LVL196:
 1899              	.L119:
 1900              	.LBB7:
1295:RTT/SEGGER_RTT.c ****   }
 1901              		.loc 1 1295 11 view .LVU546
 1902 0062 0022     		movs	r2, #0
 1903              	.LVL197:
1295:RTT/SEGGER_RTT.c ****   }
 1904              		.loc 1 1295 11 view .LVU547
 1905 0064 E2E7     		b	.L113
 1906              	.LVL198:
 1907              	.L116:
1305:RTT/SEGGER_RTT.c ****   }
 1908              		.loc 1 1305 12 view .LVU548
 1909 0066 0020     		movs	r0, #0
 1910 0068 F5E7     		b	.L114
 1911              	.L121:
 1912 006a 00BF     		.align	2
 1913              	.L120:
 1914 006c 00000000 		.word	_SEGGER_RTT
 1915              	.LBE7:
 1916              		.cfi_endproc
 1917              	.LFE16:
 1919              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 1920              		.align	1
 1921              		.global	SEGGER_RTT_PutChar
 1922              		.syntax unified
 1923              		.thumb
 1924              		.thumb_func
 1925              		.fpu fpv4-sp-d16
 1927              	SEGGER_RTT_PutChar:
 1928              	.LVL199:
 1929              	.LFB17:
1314:RTT/SEGGER_RTT.c **** 
1315:RTT/SEGGER_RTT.c ****  /*********************************************************************
1316:RTT/SEGGER_RTT.c **** *
1317:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1318:RTT/SEGGER_RTT.c **** *
1319:RTT/SEGGER_RTT.c **** *  Function description
1320:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1321:RTT/SEGGER_RTT.c **** *
1322:RTT/SEGGER_RTT.c **** *  Parameters
1323:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1324:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 62


1325:RTT/SEGGER_RTT.c **** *
1326:RTT/SEGGER_RTT.c **** *  Return value
1327:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1328:RTT/SEGGER_RTT.c **** *
1329:RTT/SEGGER_RTT.c **** *  Notes
1330:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1331:RTT/SEGGER_RTT.c **** */
1332:RTT/SEGGER_RTT.c **** 
1333:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 1930              		.loc 1 1333 59 is_stmt 1 view -0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 0
 1933              		@ frame_needed = 0, uses_anonymous_args = 0
 1934              		.loc 1 1333 59 is_stmt 0 view .LVU550
 1935 0000 70B5     		push	{r4, r5, r6, lr}
 1936              	.LCFI19:
 1937              		.cfi_def_cfa_offset 16
 1938              		.cfi_offset 4, -16
 1939              		.cfi_offset 5, -12
 1940              		.cfi_offset 6, -8
 1941              		.cfi_offset 14, -4
 1942 0002 0446     		mov	r4, r0
 1943 0004 0D46     		mov	r5, r1
1334:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1944              		.loc 1 1334 3 is_stmt 1 view .LVU551
1335:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1945              		.loc 1 1335 3 view .LVU552
1336:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1946              		.loc 1 1336 3 view .LVU553
1337:RTT/SEGGER_RTT.c ****   //
1338:RTT/SEGGER_RTT.c ****   // Prepare
1339:RTT/SEGGER_RTT.c ****   //
1340:RTT/SEGGER_RTT.c ****   INIT();
 1947              		.loc 1 1340 3 view .LVU554
 1948              		.loc 1 1340 3 view .LVU555
 1949 0006 214B     		ldr	r3, .L133
 1950 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1951 000a 7BB3     		cbz	r3, .L131
 1952              	.LVL200:
 1953              	.L123:
 1954              		.loc 1 1340 3 discriminator 3 view .LVU556
 1955              	.LBB8:
1341:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1956              		.loc 1 1341 3 discriminator 3 view .LVU557
 1957              		.loc 1 1341 3 discriminator 3 view .LVU558
 1958              		.syntax unified
 1959              	@ 1341 "RTT/SEGGER_RTT.c" 1
 1960 000c EFF31186 		mrs   r6, basepri  
 1961 0010 4FF02001 		mov   r1, #32       
 1962 0014 81F31188 		msr   basepri, r1  
 1963              		
 1964              	@ 0 "" 2
 1965              	.LVL201:
 1966              		.loc 1 1341 20 discriminator 3 view .LVU559
1342:RTT/SEGGER_RTT.c ****   //
1343:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1344:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 63


1345:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1967              		.loc 1 1345 3 discriminator 3 view .LVU560
1346:RTT/SEGGER_RTT.c ****   //
1347:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1348:RTT/SEGGER_RTT.c ****   //
1349:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1968              		.loc 1 1349 3 discriminator 3 view .LVU561
 1969              		.loc 1 1349 16 is_stmt 0 discriminator 3 view .LVU562
 1970              		.thumb
 1971              		.syntax unified
 1972 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1973 001c 1B4A     		ldr	r2, .L133
 1974 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1975 0022 596A     		ldr	r1, [r3, #36]
 1976              		.loc 1 1349 9 discriminator 3 view .LVU563
 1977 0024 481C     		adds	r0, r1, #1
 1978              	.LVL202:
1350:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1979              		.loc 1 1350 3 is_stmt 1 discriminator 3 view .LVU564
 1980              		.loc 1 1350 21 is_stmt 0 discriminator 3 view .LVU565
 1981 0026 1B6A     		ldr	r3, [r3, #32]
 1982              		.loc 1 1350 6 discriminator 3 view .LVU566
 1983 0028 8342     		cmp	r3, r0
 1984 002a 22D0     		beq	.L132
 1985              	.LVL203:
 1986              	.L124:
1351:RTT/SEGGER_RTT.c ****     WrOff = 0;
1352:RTT/SEGGER_RTT.c ****   }
1353:RTT/SEGGER_RTT.c ****   //
1354:RTT/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1355:RTT/SEGGER_RTT.c ****   //
1356:RTT/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 1987              		.loc 1 1356 3 is_stmt 1 view .LVU567
 1988              		.loc 1 1356 12 is_stmt 0 view .LVU568
 1989 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1990 0030 164A     		ldr	r2, .L133
 1991 0032 02EBC303 		add	r3, r2, r3, lsl #3
 1992 0036 DB6A     		ldr	r3, [r3, #44]
 1993              		.loc 1 1356 6 view .LVU569
 1994 0038 022B     		cmp	r3, #2
 1995 003a 1CD0     		beq	.L126
 1996              	.L125:
1357:RTT/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1358:RTT/SEGGER_RTT.c ****       ;
1359:RTT/SEGGER_RTT.c ****     }
1360:RTT/SEGGER_RTT.c ****   }
1361:RTT/SEGGER_RTT.c ****   //
1362:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1363:RTT/SEGGER_RTT.c ****   //
1364:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1997              		.loc 1 1364 3 is_stmt 1 view .LVU570
 1998              		.loc 1 1364 21 is_stmt 0 view .LVU571
 1999 003c 04EB4403 		add	r3, r4, r4, lsl #1
 2000 0040 124A     		ldr	r2, .L133
 2001 0042 02EBC303 		add	r3, r2, r3, lsl #3
 2002 0046 9B6A     		ldr	r3, [r3, #40]
 2003              		.loc 1 1364 6 view .LVU572
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 64


 2004 0048 8342     		cmp	r3, r0
 2005 004a 1DD0     		beq	.L129
1365:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 2006              		.loc 1 1365 5 is_stmt 1 view .LVU573
 2007              		.loc 1 1365 10 is_stmt 0 view .LVU574
 2008 004c 631C     		adds	r3, r4, #1
 2009 004e 03EB4303 		add	r3, r3, r3, lsl #1
 2010 0052 02EBC303 		add	r3, r2, r3, lsl #3
 2011 0056 5B68     		ldr	r3, [r3, #4]
 2012              		.loc 1 1365 34 view .LVU575
 2013 0058 5D54     		strb	r5, [r3, r1]
1366:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2014              		.loc 1 1366 5 is_stmt 1 view .LVU576
 2015              		.loc 1 1366 18 is_stmt 0 view .LVU577
 2016 005a 04EB4404 		add	r4, r4, r4, lsl #1
 2017              	.LVL204:
 2018              		.loc 1 1366 18 view .LVU578
 2019 005e 02EBC404 		add	r4, r2, r4, lsl #3
 2020 0062 6062     		str	r0, [r4, #36]
1367:RTT/SEGGER_RTT.c ****     Status = 1;
 2021              		.loc 1 1367 5 is_stmt 1 view .LVU579
 2022              	.LVL205:
 2023              		.loc 1 1367 12 is_stmt 0 view .LVU580
 2024 0064 0120     		movs	r0, #1
 2025              	.LVL206:
 2026              	.L127:
1368:RTT/SEGGER_RTT.c ****   } else {
1369:RTT/SEGGER_RTT.c ****     Status = 0;
1370:RTT/SEGGER_RTT.c ****   }
1371:RTT/SEGGER_RTT.c ****   //
1372:RTT/SEGGER_RTT.c ****   // Finish up.
1373:RTT/SEGGER_RTT.c ****   //
1374:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2027              		.loc 1 1374 3 is_stmt 1 view .LVU581
 2028              		.syntax unified
 2029              	@ 1374 "RTT/SEGGER_RTT.c" 1
 2030 0066 86F31188 		msr   basepri, r6  
 2031              		
 2032              	@ 0 "" 2
 2033              		.thumb
 2034              		.syntax unified
 2035              	.LBE8:
 2036              		.loc 1 1374 22 view .LVU582
1375:RTT/SEGGER_RTT.c ****   //
1376:RTT/SEGGER_RTT.c ****   return Status;
 2037              		.loc 1 1376 3 view .LVU583
1377:RTT/SEGGER_RTT.c **** }
 2038              		.loc 1 1377 1 is_stmt 0 view .LVU584
 2039 006a 70BD     		pop	{r4, r5, r6, pc}
 2040              	.LVL207:
 2041              	.L131:
1340:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2042              		.loc 1 1340 3 is_stmt 1 discriminator 1 view .LVU585
 2043 006c FFF7FEFF 		bl	_DoInit
 2044              	.LVL208:
1340:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2045              		.loc 1 1340 3 is_stmt 0 discriminator 1 view .LVU586
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 65


 2046 0070 CCE7     		b	.L123
 2047              	.LVL209:
 2048              	.L132:
 2049              	.LBB9:
1351:RTT/SEGGER_RTT.c ****   }
 2050              		.loc 1 1351 11 view .LVU587
 2051 0072 0020     		movs	r0, #0
 2052              	.LVL210:
1351:RTT/SEGGER_RTT.c ****   }
 2053              		.loc 1 1351 11 view .LVU588
 2054 0074 DAE7     		b	.L124
 2055              	.LVL211:
 2056              	.L126:
1358:RTT/SEGGER_RTT.c ****     }
 2057              		.loc 1 1358 7 is_stmt 1 discriminator 1 view .LVU589
1357:RTT/SEGGER_RTT.c ****       ;
 2058              		.loc 1 1357 11 discriminator 1 view .LVU590
1357:RTT/SEGGER_RTT.c ****       ;
 2059              		.loc 1 1357 26 is_stmt 0 discriminator 1 view .LVU591
 2060 0076 04EB4403 		add	r3, r4, r4, lsl #1
 2061 007a 044A     		ldr	r2, .L133
 2062 007c 02EBC303 		add	r3, r2, r3, lsl #3
 2063 0080 9B6A     		ldr	r3, [r3, #40]
1357:RTT/SEGGER_RTT.c ****       ;
 2064              		.loc 1 1357 11 discriminator 1 view .LVU592
 2065 0082 8342     		cmp	r3, r0
 2066 0084 F7D0     		beq	.L126
 2067 0086 D9E7     		b	.L125
 2068              	.L129:
1369:RTT/SEGGER_RTT.c ****   }
 2069              		.loc 1 1369 12 view .LVU593
 2070 0088 0020     		movs	r0, #0
 2071              	.LVL212:
1369:RTT/SEGGER_RTT.c ****   }
 2072              		.loc 1 1369 12 view .LVU594
 2073 008a ECE7     		b	.L127
 2074              	.L134:
 2075              		.align	2
 2076              	.L133:
 2077 008c 00000000 		.word	_SEGGER_RTT
 2078              	.LBE9:
 2079              		.cfi_endproc
 2080              	.LFE17:
 2082              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2083              		.align	1
 2084              		.global	SEGGER_RTT_GetKey
 2085              		.syntax unified
 2086              		.thumb
 2087              		.thumb_func
 2088              		.fpu fpv4-sp-d16
 2090              	SEGGER_RTT_GetKey:
 2091              	.LFB18:
1378:RTT/SEGGER_RTT.c **** 
1379:RTT/SEGGER_RTT.c **** /*********************************************************************
1380:RTT/SEGGER_RTT.c **** *
1381:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1382:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 66


1383:RTT/SEGGER_RTT.c **** *  Function description
1384:RTT/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1385:RTT/SEGGER_RTT.c **** *    Host has previously stored data there.
1386:RTT/SEGGER_RTT.c **** *
1387:RTT/SEGGER_RTT.c **** *  Return value
1388:RTT/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1389:RTT/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1390:RTT/SEGGER_RTT.c **** *
1391:RTT/SEGGER_RTT.c **** *  Notes
1392:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1393:RTT/SEGGER_RTT.c **** */
1394:RTT/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2092              		.loc 1 1394 29 is_stmt 1 view -0
 2093              		.cfi_startproc
 2094              		@ args = 0, pretend = 0, frame = 8
 2095              		@ frame_needed = 0, uses_anonymous_args = 0
 2096 0000 00B5     		push	{lr}
 2097              	.LCFI20:
 2098              		.cfi_def_cfa_offset 4
 2099              		.cfi_offset 14, -4
 2100 0002 83B0     		sub	sp, sp, #12
 2101              	.LCFI21:
 2102              		.cfi_def_cfa_offset 16
1395:RTT/SEGGER_RTT.c ****   char c;
 2103              		.loc 1 1395 3 view .LVU596
1396:RTT/SEGGER_RTT.c ****   int r;
 2104              		.loc 1 1396 3 view .LVU597
1397:RTT/SEGGER_RTT.c **** 
1398:RTT/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2105              		.loc 1 1398 3 view .LVU598
 2106              		.loc 1 1398 12 is_stmt 0 view .LVU599
 2107 0004 0122     		movs	r2, #1
 2108 0006 0DF10701 		add	r1, sp, #7
 2109 000a 0020     		movs	r0, #0
 2110 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 2111              	.LVL213:
1399:RTT/SEGGER_RTT.c ****   if (r == 1) {
 2112              		.loc 1 1399 3 is_stmt 1 view .LVU600
 2113              		.loc 1 1399 6 is_stmt 0 view .LVU601
 2114 0010 0128     		cmp	r0, #1
 2115 0012 04D1     		bne	.L137
1400:RTT/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2116              		.loc 1 1400 5 is_stmt 1 view .LVU602
 2117              		.loc 1 1400 9 is_stmt 0 view .LVU603
 2118 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2119              	.LVL214:
 2120              	.L135:
1401:RTT/SEGGER_RTT.c ****   } else {
1402:RTT/SEGGER_RTT.c ****     r = -1;
1403:RTT/SEGGER_RTT.c ****   }
1404:RTT/SEGGER_RTT.c ****   return r;
1405:RTT/SEGGER_RTT.c **** }
 2121              		.loc 1 1405 1 view .LVU604
 2122 0018 03B0     		add	sp, sp, #12
 2123              	.LCFI22:
 2124              		.cfi_remember_state
 2125              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 67


 2126              		@ sp needed
 2127 001a 5DF804FB 		ldr	pc, [sp], #4
 2128              	.LVL215:
 2129              	.L137:
 2130              	.LCFI23:
 2131              		.cfi_restore_state
1402:RTT/SEGGER_RTT.c ****   }
 2132              		.loc 1 1402 7 view .LVU605
 2133 001e 4FF0FF30 		mov	r0, #-1
 2134              	.LVL216:
1404:RTT/SEGGER_RTT.c **** }
 2135              		.loc 1 1404 3 is_stmt 1 view .LVU606
1404:RTT/SEGGER_RTT.c **** }
 2136              		.loc 1 1404 10 is_stmt 0 view .LVU607
 2137 0022 F9E7     		b	.L135
 2138              		.cfi_endproc
 2139              	.LFE18:
 2141              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2142              		.align	1
 2143              		.global	SEGGER_RTT_WaitKey
 2144              		.syntax unified
 2145              		.thumb
 2146              		.thumb_func
 2147              		.fpu fpv4-sp-d16
 2149              	SEGGER_RTT_WaitKey:
 2150              	.LFB19:
1406:RTT/SEGGER_RTT.c **** 
1407:RTT/SEGGER_RTT.c **** /*********************************************************************
1408:RTT/SEGGER_RTT.c **** *
1409:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1410:RTT/SEGGER_RTT.c **** *
1411:RTT/SEGGER_RTT.c **** *  Function description
1412:RTT/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1413:RTT/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1414:RTT/SEGGER_RTT.c **** *
1415:RTT/SEGGER_RTT.c **** *  Return value
1416:RTT/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1417:RTT/SEGGER_RTT.c **** *
1418:RTT/SEGGER_RTT.c **** *  Notes
1419:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1420:RTT/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1421:RTT/SEGGER_RTT.c **** */
1422:RTT/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2151              		.loc 1 1422 30 is_stmt 1 view -0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 0
 2154              		@ frame_needed = 0, uses_anonymous_args = 0
 2155 0000 08B5     		push	{r3, lr}
 2156              	.LCFI24:
 2157              		.cfi_def_cfa_offset 8
 2158              		.cfi_offset 3, -8
 2159              		.cfi_offset 14, -4
 2160              	.L140:
1423:RTT/SEGGER_RTT.c ****   int r;
 2161              		.loc 1 1423 3 discriminator 1 view .LVU609
1424:RTT/SEGGER_RTT.c **** 
1425:RTT/SEGGER_RTT.c ****   do {
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 68


 2162              		.loc 1 1425 3 discriminator 1 view .LVU610
1426:RTT/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2163              		.loc 1 1426 5 discriminator 1 view .LVU611
 2164              		.loc 1 1426 9 is_stmt 0 discriminator 1 view .LVU612
 2165 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2166              	.LVL217:
1427:RTT/SEGGER_RTT.c ****   } while (r < 0);
 2167              		.loc 1 1427 11 is_stmt 1 discriminator 1 view .LVU613
 2168              		.loc 1 1427 3 is_stmt 0 discriminator 1 view .LVU614
 2169 0006 0028     		cmp	r0, #0
 2170              		.loc 1 1427 3 discriminator 1 view .LVU615
 2171 0008 FBDB     		blt	.L140
1428:RTT/SEGGER_RTT.c ****   return r;
1429:RTT/SEGGER_RTT.c **** }
 2172              		.loc 1 1429 1 view .LVU616
 2173 000a 08BD     		pop	{r3, pc}
 2174              		.cfi_endproc
 2175              	.LFE19:
 2177              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2178              		.align	1
 2179              		.global	SEGGER_RTT_HasKey
 2180              		.syntax unified
 2181              		.thumb
 2182              		.thumb_func
 2183              		.fpu fpv4-sp-d16
 2185              	SEGGER_RTT_HasKey:
 2186              	.LFB20:
1430:RTT/SEGGER_RTT.c **** 
1431:RTT/SEGGER_RTT.c **** /*********************************************************************
1432:RTT/SEGGER_RTT.c **** *
1433:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1434:RTT/SEGGER_RTT.c **** *
1435:RTT/SEGGER_RTT.c **** *  Function description
1436:RTT/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1437:RTT/SEGGER_RTT.c **** *
1438:RTT/SEGGER_RTT.c **** *  Return value
1439:RTT/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1440:RTT/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1441:RTT/SEGGER_RTT.c **** *
1442:RTT/SEGGER_RTT.c **** *  Notes
1443:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1444:RTT/SEGGER_RTT.c **** */
1445:RTT/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2187              		.loc 1 1445 29 is_stmt 1 view -0
 2188              		.cfi_startproc
 2189              		@ args = 0, pretend = 0, frame = 0
 2190              		@ frame_needed = 0, uses_anonymous_args = 0
 2191 0000 08B5     		push	{r3, lr}
 2192              	.LCFI25:
 2193              		.cfi_def_cfa_offset 8
 2194              		.cfi_offset 3, -8
 2195              		.cfi_offset 14, -4
1446:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 2196              		.loc 1 1446 3 view .LVU618
1447:RTT/SEGGER_RTT.c ****   int r;
 2197              		.loc 1 1447 3 view .LVU619
1448:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 69


1449:RTT/SEGGER_RTT.c ****   INIT();
 2198              		.loc 1 1449 3 view .LVU620
 2199              		.loc 1 1449 3 view .LVU621
 2200 0002 074B     		ldr	r3, .L148
 2201 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2202 0006 33B1     		cbz	r3, .L147
 2203              	.L143:
 2204              		.loc 1 1449 3 discriminator 3 view .LVU622
1450:RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 2205              		.loc 1 1450 3 discriminator 3 view .LVU623
 2206              		.loc 1 1450 9 is_stmt 0 discriminator 3 view .LVU624
 2207 0008 054B     		ldr	r3, .L148
 2208 000a 1A6F     		ldr	r2, [r3, #112]
 2209              	.LVL218:
1451:RTT/SEGGER_RTT.c ****   if (RdOff != _SEGGER_RTT.aDown[0].WrOff) {
 2210              		.loc 1 1451 3 is_stmt 1 discriminator 3 view .LVU625
 2211              		.loc 1 1451 36 is_stmt 0 discriminator 3 view .LVU626
 2212 000c DB6E     		ldr	r3, [r3, #108]
 2213              		.loc 1 1451 6 discriminator 3 view .LVU627
 2214 000e 9342     		cmp	r3, r2
 2215 0010 04D0     		beq	.L145
1452:RTT/SEGGER_RTT.c ****     r = 1;
 2216              		.loc 1 1452 7 view .LVU628
 2217 0012 0120     		movs	r0, #1
 2218              	.L142:
1453:RTT/SEGGER_RTT.c ****   } else {
1454:RTT/SEGGER_RTT.c ****     r = 0;
1455:RTT/SEGGER_RTT.c ****   }
1456:RTT/SEGGER_RTT.c ****   return r;
1457:RTT/SEGGER_RTT.c **** }
 2219              		.loc 1 1457 1 view .LVU629
 2220 0014 08BD     		pop	{r3, pc}
 2221              	.LVL219:
 2222              	.L147:
1449:RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 2223              		.loc 1 1449 3 is_stmt 1 discriminator 1 view .LVU630
 2224 0016 FFF7FEFF 		bl	_DoInit
 2225              	.LVL220:
 2226 001a F5E7     		b	.L143
 2227              	.LVL221:
 2228              	.L145:
1454:RTT/SEGGER_RTT.c ****   }
 2229              		.loc 1 1454 7 is_stmt 0 view .LVU631
 2230 001c 0020     		movs	r0, #0
 2231              	.LVL222:
1456:RTT/SEGGER_RTT.c **** }
 2232              		.loc 1 1456 3 is_stmt 1 view .LVU632
1456:RTT/SEGGER_RTT.c **** }
 2233              		.loc 1 1456 10 is_stmt 0 view .LVU633
 2234 001e F9E7     		b	.L142
 2235              	.L149:
 2236              		.align	2
 2237              	.L148:
 2238 0020 00000000 		.word	_SEGGER_RTT
 2239              		.cfi_endproc
 2240              	.LFE20:
 2242              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 70


 2243              		.align	1
 2244              		.global	SEGGER_RTT_HasData
 2245              		.syntax unified
 2246              		.thumb
 2247              		.thumb_func
 2248              		.fpu fpv4-sp-d16
 2250              	SEGGER_RTT_HasData:
 2251              	.LVL223:
 2252              	.LFB21:
1458:RTT/SEGGER_RTT.c **** 
1459:RTT/SEGGER_RTT.c **** /*********************************************************************
1460:RTT/SEGGER_RTT.c **** *
1461:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1462:RTT/SEGGER_RTT.c **** *
1463:RTT/SEGGER_RTT.c **** *  Function description
1464:RTT/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1465:RTT/SEGGER_RTT.c **** *
1466:RTT/SEGGER_RTT.c **** *  Return value:
1467:RTT/SEGGER_RTT.c **** *  ==0:  No data
1468:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1469:RTT/SEGGER_RTT.c **** *
1470:RTT/SEGGER_RTT.c **** */
1471:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2253              		.loc 1 1471 51 is_stmt 1 view -0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 0
 2256              		@ frame_needed = 0, uses_anonymous_args = 0
 2257              		@ link register save eliminated.
1472:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2258              		.loc 1 1472 3 view .LVU635
1473:RTT/SEGGER_RTT.c ****   unsigned                v;
 2259              		.loc 1 1473 3 view .LVU636
1474:RTT/SEGGER_RTT.c **** 
1475:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 2260              		.loc 1 1475 3 view .LVU637
1476:RTT/SEGGER_RTT.c ****   v = pRing->WrOff;
 2261              		.loc 1 1476 3 view .LVU638
 2262              		.loc 1 1476 5 is_stmt 0 view .LVU639
 2263 0000 064B     		ldr	r3, .L151
 2264 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2265 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2266 000a D26E     		ldr	r2, [r2, #108]
 2267              	.LVL224:
1477:RTT/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2268              		.loc 1 1477 3 is_stmt 1 view .LVU640
 2269              		.loc 1 1477 19 is_stmt 0 view .LVU641
 2270 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2271              	.LVL225:
 2272              		.loc 1 1477 19 view .LVU642
 2273 0010 03EBC000 		add	r0, r3, r0, lsl #3
 2274 0014 006F     		ldr	r0, [r0, #112]
1478:RTT/SEGGER_RTT.c **** }
 2275              		.loc 1 1478 1 view .LVU643
 2276 0016 101A     		subs	r0, r2, r0
 2277 0018 7047     		bx	lr
 2278              	.L152:
 2279 001a 00BF     		.align	2
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 71


 2280              	.L151:
 2281 001c 00000000 		.word	_SEGGER_RTT
 2282              		.cfi_endproc
 2283              	.LFE21:
 2285              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2286              		.align	1
 2287              		.global	SEGGER_RTT_HasDataUp
 2288              		.syntax unified
 2289              		.thumb
 2290              		.thumb_func
 2291              		.fpu fpv4-sp-d16
 2293              	SEGGER_RTT_HasDataUp:
 2294              	.LVL226:
 2295              	.LFB22:
1479:RTT/SEGGER_RTT.c **** 
1480:RTT/SEGGER_RTT.c **** /*********************************************************************
1481:RTT/SEGGER_RTT.c **** *
1482:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1483:RTT/SEGGER_RTT.c **** *
1484:RTT/SEGGER_RTT.c **** *  Function description
1485:RTT/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1486:RTT/SEGGER_RTT.c **** *
1487:RTT/SEGGER_RTT.c **** *  Return value:
1488:RTT/SEGGER_RTT.c **** *  ==0:  No data
1489:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1490:RTT/SEGGER_RTT.c **** *
1491:RTT/SEGGER_RTT.c **** */
1492:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2296              		.loc 1 1492 53 is_stmt 1 view -0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              		@ link register save eliminated.
1493:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2301              		.loc 1 1493 3 view .LVU645
1494:RTT/SEGGER_RTT.c ****   unsigned                v;
 2302              		.loc 1 1494 3 view .LVU646
1495:RTT/SEGGER_RTT.c **** 
1496:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 2303              		.loc 1 1496 3 view .LVU647
1497:RTT/SEGGER_RTT.c ****   v = pRing->RdOff;
 2304              		.loc 1 1497 3 view .LVU648
 2305              		.loc 1 1497 5 is_stmt 0 view .LVU649
 2306 0000 064B     		ldr	r3, .L154
 2307 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2308 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2309 000a 926A     		ldr	r2, [r2, #40]
 2310              	.LVL227:
1498:RTT/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2311              		.loc 1 1498 3 is_stmt 1 view .LVU650
 2312              		.loc 1 1498 15 is_stmt 0 view .LVU651
 2313 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2314              	.LVL228:
 2315              		.loc 1 1498 15 view .LVU652
 2316 0010 03EBC000 		add	r0, r3, r0, lsl #3
 2317 0014 406A     		ldr	r0, [r0, #36]
1499:RTT/SEGGER_RTT.c **** }
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 72


 2318              		.loc 1 1499 1 view .LVU653
 2319 0016 801A     		subs	r0, r0, r2
 2320 0018 7047     		bx	lr
 2321              	.L155:
 2322 001a 00BF     		.align	2
 2323              	.L154:
 2324 001c 00000000 		.word	_SEGGER_RTT
 2325              		.cfi_endproc
 2326              	.LFE22:
 2328              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2329              		.align	1
 2330              		.global	SEGGER_RTT_AllocDownBuffer
 2331              		.syntax unified
 2332              		.thumb
 2333              		.thumb_func
 2334              		.fpu fpv4-sp-d16
 2336              	SEGGER_RTT_AllocDownBuffer:
 2337              	.LVL229:
 2338              	.LFB23:
1500:RTT/SEGGER_RTT.c **** 
1501:RTT/SEGGER_RTT.c **** /*********************************************************************
1502:RTT/SEGGER_RTT.c **** *
1503:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1504:RTT/SEGGER_RTT.c **** *
1505:RTT/SEGGER_RTT.c **** *  Function description
1506:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1507:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1508:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1509:RTT/SEGGER_RTT.c **** *
1510:RTT/SEGGER_RTT.c **** *  Parameters
1511:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1512:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1513:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1514:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1515:RTT/SEGGER_RTT.c **** *
1516:RTT/SEGGER_RTT.c **** *  Return value
1517:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1518:RTT/SEGGER_RTT.c **** *     < 0 - Error
1519:RTT/SEGGER_RTT.c **** */
1520:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2339              		.loc 1 1520 103 is_stmt 1 view -0
 2340              		.cfi_startproc
 2341              		@ args = 0, pretend = 0, frame = 0
 2342              		@ frame_needed = 0, uses_anonymous_args = 0
 2343              		.loc 1 1520 103 is_stmt 0 view .LVU655
 2344 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2345              	.LCFI26:
 2346              		.cfi_def_cfa_offset 32
 2347              		.cfi_offset 3, -32
 2348              		.cfi_offset 4, -28
 2349              		.cfi_offset 5, -24
 2350              		.cfi_offset 6, -20
 2351              		.cfi_offset 7, -16
 2352              		.cfi_offset 8, -12
 2353              		.cfi_offset 9, -8
 2354              		.cfi_offset 14, -4
 2355 0004 8146     		mov	r9, r0
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 73


 2356 0006 8846     		mov	r8, r1
 2357 0008 1746     		mov	r7, r2
 2358 000a 1E46     		mov	r6, r3
1521:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2359              		.loc 1 1521 3 is_stmt 1 view .LVU656
1522:RTT/SEGGER_RTT.c **** 
1523:RTT/SEGGER_RTT.c ****   INIT();
 2360              		.loc 1 1523 3 view .LVU657
 2361              		.loc 1 1523 3 view .LVU658
 2362 000c 184B     		ldr	r3, .L164
 2363              	.LVL230:
 2364              		.loc 1 1523 3 is_stmt 0 view .LVU659
 2365 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2366 0010 3BB3     		cbz	r3, .L163
 2367              	.LVL231:
 2368              	.L157:
 2369              		.loc 1 1523 3 is_stmt 1 discriminator 3 view .LVU660
 2370              	.LBB10:
1524:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2371              		.loc 1 1524 3 discriminator 3 view .LVU661
 2372              		.loc 1 1524 3 discriminator 3 view .LVU662
 2373              		.syntax unified
 2374              	@ 1524 "RTT/SEGGER_RTT.c" 1
 2375 0012 EFF31182 		mrs   r2, basepri  
 2376 0016 4FF02001 		mov   r1, #32       
 2377 001a 81F31188 		msr   basepri, r1  
 2378              		
 2379              	@ 0 "" 2
 2380              	.LVL232:
 2381              		.loc 1 1524 20 discriminator 3 view .LVU663
1525:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2382              		.loc 1 1525 3 discriminator 3 view .LVU664
 2383              		.loc 1 1525 15 is_stmt 0 discriminator 3 view .LVU665
 2384              		.thumb
 2385              		.syntax unified
 2386 001e 0020     		movs	r0, #0
 2387              	.LVL233:
 2388              	.L159:
1526:RTT/SEGGER_RTT.c ****   do {
 2389              		.loc 1 1526 3 is_stmt 1 view .LVU666
1527:RTT/SEGGER_RTT.c ****     if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
 2390              		.loc 1 1527 5 view .LVU667
 2391              		.loc 1 1527 39 is_stmt 0 view .LVU668
 2392 0020 00EB4004 		add	r4, r0, r0, lsl #1
 2393 0024 124D     		ldr	r5, .L164
 2394 0026 05EBC404 		add	r4, r5, r4, lsl #3
 2395 002a 636E     		ldr	r3, [r4, #100]
 2396              		.loc 1 1527 8 view .LVU669
 2397 002c 1BB1     		cbz	r3, .L158
1528:RTT/SEGGER_RTT.c ****       break;
1529:RTT/SEGGER_RTT.c ****     }
1530:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2398              		.loc 1 1530 5 is_stmt 1 view .LVU670
 2399              		.loc 1 1530 16 is_stmt 0 view .LVU671
 2400 002e 0130     		adds	r0, r0, #1
 2401              	.LVL234:
1531:RTT/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 74


 2402              		.loc 1 1531 11 is_stmt 1 view .LVU672
 2403              		.loc 1 1531 37 is_stmt 0 view .LVU673
 2404 0030 6B69     		ldr	r3, [r5, #20]
 2405              		.loc 1 1531 3 view .LVU674
 2406 0032 8342     		cmp	r3, r0
 2407 0034 F4DC     		bgt	.L159
 2408              	.L158:
1532:RTT/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers) {
 2409              		.loc 1 1532 3 is_stmt 1 view .LVU675
 2410              		.loc 1 1532 32 is_stmt 0 view .LVU676
 2411 0036 0E4B     		ldr	r3, .L164
 2412 0038 5B69     		ldr	r3, [r3, #20]
 2413              		.loc 1 1532 6 view .LVU677
 2414 003a 8342     		cmp	r3, r0
 2415 003c 14DD     		ble	.L161
1533:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2416              		.loc 1 1533 5 is_stmt 1 view .LVU678
 2417              		.loc 1 1533 49 is_stmt 0 view .LVU679
 2418 003e 00EB4003 		add	r3, r0, r0, lsl #1
 2419 0042 0B49     		ldr	r1, .L164
 2420 0044 01EBC303 		add	r3, r1, r3, lsl #3
 2421 0048 C3F86090 		str	r9, [r3, #96]
1534:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2422              		.loc 1 1534 5 is_stmt 1 view .LVU680
 2423              		.loc 1 1534 49 is_stmt 0 view .LVU681
 2424 004c C3F86480 		str	r8, [r3, #100]
1535:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2425              		.loc 1 1535 5 is_stmt 1 view .LVU682
 2426              		.loc 1 1535 49 is_stmt 0 view .LVU683
 2427 0050 9F66     		str	r7, [r3, #104]
1536:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2428              		.loc 1 1536 5 is_stmt 1 view .LVU684
 2429              		.loc 1 1536 49 is_stmt 0 view .LVU685
 2430 0052 0021     		movs	r1, #0
 2431 0054 1967     		str	r1, [r3, #112]
1537:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2432              		.loc 1 1537 5 is_stmt 1 view .LVU686
 2433              		.loc 1 1537 49 is_stmt 0 view .LVU687
 2434 0056 D966     		str	r1, [r3, #108]
1538:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags        = Flags;
 2435              		.loc 1 1538 5 is_stmt 1 view .LVU688
 2436              		.loc 1 1538 49 is_stmt 0 view .LVU689
 2437 0058 5E67     		str	r6, [r3, #116]
 2438              	.LVL235:
 2439              	.L160:
1539:RTT/SEGGER_RTT.c ****   } else {
1540:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1541:RTT/SEGGER_RTT.c ****   }
1542:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2440              		.loc 1 1542 3 is_stmt 1 view .LVU690
 2441              		.syntax unified
 2442              	@ 1542 "RTT/SEGGER_RTT.c" 1
 2443 005a 82F31188 		msr   basepri, r2  
 2444              		
 2445              	@ 0 "" 2
 2446              		.thumb
 2447              		.syntax unified
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 75


 2448              	.LBE10:
 2449              		.loc 1 1542 22 view .LVU691
1543:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2450              		.loc 1 1543 3 view .LVU692
1544:RTT/SEGGER_RTT.c **** }
 2451              		.loc 1 1544 1 is_stmt 0 view .LVU693
 2452 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2453              	.LVL236:
 2454              	.L163:
1523:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2455              		.loc 1 1523 3 is_stmt 1 discriminator 1 view .LVU694
 2456 0062 FFF7FEFF 		bl	_DoInit
 2457              	.LVL237:
1523:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2458              		.loc 1 1523 3 is_stmt 0 discriminator 1 view .LVU695
 2459 0066 D4E7     		b	.L157
 2460              	.LVL238:
 2461              	.L161:
 2462              	.LBB11:
1540:RTT/SEGGER_RTT.c ****   }
 2463              		.loc 1 1540 17 view .LVU696
 2464 0068 4FF0FF30 		mov	r0, #-1
 2465              	.LVL239:
1540:RTT/SEGGER_RTT.c ****   }
 2466              		.loc 1 1540 17 view .LVU697
 2467 006c F5E7     		b	.L160
 2468              	.L165:
 2469 006e 00BF     		.align	2
 2470              	.L164:
 2471 0070 00000000 		.word	_SEGGER_RTT
 2472              	.LBE11:
 2473              		.cfi_endproc
 2474              	.LFE23:
 2476              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2477              		.align	1
 2478              		.global	SEGGER_RTT_AllocUpBuffer
 2479              		.syntax unified
 2480              		.thumb
 2481              		.thumb_func
 2482              		.fpu fpv4-sp-d16
 2484              	SEGGER_RTT_AllocUpBuffer:
 2485              	.LVL240:
 2486              	.LFB24:
1545:RTT/SEGGER_RTT.c **** 
1546:RTT/SEGGER_RTT.c **** /*********************************************************************
1547:RTT/SEGGER_RTT.c **** *
1548:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1549:RTT/SEGGER_RTT.c **** *
1550:RTT/SEGGER_RTT.c **** *  Function description
1551:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1552:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1553:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1554:RTT/SEGGER_RTT.c **** *
1555:RTT/SEGGER_RTT.c **** *  Parameters
1556:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1557:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1558:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 76


1559:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1560:RTT/SEGGER_RTT.c **** *
1561:RTT/SEGGER_RTT.c **** *  Return value
1562:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1563:RTT/SEGGER_RTT.c **** *     < 0 - Error
1564:RTT/SEGGER_RTT.c **** */
1565:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2487              		.loc 1 1565 101 is_stmt 1 view -0
 2488              		.cfi_startproc
 2489              		@ args = 0, pretend = 0, frame = 0
 2490              		@ frame_needed = 0, uses_anonymous_args = 0
 2491              		.loc 1 1565 101 is_stmt 0 view .LVU699
 2492 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2493              	.LCFI27:
 2494              		.cfi_def_cfa_offset 24
 2495              		.cfi_offset 4, -24
 2496              		.cfi_offset 5, -20
 2497              		.cfi_offset 6, -16
 2498              		.cfi_offset 7, -12
 2499              		.cfi_offset 8, -8
 2500              		.cfi_offset 14, -4
 2501 0004 8046     		mov	r8, r0
 2502 0006 0F46     		mov	r7, r1
 2503 0008 1646     		mov	r6, r2
 2504 000a 1D46     		mov	r5, r3
1566:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2505              		.loc 1 1566 3 is_stmt 1 view .LVU700
1567:RTT/SEGGER_RTT.c **** 
1568:RTT/SEGGER_RTT.c ****   INIT();
 2506              		.loc 1 1568 3 view .LVU701
 2507              		.loc 1 1568 3 view .LVU702
 2508 000c 1B4B     		ldr	r3, .L174
 2509              	.LVL241:
 2510              		.loc 1 1568 3 is_stmt 0 view .LVU703
 2511 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2512 0010 6BB3     		cbz	r3, .L173
 2513              	.LVL242:
 2514              	.L167:
 2515              		.loc 1 1568 3 is_stmt 1 discriminator 3 view .LVU704
 2516              	.LBB12:
1569:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2517              		.loc 1 1569 3 discriminator 3 view .LVU705
 2518              		.loc 1 1569 3 discriminator 3 view .LVU706
 2519              		.syntax unified
 2520              	@ 1569 "RTT/SEGGER_RTT.c" 1
 2521 0012 EFF31182 		mrs   r2, basepri  
 2522 0016 4FF02001 		mov   r1, #32       
 2523 001a 81F31188 		msr   basepri, r1  
 2524              		
 2525              	@ 0 "" 2
 2526              	.LVL243:
 2527              		.loc 1 1569 20 discriminator 3 view .LVU707
1570:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2528              		.loc 1 1570 3 discriminator 3 view .LVU708
 2529              		.loc 1 1570 15 is_stmt 0 discriminator 3 view .LVU709
 2530              		.thumb
 2531              		.syntax unified
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 77


 2532 001e 0020     		movs	r0, #0
 2533              	.LVL244:
 2534              	.L169:
1571:RTT/SEGGER_RTT.c ****   do {
 2535              		.loc 1 1571 3 is_stmt 1 view .LVU710
1572:RTT/SEGGER_RTT.c ****     if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
 2536              		.loc 1 1572 5 view .LVU711
 2537              		.loc 1 1572 37 is_stmt 0 view .LVU712
 2538 0020 441C     		adds	r4, r0, #1
 2539 0022 04EB4404 		add	r4, r4, r4, lsl #1
 2540 0026 154B     		ldr	r3, .L174
 2541 0028 03EBC404 		add	r4, r3, r4, lsl #3
 2542 002c 6368     		ldr	r3, [r4, #4]
 2543              		.loc 1 1572 8 view .LVU713
 2544 002e 23B1     		cbz	r3, .L168
1573:RTT/SEGGER_RTT.c ****       break;
1574:RTT/SEGGER_RTT.c ****     }
1575:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2545              		.loc 1 1575 5 is_stmt 1 view .LVU714
 2546              		.loc 1 1575 16 is_stmt 0 view .LVU715
 2547 0030 0130     		adds	r0, r0, #1
 2548              	.LVL245:
1576:RTT/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
 2549              		.loc 1 1576 11 is_stmt 1 view .LVU716
 2550              		.loc 1 1576 37 is_stmt 0 view .LVU717
 2551 0032 124B     		ldr	r3, .L174
 2552 0034 1B69     		ldr	r3, [r3, #16]
 2553              		.loc 1 1576 3 view .LVU718
 2554 0036 8342     		cmp	r3, r0
 2555 0038 F2DC     		bgt	.L169
 2556              	.L168:
1577:RTT/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers) {
 2557              		.loc 1 1577 3 is_stmt 1 view .LVU719
 2558              		.loc 1 1577 32 is_stmt 0 view .LVU720
 2559 003a 104B     		ldr	r3, .L174
 2560 003c 1B69     		ldr	r3, [r3, #16]
 2561              		.loc 1 1577 6 view .LVU721
 2562 003e 8342     		cmp	r3, r0
 2563 0040 18DD     		ble	.L171
1578:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2564              		.loc 1 1578 5 is_stmt 1 view .LVU722
 2565              		.loc 1 1578 47 is_stmt 0 view .LVU723
 2566 0042 0E4B     		ldr	r3, .L174
 2567 0044 411C     		adds	r1, r0, #1
 2568 0046 01EB4104 		add	r4, r1, r1, lsl #1
 2569 004a 43F83480 		str	r8, [r3, r4, lsl #3]
1579:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2570              		.loc 1 1579 5 is_stmt 1 view .LVU724
 2571              		.loc 1 1579 47 is_stmt 0 view .LVU725
 2572 004e 03EBC401 		add	r1, r3, r4, lsl #3
 2573 0052 4F60     		str	r7, [r1, #4]
1580:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2574              		.loc 1 1580 5 is_stmt 1 view .LVU726
 2575              		.loc 1 1580 47 is_stmt 0 view .LVU727
 2576 0054 00EB4001 		add	r1, r0, r0, lsl #1
 2577 0058 03EBC103 		add	r3, r3, r1, lsl #3
 2578 005c 1E62     		str	r6, [r3, #32]
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 78


1581:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2579              		.loc 1 1581 5 is_stmt 1 view .LVU728
 2580              		.loc 1 1581 47 is_stmt 0 view .LVU729
 2581 005e 0021     		movs	r1, #0
 2582 0060 9962     		str	r1, [r3, #40]
1582:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2583              		.loc 1 1582 5 is_stmt 1 view .LVU730
 2584              		.loc 1 1582 47 is_stmt 0 view .LVU731
 2585 0062 5962     		str	r1, [r3, #36]
1583:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags        = Flags;
 2586              		.loc 1 1583 5 is_stmt 1 view .LVU732
 2587              		.loc 1 1583 47 is_stmt 0 view .LVU733
 2588 0064 DD62     		str	r5, [r3, #44]
 2589              	.LVL246:
 2590              	.L170:
1584:RTT/SEGGER_RTT.c ****   } else {
1585:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1586:RTT/SEGGER_RTT.c ****   }
1587:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2591              		.loc 1 1587 3 is_stmt 1 view .LVU734
 2592              		.syntax unified
 2593              	@ 1587 "RTT/SEGGER_RTT.c" 1
 2594 0066 82F31188 		msr   basepri, r2  
 2595              		
 2596              	@ 0 "" 2
 2597              		.thumb
 2598              		.syntax unified
 2599              	.LBE12:
 2600              		.loc 1 1587 22 view .LVU735
1588:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2601              		.loc 1 1588 3 view .LVU736
1589:RTT/SEGGER_RTT.c **** }
 2602              		.loc 1 1589 1 is_stmt 0 view .LVU737
 2603 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2604              	.LVL247:
 2605              	.L173:
1568:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2606              		.loc 1 1568 3 is_stmt 1 discriminator 1 view .LVU738
 2607 006e FFF7FEFF 		bl	_DoInit
 2608              	.LVL248:
1568:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2609              		.loc 1 1568 3 is_stmt 0 discriminator 1 view .LVU739
 2610 0072 CEE7     		b	.L167
 2611              	.LVL249:
 2612              	.L171:
 2613              	.LBB13:
1585:RTT/SEGGER_RTT.c ****   }
 2614              		.loc 1 1585 17 view .LVU740
 2615 0074 4FF0FF30 		mov	r0, #-1
 2616              	.LVL250:
1585:RTT/SEGGER_RTT.c ****   }
 2617              		.loc 1 1585 17 view .LVU741
 2618 0078 F5E7     		b	.L170
 2619              	.L175:
 2620 007a 00BF     		.align	2
 2621              	.L174:
 2622 007c 00000000 		.word	_SEGGER_RTT
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 79


 2623              	.LBE13:
 2624              		.cfi_endproc
 2625              	.LFE24:
 2627              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2628              		.align	1
 2629              		.global	SEGGER_RTT_ConfigUpBuffer
 2630              		.syntax unified
 2631              		.thumb
 2632              		.thumb_func
 2633              		.fpu fpv4-sp-d16
 2635              	SEGGER_RTT_ConfigUpBuffer:
 2636              	.LVL251:
 2637              	.LFB25:
1590:RTT/SEGGER_RTT.c **** 
1591:RTT/SEGGER_RTT.c **** /*********************************************************************
1592:RTT/SEGGER_RTT.c **** *
1593:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1594:RTT/SEGGER_RTT.c **** *
1595:RTT/SEGGER_RTT.c **** *  Function description
1596:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1597:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1598:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1599:RTT/SEGGER_RTT.c **** *
1600:RTT/SEGGER_RTT.c **** *  Parameters
1601:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1602:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1603:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1604:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1605:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1606:RTT/SEGGER_RTT.c **** *
1607:RTT/SEGGER_RTT.c **** *  Return value
1608:RTT/SEGGER_RTT.c **** *    >= 0 - O.K.
1609:RTT/SEGGER_RTT.c **** *     < 0 - Error
1610:RTT/SEGGER_RTT.c **** *
1611:RTT/SEGGER_RTT.c **** *  Additional information
1612:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1613:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1614:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1615:RTT/SEGGER_RTT.c **** */
1616:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2638              		.loc 1 1616 124 is_stmt 1 view -0
 2639              		.cfi_startproc
 2640              		@ args = 4, pretend = 0, frame = 0
 2641              		@ frame_needed = 0, uses_anonymous_args = 0
 2642              		.loc 1 1616 124 is_stmt 0 view .LVU743
 2643 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2644              	.LCFI28:
 2645              		.cfi_def_cfa_offset 24
 2646              		.cfi_offset 4, -24
 2647              		.cfi_offset 5, -20
 2648              		.cfi_offset 6, -16
 2649              		.cfi_offset 7, -12
 2650              		.cfi_offset 8, -8
 2651              		.cfi_offset 14, -4
 2652 0004 0446     		mov	r4, r0
 2653 0006 8846     		mov	r8, r1
 2654 0008 1746     		mov	r7, r2
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 80


 2655 000a 1E46     		mov	r6, r3
1617:RTT/SEGGER_RTT.c ****   int r;
 2656              		.loc 1 1617 3 is_stmt 1 view .LVU744
1618:RTT/SEGGER_RTT.c **** 
1619:RTT/SEGGER_RTT.c ****   INIT();
 2657              		.loc 1 1619 3 view .LVU745
 2658              		.loc 1 1619 3 view .LVU746
 2659 000c 184B     		ldr	r3, .L183
 2660              	.LVL252:
 2661              		.loc 1 1619 3 is_stmt 0 view .LVU747
 2662 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2663 0010 3BB3     		cbz	r3, .L182
 2664              	.LVL253:
 2665              	.L177:
 2666              		.loc 1 1619 3 is_stmt 1 discriminator 3 view .LVU748
1620:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2667              		.loc 1 1620 3 discriminator 3 view .LVU749
 2668              		.loc 1 1620 42 is_stmt 0 discriminator 3 view .LVU750
 2669 0012 174B     		ldr	r3, .L183
 2670 0014 1B69     		ldr	r3, [r3, #16]
 2671              		.loc 1 1620 6 discriminator 3 view .LVU751
 2672 0016 A342     		cmp	r3, r4
 2673 0018 26D9     		bls	.L180
 2674              	.LBB14:
1621:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2675              		.loc 1 1621 5 is_stmt 1 view .LVU752
 2676              		.loc 1 1621 5 view .LVU753
 2677              		.syntax unified
 2678              	@ 1621 "RTT/SEGGER_RTT.c" 1
 2679 001a EFF31183 		mrs   r3, basepri  
 2680 001e 4FF02001 		mov   r1, #32       
 2681 0022 81F31188 		msr   basepri, r1  
 2682              		
 2683              	@ 0 "" 2
 2684              	.LVL254:
 2685              		.loc 1 1621 22 view .LVU754
1622:RTT/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2686              		.loc 1 1622 5 view .LVU755
 2687              		.loc 1 1622 8 is_stmt 0 view .LVU756
 2688              		.thumb
 2689              		.syntax unified
 2690 0026 84B1     		cbz	r4, .L179
1623:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2691              		.loc 1 1623 7 is_stmt 1 view .LVU757
 2692              		.loc 1 1623 49 is_stmt 0 view .LVU758
 2693 0028 114D     		ldr	r5, .L183
 2694 002a 601C     		adds	r0, r4, #1
 2695 002c 00EB4002 		add	r2, r0, r0, lsl #1
 2696 0030 45F83280 		str	r8, [r5, r2, lsl #3]
1624:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2697              		.loc 1 1624 7 is_stmt 1 view .LVU759
 2698              		.loc 1 1624 49 is_stmt 0 view .LVU760
 2699 0034 05EBC200 		add	r0, r5, r2, lsl #3
 2700 0038 4760     		str	r7, [r0, #4]
1625:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2701              		.loc 1 1625 7 is_stmt 1 view .LVU761
 2702              		.loc 1 1625 49 is_stmt 0 view .LVU762
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 81


 2703 003a 04EB4402 		add	r2, r4, r4, lsl #1
 2704 003e 05EBC202 		add	r2, r5, r2, lsl #3
 2705 0042 1662     		str	r6, [r2, #32]
1626:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2706              		.loc 1 1626 7 is_stmt 1 view .LVU763
 2707              		.loc 1 1626 49 is_stmt 0 view .LVU764
 2708 0044 0021     		movs	r1, #0
 2709 0046 9162     		str	r1, [r2, #40]
1627:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2710              		.loc 1 1627 7 is_stmt 1 view .LVU765
 2711              		.loc 1 1627 49 is_stmt 0 view .LVU766
 2712 0048 5162     		str	r1, [r2, #36]
 2713              	.L179:
1628:RTT/SEGGER_RTT.c ****     }
1629:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 2714              		.loc 1 1629 5 is_stmt 1 view .LVU767
 2715              		.loc 1 1629 49 is_stmt 0 view .LVU768
 2716 004a 04EB4404 		add	r4, r4, r4, lsl #1
 2717              	.LVL255:
 2718              		.loc 1 1629 49 view .LVU769
 2719 004e 0848     		ldr	r0, .L183
 2720 0050 00EBC404 		add	r4, r0, r4, lsl #3
 2721 0054 069A     		ldr	r2, [sp, #24]
 2722 0056 E262     		str	r2, [r4, #44]
1630:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2723              		.loc 1 1630 5 is_stmt 1 view .LVU770
 2724              		.syntax unified
 2725              	@ 1630 "RTT/SEGGER_RTT.c" 1
 2726 0058 83F31188 		msr   basepri, r3  
 2727              		
 2728              	@ 0 "" 2
 2729              		.thumb
 2730              		.syntax unified
 2731              	.LBE14:
 2732              		.loc 1 1630 24 view .LVU771
1631:RTT/SEGGER_RTT.c ****     r =  0;
 2733              		.loc 1 1631 5 view .LVU772
 2734              	.LVL256:
 2735              		.loc 1 1631 7 is_stmt 0 view .LVU773
 2736 005c 0020     		movs	r0, #0
 2737              	.LVL257:
 2738              	.L176:
1632:RTT/SEGGER_RTT.c ****   } else {
1633:RTT/SEGGER_RTT.c ****     r = -1;
1634:RTT/SEGGER_RTT.c ****   }
1635:RTT/SEGGER_RTT.c ****   return r;
1636:RTT/SEGGER_RTT.c **** }
 2739              		.loc 1 1636 1 view .LVU774
 2740 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2741              	.LVL258:
 2742              	.L182:
1619:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2743              		.loc 1 1619 3 is_stmt 1 discriminator 1 view .LVU775
 2744 0062 FFF7FEFF 		bl	_DoInit
 2745              	.LVL259:
1619:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2746              		.loc 1 1619 3 is_stmt 0 discriminator 1 view .LVU776
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 82


 2747 0066 D4E7     		b	.L177
 2748              	.L180:
1633:RTT/SEGGER_RTT.c ****   }
 2749              		.loc 1 1633 7 view .LVU777
 2750 0068 4FF0FF30 		mov	r0, #-1
 2751              	.LVL260:
1635:RTT/SEGGER_RTT.c **** }
 2752              		.loc 1 1635 3 is_stmt 1 view .LVU778
1635:RTT/SEGGER_RTT.c **** }
 2753              		.loc 1 1635 10 is_stmt 0 view .LVU779
 2754 006c F7E7     		b	.L176
 2755              	.L184:
 2756 006e 00BF     		.align	2
 2757              	.L183:
 2758 0070 00000000 		.word	_SEGGER_RTT
 2759              		.cfi_endproc
 2760              	.LFE25:
 2762              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2763              		.align	1
 2764              		.global	SEGGER_RTT_ConfigDownBuffer
 2765              		.syntax unified
 2766              		.thumb
 2767              		.thumb_func
 2768              		.fpu fpv4-sp-d16
 2770              	SEGGER_RTT_ConfigDownBuffer:
 2771              	.LVL261:
 2772              	.LFB26:
1637:RTT/SEGGER_RTT.c **** 
1638:RTT/SEGGER_RTT.c **** /*********************************************************************
1639:RTT/SEGGER_RTT.c **** *
1640:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1641:RTT/SEGGER_RTT.c **** *
1642:RTT/SEGGER_RTT.c **** *  Function description
1643:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1644:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1645:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1646:RTT/SEGGER_RTT.c **** *
1647:RTT/SEGGER_RTT.c **** *  Parameters
1648:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1649:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1650:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1651:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1652:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1653:RTT/SEGGER_RTT.c **** *
1654:RTT/SEGGER_RTT.c **** *  Return value
1655:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1656:RTT/SEGGER_RTT.c **** *     < 0  Error
1657:RTT/SEGGER_RTT.c **** *
1658:RTT/SEGGER_RTT.c **** *  Additional information
1659:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1660:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1661:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1662:RTT/SEGGER_RTT.c **** */
1663:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2773              		.loc 1 1663 126 is_stmt 1 view -0
 2774              		.cfi_startproc
 2775              		@ args = 4, pretend = 0, frame = 0
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 83


 2776              		@ frame_needed = 0, uses_anonymous_args = 0
 2777              		.loc 1 1663 126 is_stmt 0 view .LVU781
 2778 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2779              	.LCFI29:
 2780              		.cfi_def_cfa_offset 24
 2781              		.cfi_offset 4, -24
 2782              		.cfi_offset 5, -20
 2783              		.cfi_offset 6, -16
 2784              		.cfi_offset 7, -12
 2785              		.cfi_offset 8, -8
 2786              		.cfi_offset 14, -4
 2787 0004 0446     		mov	r4, r0
 2788 0006 8846     		mov	r8, r1
 2789 0008 1746     		mov	r7, r2
 2790 000a 1E46     		mov	r6, r3
1664:RTT/SEGGER_RTT.c ****   int r;
 2791              		.loc 1 1664 3 is_stmt 1 view .LVU782
1665:RTT/SEGGER_RTT.c **** 
1666:RTT/SEGGER_RTT.c ****   INIT();
 2792              		.loc 1 1666 3 view .LVU783
 2793              		.loc 1 1666 3 view .LVU784
 2794 000c 154B     		ldr	r3, .L192
 2795              	.LVL262:
 2796              		.loc 1 1666 3 is_stmt 0 view .LVU785
 2797 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2798 0010 13B3     		cbz	r3, .L191
 2799              	.LVL263:
 2800              	.L186:
 2801              		.loc 1 1666 3 is_stmt 1 discriminator 3 view .LVU786
1667:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2802              		.loc 1 1667 3 discriminator 3 view .LVU787
 2803              		.loc 1 1667 42 is_stmt 0 discriminator 3 view .LVU788
 2804 0012 144B     		ldr	r3, .L192
 2805 0014 5B69     		ldr	r3, [r3, #20]
 2806              		.loc 1 1667 6 discriminator 3 view .LVU789
 2807 0016 A342     		cmp	r3, r4
 2808 0018 21D9     		bls	.L189
 2809              	.LBB15:
1668:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2810              		.loc 1 1668 5 is_stmt 1 view .LVU790
 2811              		.loc 1 1668 5 view .LVU791
 2812              		.syntax unified
 2813              	@ 1668 "RTT/SEGGER_RTT.c" 1
 2814 001a EFF31183 		mrs   r3, basepri  
 2815 001e 4FF02001 		mov   r1, #32       
 2816 0022 81F31188 		msr   basepri, r1  
 2817              		
 2818              	@ 0 "" 2
 2819              	.LVL264:
 2820              		.loc 1 1668 22 view .LVU792
1669:RTT/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2821              		.loc 1 1669 5 view .LVU793
 2822              		.loc 1 1669 8 is_stmt 0 view .LVU794
 2823              		.thumb
 2824              		.syntax unified
 2825 0026 5CB1     		cbz	r4, .L188
1670:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 84


 2826              		.loc 1 1670 7 is_stmt 1 view .LVU795
 2827              		.loc 1 1670 51 is_stmt 0 view .LVU796
 2828 0028 04EB4400 		add	r0, r4, r4, lsl #1
 2829 002c 0D4D     		ldr	r5, .L192
 2830 002e 05EBC000 		add	r0, r5, r0, lsl #3
 2831 0032 C0F86080 		str	r8, [r0, #96]
1671:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2832              		.loc 1 1671 7 is_stmt 1 view .LVU797
 2833              		.loc 1 1671 51 is_stmt 0 view .LVU798
 2834 0036 4766     		str	r7, [r0, #100]
1672:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2835              		.loc 1 1672 7 is_stmt 1 view .LVU799
 2836              		.loc 1 1672 51 is_stmt 0 view .LVU800
 2837 0038 8666     		str	r6, [r0, #104]
1673:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2838              		.loc 1 1673 7 is_stmt 1 view .LVU801
 2839              		.loc 1 1673 51 is_stmt 0 view .LVU802
 2840 003a 0022     		movs	r2, #0
 2841 003c 0267     		str	r2, [r0, #112]
1674:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2842              		.loc 1 1674 7 is_stmt 1 view .LVU803
 2843              		.loc 1 1674 51 is_stmt 0 view .LVU804
 2844 003e C266     		str	r2, [r0, #108]
 2845              	.L188:
1675:RTT/SEGGER_RTT.c ****     }
1676:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 2846              		.loc 1 1676 5 is_stmt 1 view .LVU805
 2847              		.loc 1 1676 51 is_stmt 0 view .LVU806
 2848 0040 04EB4404 		add	r4, r4, r4, lsl #1
 2849              	.LVL265:
 2850              		.loc 1 1676 51 view .LVU807
 2851 0044 0748     		ldr	r0, .L192
 2852 0046 00EBC404 		add	r4, r0, r4, lsl #3
 2853 004a 069A     		ldr	r2, [sp, #24]
 2854 004c 6267     		str	r2, [r4, #116]
1677:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2855              		.loc 1 1677 5 is_stmt 1 view .LVU808
 2856              		.syntax unified
 2857              	@ 1677 "RTT/SEGGER_RTT.c" 1
 2858 004e 83F31188 		msr   basepri, r3  
 2859              		
 2860              	@ 0 "" 2
 2861              		.thumb
 2862              		.syntax unified
 2863              	.LBE15:
 2864              		.loc 1 1677 24 view .LVU809
1678:RTT/SEGGER_RTT.c ****     r =  0;
 2865              		.loc 1 1678 5 view .LVU810
 2866              	.LVL266:
 2867              		.loc 1 1678 7 is_stmt 0 view .LVU811
 2868 0052 0020     		movs	r0, #0
 2869              	.LVL267:
 2870              	.L185:
1679:RTT/SEGGER_RTT.c ****   } else {
1680:RTT/SEGGER_RTT.c ****     r = -1;
1681:RTT/SEGGER_RTT.c ****   }
1682:RTT/SEGGER_RTT.c ****   return r;
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 85


1683:RTT/SEGGER_RTT.c **** }
 2871              		.loc 1 1683 1 view .LVU812
 2872 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2873              	.LVL268:
 2874              	.L191:
1666:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2875              		.loc 1 1666 3 is_stmt 1 discriminator 1 view .LVU813
 2876 0058 FFF7FEFF 		bl	_DoInit
 2877              	.LVL269:
1666:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2878              		.loc 1 1666 3 is_stmt 0 discriminator 1 view .LVU814
 2879 005c D9E7     		b	.L186
 2880              	.L189:
1680:RTT/SEGGER_RTT.c ****   }
 2881              		.loc 1 1680 7 view .LVU815
 2882 005e 4FF0FF30 		mov	r0, #-1
 2883              	.LVL270:
1682:RTT/SEGGER_RTT.c **** }
 2884              		.loc 1 1682 3 is_stmt 1 view .LVU816
1682:RTT/SEGGER_RTT.c **** }
 2885              		.loc 1 1682 10 is_stmt 0 view .LVU817
 2886 0062 F7E7     		b	.L185
 2887              	.L193:
 2888              		.align	2
 2889              	.L192:
 2890 0064 00000000 		.word	_SEGGER_RTT
 2891              		.cfi_endproc
 2892              	.LFE26:
 2894              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 2895              		.align	1
 2896              		.global	SEGGER_RTT_SetNameUpBuffer
 2897              		.syntax unified
 2898              		.thumb
 2899              		.thumb_func
 2900              		.fpu fpv4-sp-d16
 2902              	SEGGER_RTT_SetNameUpBuffer:
 2903              	.LVL271:
 2904              	.LFB27:
1684:RTT/SEGGER_RTT.c **** 
1685:RTT/SEGGER_RTT.c **** /*********************************************************************
1686:RTT/SEGGER_RTT.c **** *
1687:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1688:RTT/SEGGER_RTT.c **** *
1689:RTT/SEGGER_RTT.c **** *  Function description
1690:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1691:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1692:RTT/SEGGER_RTT.c **** *
1693:RTT/SEGGER_RTT.c **** *  Parameters
1694:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1695:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1696:RTT/SEGGER_RTT.c **** *
1697:RTT/SEGGER_RTT.c **** *  Return value
1698:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1699:RTT/SEGGER_RTT.c **** *     < 0  Error
1700:RTT/SEGGER_RTT.c **** */
1701:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 2905              		.loc 1 1701 73 is_stmt 1 view -0
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 86


 2906              		.cfi_startproc
 2907              		@ args = 0, pretend = 0, frame = 0
 2908              		@ frame_needed = 0, uses_anonymous_args = 0
 2909              		.loc 1 1701 73 is_stmt 0 view .LVU819
 2910 0000 38B5     		push	{r3, r4, r5, lr}
 2911              	.LCFI30:
 2912              		.cfi_def_cfa_offset 16
 2913              		.cfi_offset 3, -16
 2914              		.cfi_offset 4, -12
 2915              		.cfi_offset 5, -8
 2916              		.cfi_offset 14, -4
 2917 0002 0446     		mov	r4, r0
 2918 0004 0D46     		mov	r5, r1
1702:RTT/SEGGER_RTT.c ****   int r;
 2919              		.loc 1 1702 3 is_stmt 1 view .LVU820
1703:RTT/SEGGER_RTT.c **** 
1704:RTT/SEGGER_RTT.c ****   INIT();
 2920              		.loc 1 1704 3 view .LVU821
 2921              		.loc 1 1704 3 view .LVU822
 2922 0006 0E4B     		ldr	r3, .L200
 2923 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2924 000a 9BB1     		cbz	r3, .L199
 2925              	.LVL272:
 2926              	.L195:
 2927              		.loc 1 1704 3 discriminator 3 view .LVU823
1705:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2928              		.loc 1 1705 3 discriminator 3 view .LVU824
 2929              		.loc 1 1705 42 is_stmt 0 discriminator 3 view .LVU825
 2930 000c 0C4B     		ldr	r3, .L200
 2931 000e 1B69     		ldr	r3, [r3, #16]
 2932              		.loc 1 1705 6 discriminator 3 view .LVU826
 2933 0010 A342     		cmp	r3, r4
 2934 0012 12D9     		bls	.L197
 2935              	.LBB16:
1706:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2936              		.loc 1 1706 5 is_stmt 1 view .LVU827
 2937              		.loc 1 1706 5 view .LVU828
 2938              		.syntax unified
 2939              	@ 1706 "RTT/SEGGER_RTT.c" 1
 2940 0014 EFF31183 		mrs   r3, basepri  
 2941 0018 4FF02001 		mov   r1, #32       
 2942 001c 81F31188 		msr   basepri, r1  
 2943              		
 2944              	@ 0 "" 2
 2945              	.LVL273:
 2946              		.loc 1 1706 22 view .LVU829
1707:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName = sName;
 2947              		.loc 1 1707 5 view .LVU830
 2948              		.loc 1 1707 40 is_stmt 0 view .LVU831
 2949              		.thumb
 2950              		.syntax unified
 2951 0020 0134     		adds	r4, r4, #1
 2952              	.LVL274:
 2953              		.loc 1 1707 40 view .LVU832
 2954 0022 04EB4404 		add	r4, r4, r4, lsl #1
 2955              	.LVL275:
 2956              		.loc 1 1707 40 view .LVU833
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 87


 2957 0026 064A     		ldr	r2, .L200
 2958 0028 42F83450 		str	r5, [r2, r4, lsl #3]
1708:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2959              		.loc 1 1708 5 is_stmt 1 view .LVU834
 2960              		.syntax unified
 2961              	@ 1708 "RTT/SEGGER_RTT.c" 1
 2962 002c 83F31188 		msr   basepri, r3  
 2963              		
 2964              	@ 0 "" 2
 2965              		.thumb
 2966              		.syntax unified
 2967              	.LBE16:
 2968              		.loc 1 1708 24 view .LVU835
1709:RTT/SEGGER_RTT.c ****     r =  0;
 2969              		.loc 1 1709 5 view .LVU836
 2970              	.LVL276:
 2971              		.loc 1 1709 7 is_stmt 0 view .LVU837
 2972 0030 0020     		movs	r0, #0
 2973              	.LVL277:
 2974              	.L194:
1710:RTT/SEGGER_RTT.c ****   } else {
1711:RTT/SEGGER_RTT.c ****     r = -1;
1712:RTT/SEGGER_RTT.c ****   }
1713:RTT/SEGGER_RTT.c ****   return r;
1714:RTT/SEGGER_RTT.c **** }
 2975              		.loc 1 1714 1 view .LVU838
 2976 0032 38BD     		pop	{r3, r4, r5, pc}
 2977              	.LVL278:
 2978              	.L199:
1704:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2979              		.loc 1 1704 3 is_stmt 1 discriminator 1 view .LVU839
 2980 0034 FFF7FEFF 		bl	_DoInit
 2981              	.LVL279:
1704:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2982              		.loc 1 1704 3 is_stmt 0 discriminator 1 view .LVU840
 2983 0038 E8E7     		b	.L195
 2984              	.L197:
1711:RTT/SEGGER_RTT.c ****   }
 2985              		.loc 1 1711 7 view .LVU841
 2986 003a 4FF0FF30 		mov	r0, #-1
 2987              	.LVL280:
1713:RTT/SEGGER_RTT.c **** }
 2988              		.loc 1 1713 3 is_stmt 1 view .LVU842
1713:RTT/SEGGER_RTT.c **** }
 2989              		.loc 1 1713 10 is_stmt 0 view .LVU843
 2990 003e F8E7     		b	.L194
 2991              	.L201:
 2992              		.align	2
 2993              	.L200:
 2994 0040 00000000 		.word	_SEGGER_RTT
 2995              		.cfi_endproc
 2996              	.LFE27:
 2998              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 2999              		.align	1
 3000              		.global	SEGGER_RTT_SetNameDownBuffer
 3001              		.syntax unified
 3002              		.thumb
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 88


 3003              		.thumb_func
 3004              		.fpu fpv4-sp-d16
 3006              	SEGGER_RTT_SetNameDownBuffer:
 3007              	.LVL281:
 3008              	.LFB28:
1715:RTT/SEGGER_RTT.c **** 
1716:RTT/SEGGER_RTT.c **** /*********************************************************************
1717:RTT/SEGGER_RTT.c **** *
1718:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1719:RTT/SEGGER_RTT.c **** *
1720:RTT/SEGGER_RTT.c **** *  Function description
1721:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1722:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1723:RTT/SEGGER_RTT.c **** *
1724:RTT/SEGGER_RTT.c **** *  Parameters
1725:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1726:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1727:RTT/SEGGER_RTT.c **** *
1728:RTT/SEGGER_RTT.c **** *  Return value
1729:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1730:RTT/SEGGER_RTT.c **** *     < 0  Error
1731:RTT/SEGGER_RTT.c **** */
1732:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3009              		.loc 1 1732 75 is_stmt 1 view -0
 3010              		.cfi_startproc
 3011              		@ args = 0, pretend = 0, frame = 0
 3012              		@ frame_needed = 0, uses_anonymous_args = 0
 3013              		.loc 1 1732 75 is_stmt 0 view .LVU845
 3014 0000 38B5     		push	{r3, r4, r5, lr}
 3015              	.LCFI31:
 3016              		.cfi_def_cfa_offset 16
 3017              		.cfi_offset 3, -16
 3018              		.cfi_offset 4, -12
 3019              		.cfi_offset 5, -8
 3020              		.cfi_offset 14, -4
 3021 0002 0446     		mov	r4, r0
 3022 0004 0D46     		mov	r5, r1
1733:RTT/SEGGER_RTT.c ****   int r;
 3023              		.loc 1 1733 3 is_stmt 1 view .LVU846
1734:RTT/SEGGER_RTT.c **** 
1735:RTT/SEGGER_RTT.c ****   INIT();
 3024              		.loc 1 1735 3 view .LVU847
 3025              		.loc 1 1735 3 view .LVU848
 3026 0006 0E4B     		ldr	r3, .L208
 3027 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3028 000a 9BB1     		cbz	r3, .L207
 3029              	.LVL282:
 3030              	.L203:
 3031              		.loc 1 1735 3 discriminator 3 view .LVU849
1736:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3032              		.loc 1 1736 3 discriminator 3 view .LVU850
 3033              		.loc 1 1736 42 is_stmt 0 discriminator 3 view .LVU851
 3034 000c 0C4B     		ldr	r3, .L208
 3035 000e 5B69     		ldr	r3, [r3, #20]
 3036              		.loc 1 1736 6 discriminator 3 view .LVU852
 3037 0010 A342     		cmp	r3, r4
 3038 0012 12D9     		bls	.L205
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 89


 3039              	.LBB17:
1737:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3040              		.loc 1 1737 5 is_stmt 1 view .LVU853
 3041              		.loc 1 1737 5 view .LVU854
 3042              		.syntax unified
 3043              	@ 1737 "RTT/SEGGER_RTT.c" 1
 3044 0014 EFF31183 		mrs   r3, basepri  
 3045 0018 4FF02001 		mov   r1, #32       
 3046 001c 81F31188 		msr   basepri, r1  
 3047              		
 3048              	@ 0 "" 2
 3049              	.LVL283:
 3050              		.loc 1 1737 22 view .LVU855
1738:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName = sName;
 3051              		.loc 1 1738 5 view .LVU856
 3052              		.loc 1 1738 42 is_stmt 0 view .LVU857
 3053              		.thumb
 3054              		.syntax unified
 3055 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3056              	.LVL284:
 3057              		.loc 1 1738 42 view .LVU858
 3058 0024 0648     		ldr	r0, .L208
 3059 0026 00EBC404 		add	r4, r0, r4, lsl #3
 3060 002a 2566     		str	r5, [r4, #96]
1739:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3061              		.loc 1 1739 5 is_stmt 1 view .LVU859
 3062              		.syntax unified
 3063              	@ 1739 "RTT/SEGGER_RTT.c" 1
 3064 002c 83F31188 		msr   basepri, r3  
 3065              		
 3066              	@ 0 "" 2
 3067              		.thumb
 3068              		.syntax unified
 3069              	.LBE17:
 3070              		.loc 1 1739 24 view .LVU860
1740:RTT/SEGGER_RTT.c ****     r =  0;
 3071              		.loc 1 1740 5 view .LVU861
 3072              	.LVL285:
 3073              		.loc 1 1740 7 is_stmt 0 view .LVU862
 3074 0030 0020     		movs	r0, #0
 3075              	.LVL286:
 3076              	.L202:
1741:RTT/SEGGER_RTT.c ****   } else {
1742:RTT/SEGGER_RTT.c ****     r = -1;
1743:RTT/SEGGER_RTT.c ****   }
1744:RTT/SEGGER_RTT.c ****   return r;
1745:RTT/SEGGER_RTT.c **** }
 3077              		.loc 1 1745 1 view .LVU863
 3078 0032 38BD     		pop	{r3, r4, r5, pc}
 3079              	.LVL287:
 3080              	.L207:
1735:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3081              		.loc 1 1735 3 is_stmt 1 discriminator 1 view .LVU864
 3082 0034 FFF7FEFF 		bl	_DoInit
 3083              	.LVL288:
1735:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3084              		.loc 1 1735 3 is_stmt 0 discriminator 1 view .LVU865
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 90


 3085 0038 E8E7     		b	.L203
 3086              	.L205:
1742:RTT/SEGGER_RTT.c ****   }
 3087              		.loc 1 1742 7 view .LVU866
 3088 003a 4FF0FF30 		mov	r0, #-1
 3089              	.LVL289:
1744:RTT/SEGGER_RTT.c **** }
 3090              		.loc 1 1744 3 is_stmt 1 view .LVU867
1744:RTT/SEGGER_RTT.c **** }
 3091              		.loc 1 1744 10 is_stmt 0 view .LVU868
 3092 003e F8E7     		b	.L202
 3093              	.L209:
 3094              		.align	2
 3095              	.L208:
 3096 0040 00000000 		.word	_SEGGER_RTT
 3097              		.cfi_endproc
 3098              	.LFE28:
 3100              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3101              		.align	1
 3102              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3103              		.syntax unified
 3104              		.thumb
 3105              		.thumb_func
 3106              		.fpu fpv4-sp-d16
 3108              	SEGGER_RTT_SetFlagsUpBuffer:
 3109              	.LVL290:
 3110              	.LFB29:
1746:RTT/SEGGER_RTT.c **** 
1747:RTT/SEGGER_RTT.c **** /*********************************************************************
1748:RTT/SEGGER_RTT.c **** *
1749:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1750:RTT/SEGGER_RTT.c **** *
1751:RTT/SEGGER_RTT.c **** *  Function description
1752:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1753:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1754:RTT/SEGGER_RTT.c **** *
1755:RTT/SEGGER_RTT.c **** *  Parameters
1756:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1757:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1758:RTT/SEGGER_RTT.c **** *
1759:RTT/SEGGER_RTT.c **** *  Return value
1760:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1761:RTT/SEGGER_RTT.c **** *     < 0  Error
1762:RTT/SEGGER_RTT.c **** */
1763:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3111              		.loc 1 1763 71 is_stmt 1 view -0
 3112              		.cfi_startproc
 3113              		@ args = 0, pretend = 0, frame = 0
 3114              		@ frame_needed = 0, uses_anonymous_args = 0
 3115              		.loc 1 1763 71 is_stmt 0 view .LVU870
 3116 0000 38B5     		push	{r3, r4, r5, lr}
 3117              	.LCFI32:
 3118              		.cfi_def_cfa_offset 16
 3119              		.cfi_offset 3, -16
 3120              		.cfi_offset 4, -12
 3121              		.cfi_offset 5, -8
 3122              		.cfi_offset 14, -4
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 91


 3123 0002 0446     		mov	r4, r0
 3124 0004 0D46     		mov	r5, r1
1764:RTT/SEGGER_RTT.c ****   int r;
 3125              		.loc 1 1764 3 is_stmt 1 view .LVU871
1765:RTT/SEGGER_RTT.c **** 
1766:RTT/SEGGER_RTT.c ****   INIT();
 3126              		.loc 1 1766 3 view .LVU872
 3127              		.loc 1 1766 3 view .LVU873
 3128 0006 0E4B     		ldr	r3, .L216
 3129 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3130 000a 9BB1     		cbz	r3, .L215
 3131              	.LVL291:
 3132              	.L211:
 3133              		.loc 1 1766 3 discriminator 3 view .LVU874
1767:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 3134              		.loc 1 1767 3 discriminator 3 view .LVU875
 3135              		.loc 1 1767 42 is_stmt 0 discriminator 3 view .LVU876
 3136 000c 0C4B     		ldr	r3, .L216
 3137 000e 1B69     		ldr	r3, [r3, #16]
 3138              		.loc 1 1767 6 discriminator 3 view .LVU877
 3139 0010 A342     		cmp	r3, r4
 3140 0012 12D9     		bls	.L213
 3141              	.LBB18:
1768:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3142              		.loc 1 1768 5 is_stmt 1 view .LVU878
 3143              		.loc 1 1768 5 view .LVU879
 3144              		.syntax unified
 3145              	@ 1768 "RTT/SEGGER_RTT.c" 1
 3146 0014 EFF31183 		mrs   r3, basepri  
 3147 0018 4FF02001 		mov   r1, #32       
 3148 001c 81F31188 		msr   basepri, r1  
 3149              		
 3150              	@ 0 "" 2
 3151              	.LVL292:
 3152              		.loc 1 1768 22 view .LVU880
1769:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags = Flags;
 3153              		.loc 1 1769 5 view .LVU881
 3154              		.loc 1 1769 40 is_stmt 0 view .LVU882
 3155              		.thumb
 3156              		.syntax unified
 3157 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3158              	.LVL293:
 3159              		.loc 1 1769 40 view .LVU883
 3160 0024 0648     		ldr	r0, .L216
 3161 0026 00EBC404 		add	r4, r0, r4, lsl #3
 3162 002a E562     		str	r5, [r4, #44]
1770:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3163              		.loc 1 1770 5 is_stmt 1 view .LVU884
 3164              		.syntax unified
 3165              	@ 1770 "RTT/SEGGER_RTT.c" 1
 3166 002c 83F31188 		msr   basepri, r3  
 3167              		
 3168              	@ 0 "" 2
 3169              		.thumb
 3170              		.syntax unified
 3171              	.LBE18:
 3172              		.loc 1 1770 24 view .LVU885
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 92


1771:RTT/SEGGER_RTT.c ****     r =  0;
 3173              		.loc 1 1771 5 view .LVU886
 3174              	.LVL294:
 3175              		.loc 1 1771 7 is_stmt 0 view .LVU887
 3176 0030 0020     		movs	r0, #0
 3177              	.LVL295:
 3178              	.L210:
1772:RTT/SEGGER_RTT.c ****   } else {
1773:RTT/SEGGER_RTT.c ****     r = -1;
1774:RTT/SEGGER_RTT.c ****   }
1775:RTT/SEGGER_RTT.c ****   return r;
1776:RTT/SEGGER_RTT.c **** }
 3179              		.loc 1 1776 1 view .LVU888
 3180 0032 38BD     		pop	{r3, r4, r5, pc}
 3181              	.LVL296:
 3182              	.L215:
1766:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 3183              		.loc 1 1766 3 is_stmt 1 discriminator 1 view .LVU889
 3184 0034 FFF7FEFF 		bl	_DoInit
 3185              	.LVL297:
1766:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 3186              		.loc 1 1766 3 is_stmt 0 discriminator 1 view .LVU890
 3187 0038 E8E7     		b	.L211
 3188              	.L213:
1773:RTT/SEGGER_RTT.c ****   }
 3189              		.loc 1 1773 7 view .LVU891
 3190 003a 4FF0FF30 		mov	r0, #-1
 3191              	.LVL298:
1775:RTT/SEGGER_RTT.c **** }
 3192              		.loc 1 1775 3 is_stmt 1 view .LVU892
1775:RTT/SEGGER_RTT.c **** }
 3193              		.loc 1 1775 10 is_stmt 0 view .LVU893
 3194 003e F8E7     		b	.L210
 3195              	.L217:
 3196              		.align	2
 3197              	.L216:
 3198 0040 00000000 		.word	_SEGGER_RTT
 3199              		.cfi_endproc
 3200              	.LFE29:
 3202              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3203              		.align	1
 3204              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3205              		.syntax unified
 3206              		.thumb
 3207              		.thumb_func
 3208              		.fpu fpv4-sp-d16
 3210              	SEGGER_RTT_SetFlagsDownBuffer:
 3211              	.LVL299:
 3212              	.LFB30:
1777:RTT/SEGGER_RTT.c **** 
1778:RTT/SEGGER_RTT.c **** /*********************************************************************
1779:RTT/SEGGER_RTT.c **** *
1780:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1781:RTT/SEGGER_RTT.c **** *
1782:RTT/SEGGER_RTT.c **** *  Function description
1783:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1784:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 93


1785:RTT/SEGGER_RTT.c **** *
1786:RTT/SEGGER_RTT.c **** *  Parameters
1787:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1788:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1789:RTT/SEGGER_RTT.c **** *
1790:RTT/SEGGER_RTT.c **** *  Return value
1791:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1792:RTT/SEGGER_RTT.c **** *     < 0  Error
1793:RTT/SEGGER_RTT.c **** */
1794:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3213              		.loc 1 1794 73 is_stmt 1 view -0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 0
 3216              		@ frame_needed = 0, uses_anonymous_args = 0
 3217              		.loc 1 1794 73 is_stmt 0 view .LVU895
 3218 0000 38B5     		push	{r3, r4, r5, lr}
 3219              	.LCFI33:
 3220              		.cfi_def_cfa_offset 16
 3221              		.cfi_offset 3, -16
 3222              		.cfi_offset 4, -12
 3223              		.cfi_offset 5, -8
 3224              		.cfi_offset 14, -4
 3225 0002 0446     		mov	r4, r0
 3226 0004 0D46     		mov	r5, r1
1795:RTT/SEGGER_RTT.c ****   int r;
 3227              		.loc 1 1795 3 is_stmt 1 view .LVU896
1796:RTT/SEGGER_RTT.c **** 
1797:RTT/SEGGER_RTT.c ****   INIT();
 3228              		.loc 1 1797 3 view .LVU897
 3229              		.loc 1 1797 3 view .LVU898
 3230 0006 0E4B     		ldr	r3, .L224
 3231 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3232 000a 9BB1     		cbz	r3, .L223
 3233              	.LVL300:
 3234              	.L219:
 3235              		.loc 1 1797 3 discriminator 3 view .LVU899
1798:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3236              		.loc 1 1798 3 discriminator 3 view .LVU900
 3237              		.loc 1 1798 42 is_stmt 0 discriminator 3 view .LVU901
 3238 000c 0C4B     		ldr	r3, .L224
 3239 000e 5B69     		ldr	r3, [r3, #20]
 3240              		.loc 1 1798 6 discriminator 3 view .LVU902
 3241 0010 A342     		cmp	r3, r4
 3242 0012 12D9     		bls	.L221
 3243              	.LBB19:
1799:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3244              		.loc 1 1799 5 is_stmt 1 view .LVU903
 3245              		.loc 1 1799 5 view .LVU904
 3246              		.syntax unified
 3247              	@ 1799 "RTT/SEGGER_RTT.c" 1
 3248 0014 EFF31183 		mrs   r3, basepri  
 3249 0018 4FF02001 		mov   r1, #32       
 3250 001c 81F31188 		msr   basepri, r1  
 3251              		
 3252              	@ 0 "" 2
 3253              	.LVL301:
 3254              		.loc 1 1799 22 view .LVU905
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 94


1800:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags = Flags;
 3255              		.loc 1 1800 5 view .LVU906
 3256              		.loc 1 1800 42 is_stmt 0 view .LVU907
 3257              		.thumb
 3258              		.syntax unified
 3259 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3260              	.LVL302:
 3261              		.loc 1 1800 42 view .LVU908
 3262 0024 0648     		ldr	r0, .L224
 3263 0026 00EBC404 		add	r4, r0, r4, lsl #3
 3264 002a 6567     		str	r5, [r4, #116]
1801:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3265              		.loc 1 1801 5 is_stmt 1 view .LVU909
 3266              		.syntax unified
 3267              	@ 1801 "RTT/SEGGER_RTT.c" 1
 3268 002c 83F31188 		msr   basepri, r3  
 3269              		
 3270              	@ 0 "" 2
 3271              		.thumb
 3272              		.syntax unified
 3273              	.LBE19:
 3274              		.loc 1 1801 24 view .LVU910
1802:RTT/SEGGER_RTT.c ****     r =  0;
 3275              		.loc 1 1802 5 view .LVU911
 3276              	.LVL303:
 3277              		.loc 1 1802 7 is_stmt 0 view .LVU912
 3278 0030 0020     		movs	r0, #0
 3279              	.LVL304:
 3280              	.L218:
1803:RTT/SEGGER_RTT.c ****   } else {
1804:RTT/SEGGER_RTT.c ****     r = -1;
1805:RTT/SEGGER_RTT.c ****   }
1806:RTT/SEGGER_RTT.c ****   return r;
1807:RTT/SEGGER_RTT.c **** }
 3281              		.loc 1 1807 1 view .LVU913
 3282 0032 38BD     		pop	{r3, r4, r5, pc}
 3283              	.LVL305:
 3284              	.L223:
1797:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3285              		.loc 1 1797 3 is_stmt 1 discriminator 1 view .LVU914
 3286 0034 FFF7FEFF 		bl	_DoInit
 3287              	.LVL306:
1797:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3288              		.loc 1 1797 3 is_stmt 0 discriminator 1 view .LVU915
 3289 0038 E8E7     		b	.L219
 3290              	.L221:
1804:RTT/SEGGER_RTT.c ****   }
 3291              		.loc 1 1804 7 view .LVU916
 3292 003a 4FF0FF30 		mov	r0, #-1
 3293              	.LVL307:
1806:RTT/SEGGER_RTT.c **** }
 3294              		.loc 1 1806 3 is_stmt 1 view .LVU917
1806:RTT/SEGGER_RTT.c **** }
 3295              		.loc 1 1806 10 is_stmt 0 view .LVU918
 3296 003e F8E7     		b	.L218
 3297              	.L225:
 3298              		.align	2
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 95


 3299              	.L224:
 3300 0040 00000000 		.word	_SEGGER_RTT
 3301              		.cfi_endproc
 3302              	.LFE30:
 3304              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3305              		.align	1
 3306              		.global	SEGGER_RTT_Init
 3307              		.syntax unified
 3308              		.thumb
 3309              		.thumb_func
 3310              		.fpu fpv4-sp-d16
 3312              	SEGGER_RTT_Init:
 3313              	.LFB31:
1808:RTT/SEGGER_RTT.c **** 
1809:RTT/SEGGER_RTT.c **** /*********************************************************************
1810:RTT/SEGGER_RTT.c **** *
1811:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1812:RTT/SEGGER_RTT.c **** *
1813:RTT/SEGGER_RTT.c **** *  Function description
1814:RTT/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1815:RTT/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1816:RTT/SEGGER_RTT.c **** *
1817:RTT/SEGGER_RTT.c **** */
1818:RTT/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3314              		.loc 1 1818 29 is_stmt 1 view -0
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 0
 3317              		@ frame_needed = 0, uses_anonymous_args = 0
 3318 0000 08B5     		push	{r3, lr}
 3319              	.LCFI34:
 3320              		.cfi_def_cfa_offset 8
 3321              		.cfi_offset 3, -8
 3322              		.cfi_offset 14, -4
1819:RTT/SEGGER_RTT.c ****   _DoInit();
 3323              		.loc 1 1819 3 view .LVU920
 3324 0002 FFF7FEFF 		bl	_DoInit
 3325              	.LVL308:
1820:RTT/SEGGER_RTT.c **** }
 3326              		.loc 1 1820 1 is_stmt 0 view .LVU921
 3327 0006 08BD     		pop	{r3, pc}
 3328              		.cfi_endproc
 3329              	.LFE31:
 3331              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3332              		.align	1
 3333              		.global	SEGGER_RTT_SetTerminal
 3334              		.syntax unified
 3335              		.thumb
 3336              		.thumb_func
 3337              		.fpu fpv4-sp-d16
 3339              	SEGGER_RTT_SetTerminal:
 3340              	.LVL309:
 3341              	.LFB32:
1821:RTT/SEGGER_RTT.c **** 
1822:RTT/SEGGER_RTT.c **** /*********************************************************************
1823:RTT/SEGGER_RTT.c **** *
1824:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1825:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 96


1826:RTT/SEGGER_RTT.c **** *  Function description
1827:RTT/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1828:RTT/SEGGER_RTT.c **** *
1829:RTT/SEGGER_RTT.c **** *  Parameters
1830:RTT/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1831:RTT/SEGGER_RTT.c **** *
1832:RTT/SEGGER_RTT.c **** *  Return value
1833:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1834:RTT/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1835:RTT/SEGGER_RTT.c **** */
1836:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3342              		.loc 1 1836 55 is_stmt 1 view -0
 3343              		.cfi_startproc
 3344              		@ args = 0, pretend = 0, frame = 8
 3345              		@ frame_needed = 0, uses_anonymous_args = 0
 3346              		.loc 1 1836 55 is_stmt 0 view .LVU923
 3347 0000 30B5     		push	{r4, r5, lr}
 3348              	.LCFI35:
 3349              		.cfi_def_cfa_offset 12
 3350              		.cfi_offset 4, -12
 3351              		.cfi_offset 5, -8
 3352              		.cfi_offset 14, -4
 3353 0002 83B0     		sub	sp, sp, #12
 3354              	.LCFI36:
 3355              		.cfi_def_cfa_offset 24
 3356 0004 0446     		mov	r4, r0
1837:RTT/SEGGER_RTT.c ****   unsigned char         ac[2];
 3357              		.loc 1 1837 3 is_stmt 1 view .LVU924
1838:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3358              		.loc 1 1838 3 view .LVU925
1839:RTT/SEGGER_RTT.c ****   unsigned Avail;
 3359              		.loc 1 1839 3 view .LVU926
1840:RTT/SEGGER_RTT.c ****   int r;
 3360              		.loc 1 1840 3 view .LVU927
1841:RTT/SEGGER_RTT.c ****   //
1842:RTT/SEGGER_RTT.c ****   INIT();
 3361              		.loc 1 1842 3 view .LVU928
 3362              		.loc 1 1842 3 view .LVU929
 3363 0006 1D4B     		ldr	r3, .L239
 3364 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3365 000a FBB1     		cbz	r3, .L236
 3366              	.LVL310:
 3367              	.L229:
 3368              		.loc 1 1842 3 discriminator 3 view .LVU930
1843:RTT/SEGGER_RTT.c ****   //
1844:RTT/SEGGER_RTT.c ****   r = 0;
 3369              		.loc 1 1844 3 discriminator 3 view .LVU931
1845:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3370              		.loc 1 1845 3 discriminator 3 view .LVU932
 3371              		.loc 1 1845 9 is_stmt 0 discriminator 3 view .LVU933
 3372 000c FF23     		movs	r3, #255
 3373 000e 8DF80430 		strb	r3, [sp, #4]
1846:RTT/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3374              		.loc 1 1846 3 is_stmt 1 discriminator 3 view .LVU934
 3375              		.loc 1 1846 6 is_stmt 0 discriminator 3 view .LVU935
 3376 0012 0F2C     		cmp	r4, #15
 3377 0014 2FD8     		bhi	.L233
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 97


1847:RTT/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3378              		.loc 1 1847 5 is_stmt 1 view .LVU936
 3379              		.loc 1 1847 25 is_stmt 0 view .LVU937
 3380 0016 1A4B     		ldr	r3, .L239+4
 3381 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3382              		.loc 1 1847 11 view .LVU938
 3383 001a 8DF80530 		strb	r3, [sp, #5]
1848:RTT/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];    // Buffer 0 is always reserved for terminal I/O, so we can use 
 3384              		.loc 1 1848 5 is_stmt 1 view .LVU939
 3385              	.LVL311:
 3386              	.LBB20:
1849:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();    // Lock to make sure that no other task is writing into buffer, while we 
 3387              		.loc 1 1849 5 view .LVU940
 3388              		.loc 1 1849 5 view .LVU941
 3389              		.syntax unified
 3390              	@ 1849 "RTT/SEGGER_RTT.c" 1
 3391 001e EFF31185 		mrs   r5, basepri  
 3392 0022 4FF02001 		mov   r1, #32       
 3393 0026 81F31188 		msr   basepri, r1  
 3394              		
 3395              	@ 0 "" 2
 3396              	.LVL312:
 3397              		.loc 1 1849 22 view .LVU942
1850:RTT/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3398              		.loc 1 1850 5 view .LVU943
 3399              		.loc 1 1850 15 is_stmt 0 view .LVU944
 3400              		.thumb
 3401              		.syntax unified
 3402 002a 144B     		ldr	r3, .L239
 3403 002c DB6A     		ldr	r3, [r3, #44]
 3404              		.loc 1 1850 23 view .LVU945
 3405 002e 03F00303 		and	r3, r3, #3
 3406              		.loc 1 1850 8 view .LVU946
 3407 0032 022B     		cmp	r3, #2
 3408 0034 0DD0     		beq	.L237
1851:RTT/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1852:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1853:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1854:RTT/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3409              		.loc 1 1854 7 is_stmt 1 view .LVU947
 3410              		.loc 1 1854 15 is_stmt 0 view .LVU948
 3411 0036 1348     		ldr	r0, .L239+8
 3412              	.LVL313:
 3413              		.loc 1 1854 15 view .LVU949
 3414 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 3415              	.LVL314:
1855:RTT/SEGGER_RTT.c ****       if (Avail >= 2) {
 3416              		.loc 1 1855 7 is_stmt 1 view .LVU950
 3417              		.loc 1 1855 10 is_stmt 0 view .LVU951
 3418 003c 0128     		cmp	r0, #1
 3419 003e 11D8     		bhi	.L238
1856:RTT/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1857:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1858:RTT/SEGGER_RTT.c ****       } else {
1859:RTT/SEGGER_RTT.c ****         r = -1;
 3420              		.loc 1 1859 11 view .LVU952
 3421 0040 4FF0FF30 		mov	r0, #-1
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 98


 3422              	.LVL315:
 3423              	.L232:
1860:RTT/SEGGER_RTT.c ****       }
1861:RTT/SEGGER_RTT.c ****     }
1862:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3424              		.loc 1 1862 5 is_stmt 1 view .LVU953
 3425              		.syntax unified
 3426              	@ 1862 "RTT/SEGGER_RTT.c" 1
 3427 0044 85F31188 		msr   basepri, r5  
 3428              		
 3429              	@ 0 "" 2
 3430              		.thumb
 3431              		.syntax unified
 3432              	.LBE20:
 3433              		.loc 1 1862 24 view .LVU954
 3434              	.LVL316:
 3435              	.L228:
1863:RTT/SEGGER_RTT.c ****   } else {
1864:RTT/SEGGER_RTT.c ****     r = -1;
1865:RTT/SEGGER_RTT.c ****   }
1866:RTT/SEGGER_RTT.c ****   return r;
1867:RTT/SEGGER_RTT.c **** }
 3436              		.loc 1 1867 1 is_stmt 0 view .LVU955
 3437 0048 03B0     		add	sp, sp, #12
 3438              	.LCFI37:
 3439              		.cfi_remember_state
 3440              		.cfi_def_cfa_offset 12
 3441              		@ sp needed
 3442 004a 30BD     		pop	{r4, r5, pc}
 3443              	.LVL317:
 3444              	.L236:
 3445              	.LCFI38:
 3446              		.cfi_restore_state
1842:RTT/SEGGER_RTT.c ****   //
 3447              		.loc 1 1842 3 is_stmt 1 discriminator 1 view .LVU956
 3448 004c FFF7FEFF 		bl	_DoInit
 3449              	.LVL318:
1842:RTT/SEGGER_RTT.c ****   //
 3450              		.loc 1 1842 3 is_stmt 0 discriminator 1 view .LVU957
 3451 0050 DCE7     		b	.L229
 3452              	.LVL319:
 3453              	.L237:
 3454              	.LBB21:
1851:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3455              		.loc 1 1851 7 is_stmt 1 view .LVU958
1851:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3456              		.loc 1 1851 23 is_stmt 0 view .LVU959
 3457 0052 0D4B     		ldr	r3, .L239+12
 3458 0054 1C70     		strb	r4, [r3]
1852:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3459              		.loc 1 1852 7 is_stmt 1 view .LVU960
 3460 0056 0222     		movs	r2, #2
 3461 0058 01A9     		add	r1, sp, #4
 3462 005a 0A48     		ldr	r0, .L239+8
 3463              	.LVL320:
1852:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3464              		.loc 1 1852 7 is_stmt 0 view .LVU961
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 99


 3465 005c FFF7FEFF 		bl	_WriteBlocking
 3466              	.LVL321:
1852:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3467              		.loc 1 1852 7 view .LVU962
 3468              	.LBE21:
1844:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3469              		.loc 1 1844 5 view .LVU963
 3470 0060 0020     		movs	r0, #0
 3471              	.LBB22:
 3472 0062 EFE7     		b	.L232
 3473              	.LVL322:
 3474              	.L238:
1856:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3475              		.loc 1 1856 9 is_stmt 1 view .LVU964
1856:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3476              		.loc 1 1856 25 is_stmt 0 view .LVU965
 3477 0064 084B     		ldr	r3, .L239+12
 3478 0066 1C70     		strb	r4, [r3]
1857:RTT/SEGGER_RTT.c ****       } else {
 3479              		.loc 1 1857 9 is_stmt 1 view .LVU966
 3480 0068 0222     		movs	r2, #2
 3481 006a 01A9     		add	r1, sp, #4
 3482 006c 0548     		ldr	r0, .L239+8
 3483              	.LVL323:
1857:RTT/SEGGER_RTT.c ****       } else {
 3484              		.loc 1 1857 9 is_stmt 0 view .LVU967
 3485 006e FFF7FEFF 		bl	_WriteNoCheck
 3486              	.LVL324:
1857:RTT/SEGGER_RTT.c ****       } else {
 3487              		.loc 1 1857 9 view .LVU968
 3488              	.LBE22:
1844:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3489              		.loc 1 1844 5 view .LVU969
 3490 0072 0020     		movs	r0, #0
 3491              	.LBB23:
 3492 0074 E6E7     		b	.L232
 3493              	.LVL325:
 3494              	.L233:
1844:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3495              		.loc 1 1844 5 view .LVU970
 3496              	.LBE23:
1864:RTT/SEGGER_RTT.c ****   }
 3497              		.loc 1 1864 7 view .LVU971
 3498 0076 4FF0FF30 		mov	r0, #-1
 3499              	.LVL326:
1866:RTT/SEGGER_RTT.c **** }
 3500              		.loc 1 1866 3 is_stmt 1 view .LVU972
1866:RTT/SEGGER_RTT.c **** }
 3501              		.loc 1 1866 10 is_stmt 0 view .LVU973
 3502 007a E5E7     		b	.L228
 3503              	.L240:
 3504              		.align	2
 3505              	.L239:
 3506 007c 00000000 		.word	_SEGGER_RTT
 3507 0080 00000000 		.word	.LANCHOR0
 3508 0084 18000000 		.word	_SEGGER_RTT+24
 3509 0088 00000000 		.word	.LANCHOR3
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 100


 3510              		.cfi_endproc
 3511              	.LFE32:
 3513              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3514              		.align	1
 3515              		.global	SEGGER_RTT_TerminalOut
 3516              		.syntax unified
 3517              		.thumb
 3518              		.thumb_func
 3519              		.fpu fpv4-sp-d16
 3521              	SEGGER_RTT_TerminalOut:
 3522              	.LVL327:
 3523              	.LFB33:
1868:RTT/SEGGER_RTT.c **** 
1869:RTT/SEGGER_RTT.c **** /*********************************************************************
1870:RTT/SEGGER_RTT.c **** *
1871:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1872:RTT/SEGGER_RTT.c **** *
1873:RTT/SEGGER_RTT.c **** *  Function description
1874:RTT/SEGGER_RTT.c **** *    Writes a string to the given terminal
1875:RTT/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1876:RTT/SEGGER_RTT.c **** *
1877:RTT/SEGGER_RTT.c **** *  Parameters
1878:RTT/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1879:RTT/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1880:RTT/SEGGER_RTT.c **** *
1881:RTT/SEGGER_RTT.c **** *  Return value
1882:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1883:RTT/SEGGER_RTT.c **** *     < 0 - Error.
1884:RTT/SEGGER_RTT.c **** *
1885:RTT/SEGGER_RTT.c **** */
1886:RTT/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3524              		.loc 1 1886 70 is_stmt 1 view -0
 3525              		.cfi_startproc
 3526              		@ args = 0, pretend = 0, frame = 0
 3527              		@ frame_needed = 0, uses_anonymous_args = 0
 3528              		.loc 1 1886 70 is_stmt 0 view .LVU975
 3529 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3530              	.LCFI39:
 3531              		.cfi_def_cfa_offset 32
 3532              		.cfi_offset 3, -32
 3533              		.cfi_offset 4, -28
 3534              		.cfi_offset 5, -24
 3535              		.cfi_offset 6, -20
 3536              		.cfi_offset 7, -16
 3537              		.cfi_offset 8, -12
 3538              		.cfi_offset 9, -8
 3539              		.cfi_offset 14, -4
 3540 0004 0446     		mov	r4, r0
 3541 0006 0D46     		mov	r5, r1
1887:RTT/SEGGER_RTT.c ****   int                   Status;
 3542              		.loc 1 1887 3 is_stmt 1 view .LVU976
1888:RTT/SEGGER_RTT.c ****   unsigned              FragLen;
 3543              		.loc 1 1888 3 view .LVU977
1889:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 3544              		.loc 1 1889 3 view .LVU978
1890:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3545              		.loc 1 1890 3 view .LVU979
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 101


1891:RTT/SEGGER_RTT.c ****   //
1892:RTT/SEGGER_RTT.c ****   INIT();
 3546              		.loc 1 1892 3 view .LVU980
 3547              		.loc 1 1892 3 view .LVU981
 3548 0008 344B     		ldr	r3, .L256
 3549 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3550 000c FBB1     		cbz	r3, .L252
 3551              	.LVL328:
 3552              	.L242:
 3553              		.loc 1 1892 3 discriminator 3 view .LVU982
1893:RTT/SEGGER_RTT.c ****   //
1894:RTT/SEGGER_RTT.c ****   // Validate terminal ID.
1895:RTT/SEGGER_RTT.c ****   //
1896:RTT/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3554              		.loc 1 1896 3 discriminator 3 view .LVU983
 3555              		.loc 1 1896 6 is_stmt 0 discriminator 3 view .LVU984
 3556 000e 0F2C     		cmp	r4, #15
 3557 0010 61D8     		bhi	.L247
1897:RTT/SEGGER_RTT.c ****     //
1898:RTT/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1899:RTT/SEGGER_RTT.c ****     //
1900:RTT/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];
 3558              		.loc 1 1900 5 is_stmt 1 view .LVU985
 3559              	.LVL329:
1901:RTT/SEGGER_RTT.c ****     //
1902:RTT/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1903:RTT/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1904:RTT/SEGGER_RTT.c ****     //
1905:RTT/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3560              		.loc 1 1905 5 view .LVU986
 3561              		.loc 1 1905 15 is_stmt 0 view .LVU987
 3562 0012 2846     		mov	r0, r5
 3563 0014 FFF7FEFF 		bl	strlen
 3564              	.LVL330:
 3565 0018 8046     		mov	r8, r0
 3566              	.LVL331:
 3567              	.LBB24:
1906:RTT/SEGGER_RTT.c ****     //
1907:RTT/SEGGER_RTT.c ****     // How we output depends upon the mode...
1908:RTT/SEGGER_RTT.c ****     //
1909:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3568              		.loc 1 1909 5 is_stmt 1 view .LVU988
 3569              		.loc 1 1909 5 view .LVU989
 3570              		.syntax unified
 3571              	@ 1909 "RTT/SEGGER_RTT.c" 1
 3572 001a EFF31186 		mrs   r6, basepri  
 3573 001e 4FF02001 		mov   r1, #32       
 3574 0022 81F31188 		msr   basepri, r1  
 3575              		
 3576              	@ 0 "" 2
 3577              	.LVL332:
 3578              		.loc 1 1909 22 view .LVU990
1910:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3579              		.loc 1 1910 5 view .LVU991
 3580              		.loc 1 1910 13 is_stmt 0 view .LVU992
 3581              		.thumb
 3582              		.syntax unified
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 102


 3583 0026 2E4F     		ldr	r7, .L256+4
 3584              	.LVL333:
 3585              		.loc 1 1910 13 view .LVU993
 3586 0028 3846     		mov	r0, r7
 3587              	.LVL334:
 3588              		.loc 1 1910 13 view .LVU994
 3589 002a FFF7FEFF 		bl	_GetAvailWriteSpace
 3590              	.LVL335:
 3591 002e 8146     		mov	r9, r0
 3592              	.LVL336:
1911:RTT/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3593              		.loc 1 1911 5 is_stmt 1 view .LVU995
 3594              		.loc 1 1911 18 is_stmt 0 view .LVU996
 3595 0030 7B69     		ldr	r3, [r7, #20]
 3596              		.loc 1 1911 26 view .LVU997
 3597 0032 03F00303 		and	r3, r3, #3
 3598              		.loc 1 1911 5 view .LVU998
 3599 0036 012B     		cmp	r3, #1
 3600 0038 22D0     		beq	.L244
 3601 003a 022B     		cmp	r3, #2
 3602 003c 3AD0     		beq	.L245
 3603 003e 4BB1     		cbz	r3, .L253
 3604 0040 4FF0FF34 		mov	r4, #-1
 3605              	.LVL337:
 3606              	.L246:
1912:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1913:RTT/SEGGER_RTT.c ****       //
1914:RTT/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1915:RTT/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1916:RTT/SEGGER_RTT.c ****       //
1917:RTT/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1918:RTT/SEGGER_RTT.c ****         Status = 0;
1919:RTT/SEGGER_RTT.c ****       } else {
1920:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1921:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1922:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1923:RTT/SEGGER_RTT.c ****       }
1924:RTT/SEGGER_RTT.c ****       break;
1925:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1926:RTT/SEGGER_RTT.c ****       //
1927:RTT/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1928:RTT/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1929:RTT/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1930:RTT/SEGGER_RTT.c ****       //
1931:RTT/SEGGER_RTT.c ****       if (Avail < 4u) {
1932:RTT/SEGGER_RTT.c ****         Status = -1;
1933:RTT/SEGGER_RTT.c ****       } else {
1934:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1935:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1936:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1937:RTT/SEGGER_RTT.c ****       }
1938:RTT/SEGGER_RTT.c ****       break;
1939:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1940:RTT/SEGGER_RTT.c ****       //
1941:RTT/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
1942:RTT/SEGGER_RTT.c ****       //
1943:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 103


1944:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
1945:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
1946:RTT/SEGGER_RTT.c ****       break;
1947:RTT/SEGGER_RTT.c ****     default:
1948:RTT/SEGGER_RTT.c ****       Status = -1;
1949:RTT/SEGGER_RTT.c ****       break;
1950:RTT/SEGGER_RTT.c ****     }
1951:RTT/SEGGER_RTT.c ****     //
1952:RTT/SEGGER_RTT.c ****     // Finish up.
1953:RTT/SEGGER_RTT.c ****     //
1954:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3607              		.loc 1 1954 5 is_stmt 1 view .LVU999
 3608              		.syntax unified
 3609              	@ 1954 "RTT/SEGGER_RTT.c" 1
 3610 0044 86F31188 		msr   basepri, r6  
 3611              		
 3612              	@ 0 "" 2
 3613              		.thumb
 3614              		.syntax unified
 3615              	.LBE24:
 3616              		.loc 1 1954 24 view .LVU1000
 3617              	.LVL338:
 3618              	.L241:
1955:RTT/SEGGER_RTT.c ****   } else {
1956:RTT/SEGGER_RTT.c ****     Status = -1;
1957:RTT/SEGGER_RTT.c ****   }
1958:RTT/SEGGER_RTT.c ****   return Status;
1959:RTT/SEGGER_RTT.c **** }
 3619              		.loc 1 1959 1 is_stmt 0 view .LVU1001
 3620 0048 2046     		mov	r0, r4
 3621 004a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3622              	.LVL339:
 3623              	.L252:
1892:RTT/SEGGER_RTT.c ****   //
 3624              		.loc 1 1892 3 is_stmt 1 discriminator 1 view .LVU1002
 3625 004e FFF7FEFF 		bl	_DoInit
 3626              	.LVL340:
1892:RTT/SEGGER_RTT.c ****   //
 3627              		.loc 1 1892 3 is_stmt 0 discriminator 1 view .LVU1003
 3628 0052 DCE7     		b	.L242
 3629              	.LVL341:
 3630              	.L253:
 3631              	.LBB25:
1917:RTT/SEGGER_RTT.c ****         Status = 0;
 3632              		.loc 1 1917 7 is_stmt 1 view .LVU1004
1917:RTT/SEGGER_RTT.c ****         Status = 0;
 3633              		.loc 1 1917 28 is_stmt 0 view .LVU1005
 3634 0054 08F10403 		add	r3, r8, #4
1917:RTT/SEGGER_RTT.c ****         Status = 0;
 3635              		.loc 1 1917 10 view .LVU1006
 3636 0058 8342     		cmp	r3, r0
 3637 005a 01D9     		bls	.L254
1918:RTT/SEGGER_RTT.c ****       } else {
 3638              		.loc 1 1918 16 view .LVU1007
 3639 005c 0024     		movs	r4, #0
 3640 005e F1E7     		b	.L246
 3641              	.L254:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 104


1920:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3642              		.loc 1 1920 9 is_stmt 1 view .LVU1008
 3643 0060 2146     		mov	r1, r4
 3644 0062 3846     		mov	r0, r7
 3645              	.LVL342:
1920:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3646              		.loc 1 1920 9 is_stmt 0 view .LVU1009
 3647 0064 FFF7FEFF 		bl	_PostTerminalSwitch
 3648              	.LVL343:
1921:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3649              		.loc 1 1921 9 is_stmt 1 view .LVU1010
1921:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3650              		.loc 1 1921 23 is_stmt 0 view .LVU1011
 3651 0068 4246     		mov	r2, r8
 3652 006a 2946     		mov	r1, r5
 3653 006c 3846     		mov	r0, r7
 3654 006e FFF7FEFF 		bl	_WriteBlocking
 3655              	.LVL344:
 3656 0072 0446     		mov	r4, r0
 3657              	.LVL345:
1922:RTT/SEGGER_RTT.c ****       }
 3658              		.loc 1 1922 9 is_stmt 1 view .LVU1012
 3659 0074 1B4B     		ldr	r3, .L256+8
 3660 0076 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3661 0078 3846     		mov	r0, r7
 3662              	.LVL346:
1922:RTT/SEGGER_RTT.c ****       }
 3663              		.loc 1 1922 9 is_stmt 0 view .LVU1013
 3664 007a FFF7FEFF 		bl	_PostTerminalSwitch
 3665              	.LVL347:
 3666 007e E1E7     		b	.L246
 3667              	.LVL348:
 3668              	.L244:
1931:RTT/SEGGER_RTT.c ****         Status = -1;
 3669              		.loc 1 1931 7 is_stmt 1 view .LVU1014
1931:RTT/SEGGER_RTT.c ****         Status = -1;
 3670              		.loc 1 1931 10 is_stmt 0 view .LVU1015
 3671 0080 0328     		cmp	r0, #3
 3672 0082 02D8     		bhi	.L255
1932:RTT/SEGGER_RTT.c ****       } else {
 3673              		.loc 1 1932 16 view .LVU1016
 3674 0084 4FF0FF34 		mov	r4, #-1
 3675 0088 DCE7     		b	.L246
 3676              	.L255:
1934:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3677              		.loc 1 1934 9 is_stmt 1 view .LVU1017
 3678 008a 154F     		ldr	r7, .L256+4
1934:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3679              		.loc 1 1934 9 is_stmt 0 view .LVU1018
 3680 008c 2146     		mov	r1, r4
 3681 008e 3846     		mov	r0, r7
 3682              	.LVL349:
1934:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3683              		.loc 1 1934 9 view .LVU1019
 3684 0090 FFF7FEFF 		bl	_PostTerminalSwitch
 3685              	.LVL350:
1935:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 105


 3686              		.loc 1 1935 9 is_stmt 1 view .LVU1020
1935:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3687              		.loc 1 1935 66 is_stmt 0 view .LVU1021
 3688 0094 A9F10402 		sub	r2, r9, #4
1935:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3689              		.loc 1 1935 23 view .LVU1022
 3690 0098 4245     		cmp	r2, r8
 3691 009a 28BF     		it	cs
 3692 009c 4246     		movcs	r2, r8
 3693 009e 2946     		mov	r1, r5
 3694 00a0 3846     		mov	r0, r7
 3695 00a2 FFF7FEFF 		bl	_WriteBlocking
 3696              	.LVL351:
 3697 00a6 0446     		mov	r4, r0
 3698              	.LVL352:
1936:RTT/SEGGER_RTT.c ****       }
 3699              		.loc 1 1936 9 is_stmt 1 view .LVU1023
 3700 00a8 0E4B     		ldr	r3, .L256+8
 3701 00aa 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3702 00ac 3846     		mov	r0, r7
 3703              	.LVL353:
1936:RTT/SEGGER_RTT.c ****       }
 3704              		.loc 1 1936 9 is_stmt 0 view .LVU1024
 3705 00ae FFF7FEFF 		bl	_PostTerminalSwitch
 3706              	.LVL354:
 3707 00b2 C7E7     		b	.L246
 3708              	.LVL355:
 3709              	.L245:
1943:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3710              		.loc 1 1943 7 is_stmt 1 view .LVU1025
 3711 00b4 0A4F     		ldr	r7, .L256+4
1943:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3712              		.loc 1 1943 7 is_stmt 0 view .LVU1026
 3713 00b6 2146     		mov	r1, r4
 3714 00b8 3846     		mov	r0, r7
 3715              	.LVL356:
1943:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3716              		.loc 1 1943 7 view .LVU1027
 3717 00ba FFF7FEFF 		bl	_PostTerminalSwitch
 3718              	.LVL357:
1944:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3719              		.loc 1 1944 7 is_stmt 1 view .LVU1028
1944:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3720              		.loc 1 1944 21 is_stmt 0 view .LVU1029
 3721 00be 4246     		mov	r2, r8
 3722 00c0 2946     		mov	r1, r5
 3723 00c2 3846     		mov	r0, r7
 3724 00c4 FFF7FEFF 		bl	_WriteBlocking
 3725              	.LVL358:
 3726 00c8 0446     		mov	r4, r0
 3727              	.LVL359:
1945:RTT/SEGGER_RTT.c ****       break;
 3728              		.loc 1 1945 7 is_stmt 1 view .LVU1030
 3729 00ca 064B     		ldr	r3, .L256+8
 3730 00cc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3731 00ce 3846     		mov	r0, r7
 3732              	.LVL360:
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 106


1945:RTT/SEGGER_RTT.c ****       break;
 3733              		.loc 1 1945 7 is_stmt 0 view .LVU1031
 3734 00d0 FFF7FEFF 		bl	_PostTerminalSwitch
 3735              	.LVL361:
1946:RTT/SEGGER_RTT.c ****     default:
 3736              		.loc 1 1946 7 is_stmt 1 view .LVU1032
 3737 00d4 B6E7     		b	.L246
 3738              	.LVL362:
 3739              	.L247:
1946:RTT/SEGGER_RTT.c ****     default:
 3740              		.loc 1 1946 7 is_stmt 0 view .LVU1033
 3741              	.LBE25:
1956:RTT/SEGGER_RTT.c ****   }
 3742              		.loc 1 1956 12 view .LVU1034
 3743 00d6 4FF0FF34 		mov	r4, #-1
 3744              	.LVL363:
1958:RTT/SEGGER_RTT.c **** }
 3745              		.loc 1 1958 3 is_stmt 1 view .LVU1035
1958:RTT/SEGGER_RTT.c **** }
 3746              		.loc 1 1958 10 is_stmt 0 view .LVU1036
 3747 00da B5E7     		b	.L241
 3748              	.L257:
 3749              		.align	2
 3750              	.L256:
 3751 00dc 00000000 		.word	_SEGGER_RTT
 3752 00e0 18000000 		.word	_SEGGER_RTT+24
 3753 00e4 00000000 		.word	.LANCHOR3
 3754              		.cfi_endproc
 3755              	.LFE33:
 3757              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 3758              		.align	1
 3759              		.global	SEGGER_RTT_GetAvailWriteSpace
 3760              		.syntax unified
 3761              		.thumb
 3762              		.thumb_func
 3763              		.fpu fpv4-sp-d16
 3765              	SEGGER_RTT_GetAvailWriteSpace:
 3766              	.LVL364:
 3767              	.LFB34:
1960:RTT/SEGGER_RTT.c **** 
1961:RTT/SEGGER_RTT.c **** /*********************************************************************
1962:RTT/SEGGER_RTT.c **** *
1963:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
1964:RTT/SEGGER_RTT.c **** *
1965:RTT/SEGGER_RTT.c **** *  Function description
1966:RTT/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
1967:RTT/SEGGER_RTT.c **** *
1968:RTT/SEGGER_RTT.c **** *  Parameters
1969:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
1970:RTT/SEGGER_RTT.c **** *
1971:RTT/SEGGER_RTT.c **** *  Return value
1972:RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
1973:RTT/SEGGER_RTT.c **** */
1974:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex){
 3768              		.loc 1 1974 62 is_stmt 1 view -0
 3769              		.cfi_startproc
 3770              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 107


 3771              		@ frame_needed = 0, uses_anonymous_args = 0
 3772              		.loc 1 1974 62 is_stmt 0 view .LVU1038
 3773 0000 08B5     		push	{r3, lr}
 3774              	.LCFI40:
 3775              		.cfi_def_cfa_offset 8
 3776              		.cfi_offset 3, -8
 3777              		.cfi_offset 14, -4
1975:RTT/SEGGER_RTT.c ****   return _GetAvailWriteSpace(&_SEGGER_RTT.aUp[BufferIndex]);
 3778              		.loc 1 1975 3 is_stmt 1 view .LVU1039
 3779              		.loc 1 1975 10 is_stmt 0 view .LVU1040
 3780 0002 0130     		adds	r0, r0, #1
 3781              	.LVL365:
 3782              		.loc 1 1975 10 view .LVU1041
 3783 0004 00EB4000 		add	r0, r0, r0, lsl #1
 3784              	.LVL366:
 3785              		.loc 1 1975 10 view .LVU1042
 3786 0008 024B     		ldr	r3, .L260
 3787 000a 03EBC000 		add	r0, r3, r0, lsl #3
 3788 000e FFF7FEFF 		bl	_GetAvailWriteSpace
 3789              	.LVL367:
1976:RTT/SEGGER_RTT.c **** }
 3790              		.loc 1 1976 1 view .LVU1043
 3791 0012 08BD     		pop	{r3, pc}
 3792              	.L261:
 3793              		.align	2
 3794              	.L260:
 3795 0014 00000000 		.word	_SEGGER_RTT
 3796              		.cfi_endproc
 3797              	.LFE34:
 3799              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 3800              		.align	1
 3801              		.global	SEGGER_RTT_GetBytesInBuffer
 3802              		.syntax unified
 3803              		.thumb
 3804              		.thumb_func
 3805              		.fpu fpv4-sp-d16
 3807              	SEGGER_RTT_GetBytesInBuffer:
 3808              	.LVL368:
 3809              	.LFB35:
1977:RTT/SEGGER_RTT.c **** 
1978:RTT/SEGGER_RTT.c **** 
1979:RTT/SEGGER_RTT.c **** /*********************************************************************
1980:RTT/SEGGER_RTT.c **** *
1981:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
1982:RTT/SEGGER_RTT.c **** *
1983:RTT/SEGGER_RTT.c **** *  Function description
1984:RTT/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
1985:RTT/SEGGER_RTT.c **** *
1986:RTT/SEGGER_RTT.c **** *  Parameters
1987:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
1988:RTT/SEGGER_RTT.c **** *
1989:RTT/SEGGER_RTT.c **** *  Return value
1990:RTT/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
1991:RTT/SEGGER_RTT.c **** */
1992:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 3810              		.loc 1 1992 60 is_stmt 1 view -0
 3811              		.cfi_startproc
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 108


 3812              		@ args = 0, pretend = 0, frame = 0
 3813              		@ frame_needed = 0, uses_anonymous_args = 0
 3814              		@ link register save eliminated.
1993:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 3815              		.loc 1 1993 3 view .LVU1045
1994:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 3816              		.loc 1 1994 3 view .LVU1046
1995:RTT/SEGGER_RTT.c ****   unsigned r;
 3817              		.loc 1 1995 3 view .LVU1047
1996:RTT/SEGGER_RTT.c ****   //
1997:RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
1998:RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
1999:RTT/SEGGER_RTT.c ****   //
2000:RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aUp[BufferIndex].RdOff;
 3818              		.loc 1 2000 3 view .LVU1048
 3819              		.loc 1 2000 9 is_stmt 0 view .LVU1049
 3820 0000 00EB4002 		add	r2, r0, r0, lsl #1
 3821 0004 084B     		ldr	r3, .L265
 3822 0006 03EBC203 		add	r3, r3, r2, lsl #3
 3823 000a 9A6A     		ldr	r2, [r3, #40]
 3824              	.LVL369:
2001:RTT/SEGGER_RTT.c ****   WrOff = _SEGGER_RTT.aUp[BufferIndex].WrOff;
 3825              		.loc 1 2001 3 is_stmt 1 view .LVU1050
 3826              		.loc 1 2001 9 is_stmt 0 view .LVU1051
 3827 000c 5B6A     		ldr	r3, [r3, #36]
 3828              	.LVL370:
2002:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 3829              		.loc 1 2002 3 is_stmt 1 view .LVU1052
 3830              		.loc 1 2002 6 is_stmt 0 view .LVU1053
 3831 000e 9A42     		cmp	r2, r3
 3832 0010 01D8     		bhi	.L263
2003:RTT/SEGGER_RTT.c ****     r = WrOff - RdOff;
 3833              		.loc 1 2003 5 is_stmt 1 view .LVU1054
 3834              		.loc 1 2003 7 is_stmt 0 view .LVU1055
 3835 0012 981A     		subs	r0, r3, r2
 3836              	.LVL371:
 3837              		.loc 1 2003 7 view .LVU1056
 3838 0014 7047     		bx	lr
 3839              	.LVL372:
 3840              	.L263:
2004:RTT/SEGGER_RTT.c ****   } else {
2005:RTT/SEGGER_RTT.c ****     r = _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 3841              		.loc 1 2005 5 is_stmt 1 view .LVU1057
 3842              		.loc 1 2005 37 is_stmt 0 view .LVU1058
 3843 0016 00EB4000 		add	r0, r0, r0, lsl #1
 3844              	.LVL373:
 3845              		.loc 1 2005 37 view .LVU1059
 3846 001a 0349     		ldr	r1, .L265
 3847 001c 01EBC000 		add	r0, r1, r0, lsl #3
 3848 0020 006A     		ldr	r0, [r0, #32]
 3849              		.loc 1 2005 51 view .LVU1060
 3850 0022 D21A     		subs	r2, r2, r3
 3851              	.LVL374:
 3852              		.loc 1 2005 7 view .LVU1061
 3853 0024 1044     		add	r0, r0, r2
 3854              	.LVL375:
2006:RTT/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 109


2007:RTT/SEGGER_RTT.c ****   return r;
 3855              		.loc 1 2007 3 is_stmt 1 view .LVU1062
2008:RTT/SEGGER_RTT.c **** }
 3856              		.loc 1 2008 1 is_stmt 0 view .LVU1063
 3857 0026 7047     		bx	lr
 3858              	.L266:
 3859              		.align	2
 3860              	.L265:
 3861 0028 00000000 		.word	_SEGGER_RTT
 3862              		.cfi_endproc
 3863              	.LFE35:
 3865              		.comm	_SEGGER_RTT,168,4
 3866              		.section	.bss._ActiveTerminal,"aw",%nobits
 3867              		.set	.LANCHOR3,. + 0
 3870              	_ActiveTerminal:
 3871 0000 00       		.space	1
 3872              		.section	.bss._acDownBuffer,"aw",%nobits
 3873              		.align	2
 3874              		.set	.LANCHOR2,. + 0
 3877              	_acDownBuffer:
 3878 0000 00000000 		.space	16
 3878      00000000 
 3878      00000000 
 3878      00000000 
 3879              		.section	.bss._acUpBuffer,"aw",%nobits
 3880              		.align	2
 3881              		.set	.LANCHOR1,. + 0
 3884              	_acUpBuffer:
 3885 0000 00000000 		.space	1024
 3885      00000000 
 3885      00000000 
 3885      00000000 
 3885      00000000 
 3886              		.section	.rodata._aTerminalId,"a"
 3887              		.align	2
 3888              		.set	.LANCHOR0,. + 0
 3891              	_aTerminalId:
 3892 0000 30313233 		.ascii	"0123456789ABCDEF"
 3892      34353637 
 3892      38394142 
 3892      43444546 
 3893              		.text
 3894              	.Letext0:
 3895              		.file 2 "e:\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 3896              		.file 3 "e:\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 3897              		.file 4 "e:\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 3898              		.file 5 "e:\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 3899              		.file 6 "e:\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 3900              		.file 7 "RTT/SEGGER_RTT.h"
 3901              		.file 8 "e:\\9 2020-q2-update\\arm-none-eabi\\include\\string.h"
 3902              		.file 9 "<built-in>"
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 110


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:18     .text._GetAvailWriteSpace:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:25     .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:79     .text._WriteNoCheck:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:85     .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:175    .text._WriteBlocking:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:181    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:320    .text._PostTerminalSwitch:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:326    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:368    .text._PostTerminalSwitch:00000020 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:373    .rodata._DoInit.str1.4:00000000 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:383    .text._DoInit:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:389    .text._DoInit:00000000 _DoInit
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:467    .text._DoInit:00000048 $d
                            *COM*:000000a8 _SEGGER_RTT
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:477    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:484    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 SEGGER_RTT_ReadUpBufferNoLock
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:659    .text.SEGGER_RTT_ReadUpBufferNoLock:000000a8 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:664    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:671    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:841    .text.SEGGER_RTT_ReadNoLock:0000009c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:846    .text.SEGGER_RTT_ReadUpBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:853    .text.SEGGER_RTT_ReadUpBuffer:00000000 SEGGER_RTT_ReadUpBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:905    .text.SEGGER_RTT_Read:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:912    .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:964    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:971    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1195   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000010c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1200   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1207   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 SEGGER_RTT_WriteDownBufferNoLock
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1321   .text.SEGGER_RTT_WriteDownBufferNoLock:00000060 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1326   .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1333   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1448   .text.SEGGER_RTT_WriteNoLock:00000068 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1453   .text.SEGGER_RTT_WriteDownBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1460   .text.SEGGER_RTT_WriteDownBuffer:00000000 SEGGER_RTT_WriteDownBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1533   .text.SEGGER_RTT_WriteDownBuffer:00000030 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1538   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1545   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1618   .text.SEGGER_RTT_Write:00000030 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1623   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1630   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1673   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1680   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1774   .text.SEGGER_RTT_PutCharSkipNoLock:0000004c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1779   .text.SEGGER_RTT_PutCharSkip:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1786   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1914   .text.SEGGER_RTT_PutCharSkip:0000006c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1920   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:1927   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2077   .text.SEGGER_RTT_PutChar:0000008c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2083   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2090   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2142   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2149   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2178   .text.SEGGER_RTT_HasKey:00000000 $t
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 111


C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2185   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2238   .text.SEGGER_RTT_HasKey:00000020 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2243   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2250   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2281   .text.SEGGER_RTT_HasData:0000001c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2286   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2293   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2324   .text.SEGGER_RTT_HasDataUp:0000001c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2329   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2336   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2471   .text.SEGGER_RTT_AllocDownBuffer:00000070 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2477   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2484   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2622   .text.SEGGER_RTT_AllocUpBuffer:0000007c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2628   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2635   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2758   .text.SEGGER_RTT_ConfigUpBuffer:00000070 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2763   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2770   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2890   .text.SEGGER_RTT_ConfigDownBuffer:00000064 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2895   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2902   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2994   .text.SEGGER_RTT_SetNameUpBuffer:00000040 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:2999   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3006   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3096   .text.SEGGER_RTT_SetNameDownBuffer:00000040 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3101   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3108   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3198   .text.SEGGER_RTT_SetFlagsUpBuffer:00000040 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3203   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3210   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3300   .text.SEGGER_RTT_SetFlagsDownBuffer:00000040 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3305   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3312   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3332   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3339   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3506   .text.SEGGER_RTT_SetTerminal:0000007c $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3514   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3521   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3751   .text.SEGGER_RTT_TerminalOut:000000dc $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3758   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3765   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 SEGGER_RTT_GetAvailWriteSpace
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3795   .text.SEGGER_RTT_GetAvailWriteSpace:00000014 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3800   .text.SEGGER_RTT_GetBytesInBuffer:00000000 $t
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3807   .text.SEGGER_RTT_GetBytesInBuffer:00000000 SEGGER_RTT_GetBytesInBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3861   .text.SEGGER_RTT_GetBytesInBuffer:00000028 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3870   .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3871   .bss._ActiveTerminal:00000000 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3873   .bss._acDownBuffer:00000000 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3877   .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3880   .bss._acUpBuffer:00000000 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3884   .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3887   .rodata._aTerminalId:00000000 $d
C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s:3891   .rodata._aTerminalId:00000000 _aTerminalId

UNDEFINED SYMBOLS
memcpy
ARM GAS  C:\Users\zhuWenQ\AppData\Local\Temp\cc82u7BK.s 			page 112


strlen
